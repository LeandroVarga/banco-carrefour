

================================================================================
=  PROJECT DUMP — HEADER
================================================================================
Timestamp       : 2025-09-29 18:33:06 -03:00
Root            : C:\Users\leand\teste\banco-carrefour
PowerShell      : 7.5.3
OS              : Microsoft Windows NT 10.0.26100.0
IncludeBinary   : False

================================================================================
=  TREE (ASCII)
================================================================================
Folder PATH listing
Volume serial number is C48B-9891
C:.
|   .editorconfig
|   .env
|   .env.example
|   .gitattributes
|   .gitignore
|   docker-compose.yml
|   make-project-dump.ps1
|   Makefile
|   pom.xml
|   project-dump.txt
|   README.md
|   
+---.github
|   \---workflows
|           test.yml
|           
+---api-gateway
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   \---main
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---gateway
|   |       |               |   ApiGatewayApplication.java
|   |       |               |   
|   |       |               +---config
|   |       |               |       CorsConfig.java
|   |       |               |       
|   |       |               +---filters
|   |       |               |       ApiKeyWriteGuardFilter.java
|   |       |               |       RateLimitFilter.java
|   |       |               |       RequestIdFilter.java
|   |       |               |       
|   |       |               \---web
|   |       |                       FallbackController.java
|   |       |                       GlobalExceptionHandler.java
|   |       |                       
|   |       \---resources
|   |               application.yml
|   |               
|   \---target
|       |   api-gateway-0.1.0-SNAPSHOT.jar
|       |   api-gateway-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   
|       |   \---com
|       |       \---cashflowchallenge
|       |           \---gateway
|       |               |   ApiGatewayApplication.class
|       |               |   
|       |               +---filters
|       |               |       ApiKeyWriteGuardFilter.class
|       |               |       RateLimitFilter.class
|       |               |       RequestIdFilter.class
|       |               |       
|       |               \---web
|       |                       FallbackController.class
|       |                       GlobalExceptionHandler.class
|       |                       
|       +---generated-sources
|       |   \---annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       \---maven-status
|           \---maven-compiler-plugin
|               \---compile
|                   \---default-compile
|                           createdFiles.lst
|                           inputFiles.lst
|                           
+---balance-query-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---query
|   |   |   |               |   BalanceQueryApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |   |   BalanceController.java
|   |   |   |               |   |   
|   |   |   |               |   \---dto
|   |   |   |               |           BalancePoint.java
|   |   |   |               |           
|   |   |   |               +---domain
|   |   |   |               |       DailyBalance.java
|   |   |   |               |       
|   |   |   |               +---infrastructure
|   |   |   |               |   +---repository
|   |   |   |               |   |       DailyBalanceRepository.java
|   |   |   |               |   |       
|   |   |   |               |   +---security
|   |   |   |               |   |       RequestIdFilter.java
|   |   |   |               |   |       
|   |   |   |               |   \---web
|   |   |   |               |           CorsConfig.java
|   |   |   |               |           GlobalExceptionHandler.java
|   |   |   |               |           
|   |   |   |               \---web
|   |   |   \---resources
|   |   |           application.yml
|   |   |           logback-spring.xml
|   |   |           
|   |   \---test
|   |       \---java
|   |           \---com
|   |               \---cashflowchallenge
|   |                   \---query
|   |                       \---api
|   \---target
|       |   balance-query-service-0.1.0-SNAPSHOT.jar
|       |   balance-query-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   \---com
|       |       \---cashflowchallenge
|       |           \---query
|       |               |   BalanceQueryApplication.class
|       |               |   
|       |               +---api
|       |               |       BalanceController.class
|       |               |       
|       |               +---domain
|       |               |       DailyBalance.class
|       |               |       
|       |               \---infrastructure
|       |                   +---repository
|       |                   |       DailyBalanceRepository.class
|       |                   |       
|       |                   +---security
|       |                   |       RequestIdFilter.class
|       |                   |       
|       |                   \---web
|       |                           GlobalExceptionHandler.class
|       |                           
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       \---test-classes
+---consolidator-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---consolidator
|   |   |   |               |   ConsolidatorApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |       RebuildController.java
|   |   |   |               |       
|   |   |   |               +---application
|   |   |   |               |       BalanceApplicationService.java
|   |   |   |               |       RebuildService.java
|   |   |   |               |       
|   |   |   |               +---domain
|   |   |   |               |       DailyBalance.java
|   |   |   |               |       
|   |   |   |               +---infrastructure
|   |   |   |               |   +---messaging
|   |   |   |               |   |       LedgerEventConsumer.java
|   |   |   |               |   |       RabbitConfig.java
|   |   |   |               |   |       
|   |   |   |               |   +---repository
|   |   |   |               |   |       DailyBalanceRepository.java
|   |   |   |               |   |       ProcessedEventRepository.java
|   |   |   |               |   |       
|   |   |   |               |   +---security
|   |   |   |               |   |       ApiKeyFilter.java
|   |   |   |               |   |       RequestIdFilter.java
|   |   |   |               |   |       
|   |   |   |               |   \---web
|   |   |   |               |           CorsConfig.java
|   |   |   |               |           GlobalExceptionHandler.java
|   |   |   |               |           
|   |   |   |               \---web
|   |   |   \---resources
|   |   |       |   application.yml
|   |   |       |   logback-spring.xml
|   |   |       |   
|   |   |       \---db
|   |   |           \---migration
|   |   |                   V1__init.sql
|   |   |                   V2__indexes.sql
|   |   |                   V3__drop_redundant_idx.sql
|   |   |                   V4__processed_events.sql
|   |   |                   V5__report_guards.sql
|   |   |                   
|   |   \---test
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---consolidator
|   |       |               +---it
|   |       |               |       DoubleDeliveryIT.java
|   |       |               |       
|   |       |               \---repo
|   |       |                       DailyBalanceRepositoryIT.java
|   |       |                       
|   |       \---resources
|   |               application-it.yml
|   |               
|   \---target
|       |   consolidator-service-0.1.0-SNAPSHOT.jar
|       |   consolidator-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   +---com
|       |   |   \---cashflowchallenge
|       |   |       \---consolidator
|       |   |           |   ConsolidatorApplication.class
|       |   |           |   
|       |   |           +---api
|       |   |           |       RebuildController.class
|       |   |           |       
|       |   |           +---domain
|       |   |           |       DailyBalance.class
|       |   |           |       
|       |   |           \---infrastructure
|       |   |               +---messaging
|       |   |               |       LedgerEventConsumer.class
|       |   |               |       RabbitConfig.class
|       |   |               |       
|       |   |               +---repository
|       |   |               |       DailyBalanceRepository.class
|       |   |               |       
|       |   |               +---security
|       |   |               |       ApiKeyFilter.class
|       |   |               |       RequestIdFilter.class
|       |   |               |       
|       |   |               \---web
|       |   |                       GlobalExceptionHandler.class
|       |   |                       
|       |   \---db
|       |       \---migration
|       |               V1__init.sql
|       |               V2__indexes.sql
|       |               V3__drop_redundant_idx.sql
|       |               V4__processed_events.sql
|       |               V5__report_guards.sql
|       |               
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       com.cashflowchallenge.consolidator.repo.DailyBalanceRepositoryTest.txt
|       |       TEST-com.cashflowchallenge.consolidator.repo.DailyBalanceRepositoryTest.xml
|       |       
|       \---test-classes
|           |   application-it.yml
|           |   
|           \---com
|               \---cashflowchallenge
|                   \---consolidator
|                       +---it
|                       |       DoubleDeliveryIT.class
|                       |       
|                       \---repo
|                               DailyBalanceRepositoryIT.class
|                               
+---docs
|   |   CHECKLIST-REQUISITOS.md
|   |   TESTES.md
|   |   
|   +---adr
|   |       ADR-001-microservices-ddd-outbox.md
|   |       ADR-002-rabbitmq-vs-kafka.md
|   |       ADR-003-rate-limiting-gateway.md
|   |       ADR-004-idempotency-and-outbox.md
|   |       
|   \---diagrams
|           c4-container.mmd
|           c4-context.mmd
|           sequence-entry-to-balance.mmd
|           
+---it-tests
|   |   pom.xml
|   |   
|   +---src
|   |   \---test
|   |       \---java
|   |           \---com
|   |               \---cashflowchallenge
|   |                   \---it
|   |                           DuplicateIdempotencyIT.java
|   |                           LedgerFlowIT.java
|   |                           
|   \---target
|       |   it-tests-0.1.0-SNAPSHOT.jar
|       |   
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       com.cashflowchallenge.it.LedgerFlowIT.txt
|       |       TEST-com.cashflowchallenge.it.LedgerFlowIT.xml
|       |       
|       \---test-classes
|           \---com
|               \---cashflowchallenge
|                   \---it
|                           LedgerFlowIT.class
|                           
+---ledger-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---ledger
|   |   |   |               |   LedgerApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |   |   LedgerController.java
|   |   |   |               |   |   
|   |   |   |               |   \---dto
|   |   |   |               |           LedgerEntryRequest.java
|   |   |   |               |           LedgerEntryResponse.java
|   |   |   |               |           
|   |   |   |               +---application
|   |   |   |               |       RecordEntryService.java
|   |   |   |               |       
|   |   |   |               +---domain
|   |   |   |               |       Entry.java
|   |   |   |               |       EntryType.java
|   |   |   |               |       OutboxEvent.java
|   |   |   |               |       
|   |   |   |               \---infrastructure
|   |   |   |                   +---config
|   |   |   |                   |       JdbcConfig.java
|   |   |   |                   |       
|   |   |   |                   +---messaging
|   |   |   |                   |       OutboxDrainScheduler.java
|   |   |   |                   |       OutboxPublisher.java
|   |   |   |                   |       RabbitConfig.java
|   |   |   |                   |       
|   |   |   |                   +---repository
|   |   |   |                   |       EntryRepository.java
|   |   |   |                   |       OutboxRepository.java
|   |   |   |                   |       
|   |   |   |                   +---security
|   |   |   |                   |       ApiKeyFilter.java
|   |   |   |                   |       RequestIdFilter.java
|   |   |   |                   |       
|   |   |   |                   \---web
|   |   |   |                           CorsConfig.java
|   |   |   |                           GlobalExceptionHandler.java
|   |   |   |                           
|   |   |   \---resources
|   |   |       |   application.yml
|   |   |       |   logback-spring.xml
|   |   |       |   
|   |   |       \---db
|   |   |           \---migration
|   |   |                   V1__init.sql
|   |   |                   V2__indexes.sql
|   |   |                   V3__ledger_constraints.sql
|   |   |                   V4__outbox_state.sql
|   |   |                   V5__ledger_amount_and_enum_guards.sql
|   |   |                   V6__ledger_indexes_more.sql
|   |   |                   V7__maintenance_views.sql
|   |   |                   V8__outbox_poison_flag.sql
|   |   |                   
|   |   \---test
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---ledger
|   |       |               +---api
|   |       |               |       LedgerIdempotencyIT.java
|   |       |               |       
|   |       |               +---domain
|   |       |               |       EntryTypeTest.java
|   |       |               |       
|   |       |               +---infra
|   |       |               |       JpaOutboxIT.java
|   |       |               |       
|   |       |               \---infrastructure
|   |       |                   \---messaging
|   |       |                           OutboxPublisherCorrelationIdTest.java
|   |       |                           OutboxPublisherReturnThenAckTest.java
|   |       |                           
|   |       \---resources
|   |               application-it.yml
|   |               
|   \---target
|       |   ledger-service-0.1.0-SNAPSHOT.jar
|       |   ledger-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   +---com
|       |   |   \---cashflowchallenge
|       |   |       \---ledger
|       |   |           |   LedgerApplication.class
|       |   |           |   
|       |   |           +---api
|       |   |           |   |   LedgerController.class
|       |   |           |   |   
|       |   |           |   \---dto
|       |   |           |           LedgerEntryRequest.class
|       |   |           |           LedgerEntryResponse.class
|       |   |           |           
|       |   |           +---application
|       |   |           |       RecordEntryService$Result.class
|       |   |           |       RecordEntryService.class
|       |   |           |       
|       |   |           +---domain
|       |   |           |       Entry.class
|       |   |           |       EntryType.class
|       |   |           |       OutboxEvent.class
|       |   |           |       
|       |   |           \---infrastructure
|       |   |               +---config
|       |   |               |       JdbcConfig.class
|       |   |               |       
|       |   |               +---messaging
|       |   |               |       OutboxDrainScheduler.class
|       |   |               |       OutboxPublisher.class
|       |   |               |       RabbitConfig.class
|       |   |               |       
|       |   |               +---repository
|       |   |               |       EntryRepository.class
|       |   |               |       OutboxRepository.class
|       |   |               |       
|       |   |               +---security
|       |   |               |       ApiKeyFilter.class
|       |   |               |       RequestIdFilter.class
|       |   |               |       
|       |   |               \---web
|       |   |                       GlobalExceptionHandler.class
|       |   |                       
|       |   \---db
|       |       \---migration
|       |               V1__init.sql
|       |               V2__indexes.sql
|       |               V3__ledger_constraints.sql
|       |               V4__outbox_state.sql
|       |               V5__ledger_amount_and_enum_guards.sql
|       |               V6__ledger_indexes_more.sql
|       |               V7__maintenance_views.sql
|       |               V8__outbox_poison_flag.sql
|       |               
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       2025-09-27T23-54-32_542-jvmRun2.dump
|       |       2025-09-27T23-54-32_542-jvmRun2.dumpstream
|       |       com.cashflowchallenge.ledger.domain.EntryTypeTest.txt
|       |       com.cashflowchallenge.ledger.infra.JpaOutboxTest.txt
|       |       com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherCorrelationIdTest.txt
|       |       com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherReturnThenAckTest.txt
|       |       TEST-com.cashflowchallenge.ledger.domain.EntryTypeTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infra.JpaOutboxTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherCorrelationIdTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherReturnThenAckTest.xml
|       |       
|       \---test-classes
|           |   application-it.yml
|           |   
|           \---com
|               \---cashflowchallenge
|                   \---ledger
|                       +---api
|                       |       LedgerIdempotencyIT$1.class
|                       |       LedgerIdempotencyIT.class
|                       |       
|                       +---domain
|                       |       EntryTypeTest.class
|                       |       
|                       +---infra
|                       |       JpaOutboxIT.class
|                       |       
|                       \---infrastructure
|                           \---messaging
|                                   OutboxPublisherCorrelationIdTest.class
|                                   OutboxPublisherReturnThenAckTest.class
|                                   
+---ops
|   |   load.ps1
|   |   load.sh
|   |   requests.http
|   |   test-suite.ps1
|   |   test-suite.sh
|   |   
|   +---grafana
|   |   \---provisioning
|   |       +---dashboards
|   |       |       dashboard.yml
|   |       |       spring-dashboard.json
|   |       |       
|   |       \---datasources
|   |               datasource.yml
|   |               
|   \---prometheus
|           prometheus.yml
|           rules.yml
|           
+---out
|       scenario-A-credit-replay-resp.txt
|       scenario-A-credit-req.json
|       scenario-A-credit-resp.txt
|       scenario-A-daily-resp.json
|       scenario-A-debit-replay-resp.txt
|       scenario-A-debit-req.json
|       scenario-A-debit-resp.txt
|       
+---secrets
\---target
    \---classes
        \---META-INF
            \---sbom
                    application.cdx.json
                    

================================================================================
=  FILE LIST (filtered)
================================================================================
.editorconfig
.env
.env.example
.gitattributes
.github\workflows\test.yml
.gitignore
api-gateway\docker-entrypoint.sh
api-gateway\Dockerfile
api-gateway\pom.xml
api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java
api-gateway\src\main\resources\application.yml
balance-query-service\docker-entrypoint.sh
balance-query-service\Dockerfile
balance-query-service\pom.xml
balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java
balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java
balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java
balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java
balance-query-service\src\main\resources\application.yml
balance-query-service\src\main\resources\logback-spring.xml
consolidator-service\docker-entrypoint.sh
consolidator-service\Dockerfile
consolidator-service\pom.xml
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java
consolidator-service\src\main\resources\application.yml
consolidator-service\src\main\resources\db\migration\V1__init.sql
consolidator-service\src\main\resources\db\migration\V2__indexes.sql
consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql
consolidator-service\src\main\resources\db\migration\V4__processed_events.sql
consolidator-service\src\main\resources\db\migration\V5__report_guards.sql
consolidator-service\src\main\resources\logback-spring.xml
consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java
consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java
consolidator-service\src\test\resources\application-it.yml
docker-compose.yml
docs\adr\ADR-001-microservices-ddd-outbox.md
docs\adr\ADR-002-rabbitmq-vs-kafka.md
docs\adr\ADR-003-rate-limiting-gateway.md
docs\adr\ADR-004-idempotency-and-outbox.md
docs\CHECKLIST-REQUISITOS.md
docs\diagrams\c4-container.mmd
docs\diagrams\c4-context.mmd
docs\diagrams\sequence-entry-to-balance.mmd
docs\TESTES.md
it-tests\pom.xml
it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java
it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java
ledger-service\docker-entrypoint.sh
ledger-service\Dockerfile
ledger-service\pom.xml
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java
ledger-service\src\main\resources\application.yml
ledger-service\src\main\resources\db\migration\V1__init.sql
ledger-service\src\main\resources\db\migration\V2__indexes.sql
ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql
ledger-service\src\main\resources\db\migration\V4__outbox_state.sql
ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql
ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql
ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql
ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql
ledger-service\src\main\resources\logback-spring.xml
ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java
ledger-service\src\test\resources\application-it.yml
make-project-dump.ps1
Makefile
ops\grafana\provisioning\dashboards\dashboard.yml
ops\grafana\provisioning\dashboards\spring-dashboard.json
ops\grafana\provisioning\datasources\datasource.yml
ops\load.ps1
ops\load.sh
ops\prometheus\prometheus.yml
ops\prometheus\rules.yml
ops\requests.http
ops\test-suite.ps1
ops\test-suite.sh
pom.xml
project-dump.txt
README.md

Total files (after filters): 121

================================================================================
=  FILE CONTENTS
================================================================================
-----8<----- FILE: .editorconfig
Size: 174 bytes
SHA256: 81DE46492BB53CA8FB00FE22158EC1B8AB7A27225DC711062F44B3D99EA43864
<<<BEGIN CONTENT
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.java]
indent_size = 2


END CONTENT
-----8<----- END FILE: .editorconfig

-----8<----- FILE: .env
Size: 196 bytes
SHA256: 6977E55B3CC1939B8B25D694E72F5C16D9E8A794DF11E09289D004024EF196EE
<<<BEGIN CONTENT
POSTGRES_DB=app
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

SPRING_RABBITMQ_HOST=rabbitmq
SPRING_RABBITMQ_PORT=5672
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app

API_KEY=admin

END CONTENT
-----8<----- END FILE: .env

-----8<----- FILE: .env.example
Size: 444 bytes
SHA256: D3E120DB6A168BE3A2A6F4D5820D2B295DAB29964DBED86E3F2C9EEE484CC5A8
<<<BEGIN CONTENT
POSTGRES_DB=app
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

SPRING_RABBITMQ_HOST=rabbitmq
SPRING_RABBITMQ_PORT=5672
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app

API_KEY=admin
GATEWAY_RPS_LIMIT=50
GATEWAY_RPS_PATHS=/balances/*,/ledger/*

PROM_PORT=19090

# RabbitMQ (optional overrides)
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app
RABBITMQ_ERLANG_COOKIE=dev-cookie
# RABBITMQ_IMAGE=rabbitmq:3.12.15-management

END CONTENT
-----8<----- END FILE: .env.example

-----8<----- FILE: .gitattributes
Size: 37 bytes
SHA256: E9794C19E7631CD29B9FD50EE6B2ED1740F8CBCC2349F93A3CB5991E28878D6F
<<<BEGIN CONTENT
*.sh text eol=lf
*.ps1 text eol=crlf

END CONTENT
-----8<----- END FILE: .gitattributes

-----8<----- FILE: .github\workflows\test.yml
Size: 1502 bytes
SHA256: 9F61DBA2CC7411582E919644B02B80F54630349369955BC31C3868260EF39376
<<<BEGIN CONTENT
name: E2E Tests

on:
  push:
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'
      - name: Build (skip tests)
        run: mvn -q -DskipTests=true package
      - name: Compose up
        run: docker compose up -d --build
      - name: Run test suite (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: bash ops/test-suite.sh --no-teardown --load
      - name: Run test suite (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -NoTeardown -Load
      - name: Upload request/response evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidencias-requests-${{ matrix.os }}
          path: out
      - name: Export logs on failure
        if: failure()
        run: |
          mkdir -p out
          docker compose ps > out/compose-ps.txt || true
          docker compose logs --no-color --since=10m > out/compose-logs.txt || true
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs-${{ matrix.os }}
          path: |
            out/compose-ps.txt
            out/compose-logs.txt

END CONTENT
-----8<----- END FILE: .github\workflows\test.yml

-----8<----- FILE: .gitignore
Size: 233 bytes
SHA256: D344615426D8D79E49B9A7A6D62641EC9BC264EE2B2D70B691AC13A65F467C2E
<<<BEGIN CONTENT
# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties

# IDEs
.idea/
*.iml
.project
.classpath
.settings/
.vscode/

# OS
.DS_Store
Thumbs.db

# Logs / Outputs
logs/
out/
.env

# Docker
.docker/


END CONTENT
-----8<----- END FILE: .gitignore

-----8<----- FILE: api-gateway\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: api-gateway\docker-entrypoint.sh

-----8<----- FILE: api-gateway\Dockerfile
Size: 883 bytes
SHA256: F3493E07F560195D4D28FE61B17F5F5FF885993265045D223F405362605EB03F
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \ 
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/api-gateway-*.jar app.jar
EXPOSE 8080
USER root
RUN chmod 0755 /usr/bin && true
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && chown appuser:appuser /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: api-gateway\Dockerfile

-----8<----- FILE: api-gateway\pom.xml
Size: 4605 bytes
SHA256: 24A7B8397A05FCC1190C3B791B94244C6CDC6DF674F2C2B64EF9438EDAFF72C2
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>api-gateway</artifactId>
  <name>api-gateway</name>
  <version>0.1.0-SNAPSHOT</version>

  <properties>
    <spring-cloud.version>2023.0.3</spring-cloud.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-gateway</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>false</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: api-gateway\pom.xml

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java
Size: 333 bytes
SHA256: 19C0B60AC24A33C3372B07FE0FA4C6884E2DDE434E458DF8ACDB211B39617ABD
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiGatewayApplication {
  public static void main(String[] args) {
    SpringApplication.run(ApiGatewayApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java
Size: 1257 bytes
SHA256: 3D4D411FFDE2FE3EEEC972FDF2E170BD00CF380DA649C02BA2688E60183671FF
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsWebFilter;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsWebFilter corsWebFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsWebFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java
Size: 1501 bytes
SHA256: 1F61BADFFF9B358E5C4F041B79E26A828681FF9ADD64053B7F3EC6FCCE2BE385
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class ApiKeyWriteGuardFilter implements GlobalFilter, Ordered {
  private final String apiKey;
  public ApiKeyWriteGuardFilter(@Value("${api.key:}") String apiKey) {
    this.apiKey = apiKey;
  }

  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    if (apiKey == null || apiKey.isBlank()) return chain.filter(exchange);
    String path = exchange.getRequest().getPath().value();
    boolean isWrite = exchange.getRequest().getMethod() == HttpMethod.POST;
    boolean protectedPath = path.startsWith("/ledger/") || path.startsWith("/consolidator/");
    if (isWrite && protectedPath) {
      String provided = exchange.getRequest().getHeaders().getFirst("X-API-Key");
      if (provided == null || !provided.equals(apiKey)) {
        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
        return exchange.getResponse().setComplete();
      }
    }
    return chain.filter(exchange);
  }

  @Override
  public int getOrder() { return -10; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java
Size: 2980 bytes
SHA256: D43850EB3ADD2EAD7074DF35CABC0480773591CEECECC1234E20028F114BA209
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.time.Instant;
import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@Component
public class RateLimitFilter implements GlobalFilter, Ordered {
  private final int limitPerSecond;
  private final String[] pathPrefixes;
  private final Map<String, AtomicInteger> counters = new ConcurrentHashMap<>();
  private volatile long windowEpochSecond = Instant.now().getEpochSecond();

  private final MeterRegistry registry;

  public RateLimitFilter(MeterRegistry registry,
                         @Value("${gateway.rps.limit:50}") int limitPerSecond,
                         @Value("${gateway.rps.paths:/balances/*,/ledger/*}") String paths) {
    this.registry = registry;
    this.limitPerSecond = limitPerSecond;
    this.pathPrefixes = Arrays.stream(paths.split(","))
        .map(String::trim)
        .filter(s -> !s.isBlank())
        .map(s -> s.replace("*", ""))
        .map(s -> s.endsWith("/") ? s : s + "/")
        .toArray(String[]::new);
    for (String p : this.pathPrefixes) counters.put(p, new AtomicInteger(0));
  }

  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    String path = exchange.getRequest().getPath().value();
    String key = matchPrefix(path);
    if (key == null) return chain.filter(exchange);
    long nowSec = Instant.now().getEpochSecond();
    if (nowSec != windowEpochSecond) {
      windowEpochSecond = nowSec;
      counters.values().forEach(c -> c.set(0));
    }
    int current = counters.get(key).incrementAndGet();
    if (current > limitPerSecond) {
      Counter.builder("gateway_ratelimit_rejected_total")
          .tag("path", key)
          .tag("application", "api-gateway")
          .register(registry)
          .increment();
      exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
      exchange.getResponse().getHeaders().set("Retry-After", "1");
      return exchange.getResponse().setComplete();
    }
    Counter.builder("gateway_ratelimit_allowed_total")
        .tag("path", key)
        .tag("application", "api-gateway")
        .register(registry)
        .increment();
    return chain.filter(exchange);
  }

  private String matchPrefix(String path) {
    for (String p : pathPrefixes) {
      if (path.startsWith(p)) return p;
    }
    return null;
  }

  @Override
  public int getOrder() { return -50; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java
Size: 1302 bytes
SHA256: E56970006F5CAA9B256D2488F3F5C645063D01A3BB8E2EFAAAA84AC942AF964E
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import org.slf4j.MDC;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.UUID;

@Component
public class RequestIdFilter implements GlobalFilter, Ordered {
  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    String rid = exchange.getRequest().getHeaders().getFirst("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    ServerHttpResponse response = exchange.getResponse();
    response.getHeaders().set("X-Request-Id", rid);
    // Propagate Idempotency-Key if present (for downstream logs)
    String idem = exchange.getRequest().getHeaders().getFirst("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.getHeaders().set("Idempotency-Key", idem);
    }
    return chain.filter(exchange).doFinally(s -> MDC.remove("requestId"));
  }

  @Override
  public int getOrder() { return -100; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java
Size: 457 bytes
SHA256: 6ABEDF6E4EC0787E0E133B2C0D2ADD7E84AFC0EB0FFFE93019CE6E7CCD4E4F89
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.web;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@RestController
public class FallbackController {
  @GetMapping("/fallback/{svc}")
  public Map<String,Object> fb(@PathVariable String svc) {
    return Map.of("service", svc, "status", "degraded");
  }
}


END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java
Size: 2490 bytes
SHA256: 90BA4B28C57A1D1E26DFE8F82500C91827BEC4C539A9EFAE7DC9C5F55F13A877
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.web;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.bind.support.WebExchangeBindException;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.ServerWebInputException;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({ ServerWebInputException.class, WebExchangeBindException.class, IllegalArgumentException.class })
  public ResponseEntity<Map<String,Object>> handleBadRequest(Exception ex, ServerWebExchange exchange) {
    return body(HttpStatus.BAD_REQUEST, message(ex), exchange);
  }

  @ExceptionHandler(ResponseStatusException.class)
  public ResponseEntity<Map<String,Object>> handleResponseStatus(ResponseStatusException ex, ServerWebExchange exchange) {
    return body(ex.getStatusCode(), ex.getReason() == null ? ex.getStatusCode().toString() : ex.getReason(), exchange);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String,Object>> handleAny(Throwable ex, ServerWebExchange exchange) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", exchange);
  }

  private static ResponseEntity<Map<String,Object>> body(org.springframework.http.HttpStatusCode status, String msg, ServerWebExchange exchange) {
    Map<String,Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.toString() : msg);
    map.put("path", exchange.getRequest().getPath().value());
    var headers = exchange.getRequest().getHeaders();
    map.put("requestId", headers.getFirst("X-Request-Id"));
    map.put("idempotencyKey", headers.getFirst("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof WebExchangeBindException be && !be.getAllErrors().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      be.getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java

-----8<----- FILE: api-gateway\src\main\resources\application.yml
Size: 1840 bytes
SHA256: CE0E6AACE91DA830AEAB612141C42FCA29D7257A0430DFC0BB67085676E7A3F6
<<<BEGIN CONTENT
server:
  port: 8080
  error:
    include-stacktrace: never

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      default-filters:
        - name: RequestSize
          args:
            maxSize: 1MB
        - name: Retry
          args:
            retries: 1
            methods: GET
            statuses: INTERNAL_SERVER_ERROR
            backoff:
              firstBackoff: 200ms
              maxBackoff: 2s
              factor: 2
      httpclient:
        connect-timeout: 2000
        response-timeout: 3s
      routes:
        - id: ledger
          uri: http://ledger-service:8081
          predicates:
            - Path=/ledger/**
          filters:
            - name: CircuitBreaker
              args:
                name: ledgerCB
                fallbackUri: forward:/fallback/ledger
        - id: consolidator
          uri: http://consolidator-service:8082
          predicates:
            - Path=/consolidator/**
          filters:
            - name: CircuitBreaker
              args:
                name: consolidatorCB
                fallbackUri: forward:/fallback/consolidator
        - id: balance
          uri: http://balance-query-service:8083
          predicates:
            - Path=/balances/**

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

logging:
  level:
    root: INFO

gateway:
  rps:
    limit: ${GATEWAY_RPS_LIMIT:50}
    paths: ${GATEWAY_RPS_PATHS:/balances/*,/ledger/*}

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\resources\application.yml

-----8<----- FILE: balance-query-service\docker-entrypoint.sh
Size: 389 bytes
SHA256: EFFF9CD5506C5490C69D7047C8264154EED2D4770490A49421A6EF8CEEF63068
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: balance-query-service\docker-entrypoint.sh

-----8<----- FILE: balance-query-service\Dockerfile
Size: 799 bytes
SHA256: 91677BB4E84B3A09FB43C09D82EDD05CBC41242765343F6938B580A33A42AA64
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/balance-query-service-*.jar app.jar
EXPOSE 8083
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: balance-query-service\Dockerfile

-----8<----- FILE: balance-query-service\pom.xml
Size: 4325 bytes
SHA256: 39D56B2517999715746A7C4951218193EB23ACFEEB337B16DD823C2016133CB2
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>balance-query-service</artifactId>
  <name>balance-query-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: balance-query-service\pom.xml

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java
Size: 3643 bytes
SHA256: D0EF37A53F45600954988DE91498CCF92983550539720A6314B0AB2AFCD55CF6
<<<BEGIN CONTENT
package com.cashflowchallenge.query.api;

import com.cashflowchallenge.query.api.dto.BalancePoint;
import com.cashflowchallenge.query.domain.DailyBalance;
import com.cashflowchallenge.query.infrastructure.repository.DailyBalanceRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.CacheControl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/balances")
@Tag(name = "Balance Query API")
public class BalanceController {
  private final DailyBalanceRepository repo;
  public BalanceController(DailyBalanceRepository repo) { this.repo = repo; }

  @GetMapping("/daily")
  @Operation(summary = "Get balance for a specific date",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<Map<String, Object>> daily(@RequestParam("date") LocalDate date) {
    Map<String, Object> body = repo.findById(date)
        .map(db -> Map.<String,Object>of("day", db.getDay().toString(), "balanceCents", db.getBalanceCents()))
        .orElseGet(() -> {
          Map<String, Object> m = new HashMap<>();
          m.put("day", date.toString());
          m.put("balanceCents", 0);
          return m;
        });
    return ResponseEntity.ok().cacheControl(CacheControl.maxAge(java.time.Duration.ofSeconds(30)).cachePublic()).body(body);
  }

  @GetMapping("/range")
  @Operation(summary = "Get balances for a date range [from,to]",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<List<BalancePoint>> range(@RequestParam("from") LocalDate from,
                                       @RequestParam("to") LocalDate to,
                                       @RequestParam(value = "page", required = false, defaultValue = "0") int page,
                                       @RequestParam(value = "size", required = false, defaultValue = "366") int size) {
    if (from.isAfter(to)) {
      return ResponseEntity.badRequest().body(List.of());
    }
    long span = java.time.temporal.ChronoUnit.DAYS.between(from, to) + 1;
    if (span > 366) {
      return ResponseEntity.badRequest().body(List.of());
    }
    List<DailyBalance> all = repo.findRange(from, to);
    int fromIndex = Math.max(0, Math.min(all.size(), page * size));
    int toIndex = Math.max(fromIndex, Math.min(all.size(), fromIndex + size));
    List<BalancePoint> pts = all.subList(fromIndex, toIndex).stream()
        .map(db -> new BalancePoint(db.getDay().toString(), db.getBalanceCents()))
        .toList();
    return ResponseEntity.ok().cacheControl(CacheControl.maxAge(java.time.Duration.ofSeconds(30)).cachePublic()).body(pts);
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java
Size: 255 bytes
SHA256: BEB0E751110BB654E3D4CB88D97035B660D7408FE6DC88205765F3B56C5AECA6
<<<BEGIN CONTENT
package com.cashflowchallenge.query.api.dto;

public class BalancePoint {
  public final String day;
  public final long balanceCents;
  public BalancePoint(String day, long balanceCents) {
    this.day = day;
    this.balanceCents = balanceCents;
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java
Size: 335 bytes
SHA256: BABBDA377A66B8B49EEBB0335DC93FE5E1514FBBF9A9AC2BE672A41348E0C843
<<<BEGIN CONTENT
package com.cashflowchallenge.query;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BalanceQueryApplication {
  public static void main(String[] args) {
    SpringApplication.run(BalanceQueryApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java
Size: 746 bytes
SHA256: A5BD76DF1FC5E863DF794E5FD278046A506B11BF7847EC11E778D1B0FA5C5DFE
<<<BEGIN CONTENT
package com.cashflowchallenge.query.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.time.Instant;
import java.time.LocalDate;

@Entity
@Table(schema = "report", name = "daily_balances")
public class DailyBalance {
  @Id
  @Column(name = "day", nullable = false)
  private LocalDate day;

  @Column(name = "balance_cents", nullable = false)
  private long balanceCents;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected DailyBalance() {}

  public LocalDate getDay() { return day; }
  public long getBalanceCents() { return balanceCents; }
  public Instant getUpdatedAt() { return updatedAt; }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java
Size: 533 bytes
SHA256: 8232DC3439D238A009A753D30FA4DC2BAD52DA1AC5CB12E357DA9B1C96BA6B67
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.repository;

import com.cashflowchallenge.query.domain.DailyBalance;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.time.LocalDate;
import java.util.List;

public interface DailyBalanceRepository extends JpaRepository<DailyBalance, LocalDate> {
  @Query("select d from DailyBalance d where d.day between ?1 and ?2 order by d.day asc")
  List<DailyBalance> findRange(LocalDate from, LocalDate to);
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java
Size: 956 bytes
SHA256: 118DEDCF4E8567E5F316BFFE512BD5AB4F29C0C6892CBE40F7A94844336C1212
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    try { chain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java
Size: 1239 bytes
SHA256: 834DDC445A50B07675015B883BB59056DFF5D97F22C8589ED7BD60AF127DE323
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java
Size: 3421 bytes
SHA256: 5F3DD42F3F217A4C186AFC2E93B970608E4E4C6BE663C368FF8BD3DF7F3F7406
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: balance-query-service\src\main\resources\application.yml
Size: 987 bytes
SHA256: F880DFB832C5913A0996CBAEAE6C9DDA2A4F5CA0BE48C7E8F2F50669F050DB60
<<<BEGIN CONTENT
server:
  port: 8083
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: balance-query-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: none
  lifecycle:
    timeout-per-shutdown-phase: 20s

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

springdoc:
  swagger-ui:
    path: /swagger

logging:
  level:
    root: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\resources\application.yml

-----8<----- FILE: balance-query-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\resources\logback-spring.xml

-----8<----- FILE: consolidator-service\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: consolidator-service\docker-entrypoint.sh

-----8<----- FILE: consolidator-service\Dockerfile
Size: 798 bytes
SHA256: 564679A4F5F8B01A4D52A81F1BA93D6E270089ACBD9E8D5CC9B6595273CB93F8
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/consolidator-service-*.jar app.jar
EXPOSE 8082
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: consolidator-service\Dockerfile

-----8<----- FILE: consolidator-service\pom.xml
Size: 5178 bytes
SHA256: B66F0F703A9CD56FD15F731C261A3F7855A4D65DA998BB16DAB60AFD20D6EC8C
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>consolidator-service</artifactId>
  <name>consolidator-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Retry/AOP for listener retry advice -->
    <dependency>
      <groupId>org.springframework.retry</groupId>
      <artifactId>spring-retry</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: consolidator-service\pom.xml

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java
Size: 2855 bytes
SHA256: 1055A1F95AAE3E023D0951E6EBB1E4DC3A451A8B2F3BA2245EC36A14E159AB0E
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.api;

import com.cashflowchallenge.consolidator.application.RebuildService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@RestController
@RequestMapping("/consolidator")
@Tag(name = "Consolidator Admin")
public class RebuildController {
  private final RebuildService rebuildService;
  private final ConcurrentHashMap<String, String> jobs = new ConcurrentHashMap<>();

  public RebuildController(RebuildService rebuildService) { this.rebuildService = rebuildService; }

  @PostMapping("/rebuild")
  @Operation(summary = "Backfill balances for range [from,to]",
      responses = {
          @ApiResponse(responseCode = "202",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<Map<String, Object>> rebuild(@RequestParam("from") LocalDate from,
                                                     @RequestParam("to") LocalDate to) {
    if (from.isAfter(to)) {
      return ResponseEntity.badRequest().body(Map.of("error", "from must be <= to"));
    }
    long span = ChronoUnit.DAYS.between(from, to) + 1;
    if (span > 366) {
      return ResponseEntity.badRequest().body(Map.of("error", "max range is 366 days"));
    }
    String jobId = UUID.randomUUID().toString();
    jobs.put(jobId, "PENDING");
    new Thread(() -> {
      try {
        jobs.put(jobId, "RUNNING");
        rebuildService.rebuildRange(from, to);
        jobs.put(jobId, "DONE");
      } catch (Exception e) {
        jobs.put(jobId, "FAILED:" + e.getMessage());
      }
    }, "rebuild-" + jobId).start();
    return ResponseEntity.status(HttpStatus.ACCEPTED).body(Map.of("jobId", jobId));
  }

  @GetMapping("/rebuild/status/{jobId}")
  @Operation(summary = "Get rebuild job status",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public Map<String, Object> status(@PathVariable String jobId) {
    return Map.of("jobId", jobId, "status", jobs.getOrDefault(jobId, "UNKNOWN"));
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java
Size: 1161 bytes
SHA256: B385B8A82C587F7BB72A239DC33C5159EBAB31E34C81B34ED074E33944575812
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.application;

import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import com.cashflowchallenge.consolidator.infrastructure.repository.ProcessedEventRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.UUID;

@Service
public class BalanceApplicationService {
  private final DailyBalanceRepository balanceRepo;
  private final ProcessedEventRepository processedRepo;

  public BalanceApplicationService(DailyBalanceRepository balanceRepo, ProcessedEventRepository processedRepo) {
    this.balanceRepo = balanceRepo;
    this.processedRepo = processedRepo;
  }

  public static enum EntryType { CREDIT, DEBIT }

  @Transactional
  public boolean applyEvent(UUID id, LocalDate occurredOn, EntryType type, long amountCents) {
    long delta = (type == EntryType.CREDIT) ? amountCents : -amountCents;
    int ins = processedRepo.insertIgnore(id);
    if (ins == 1) {
      balanceRepo.upsertAdd(occurredOn, delta);
      return true;
    }
    return false;
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java
Size: 2327 bytes
SHA256: 59918EA90A44DDE1706A2681D6E60664D80A14C896E7ED2741755B41C73E5107
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.application;

import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import com.cashflowchallenge.consolidator.infrastructure.repository.ProcessedEventRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Service
public class RebuildService {
  private final JdbcTemplate jdbc;
  private final DailyBalanceRepository balanceRepo;
  private final ProcessedEventRepository processedRepo;
  private final BalanceApplicationService app;

  public RebuildService(JdbcTemplate jdbc, DailyBalanceRepository balanceRepo,
                        ProcessedEventRepository processedRepo, BalanceApplicationService app) {
    this.jdbc = jdbc;
    this.balanceRepo = balanceRepo;
    this.processedRepo = processedRepo;
    this.app = app;
  }

  record E(UUID id, LocalDate day, String type, long amount) {}

  @Transactional
  public void rebuildRange(LocalDate from, LocalDate to) {
    // Replace semantics: clear balances in range
    balanceRepo.deleteByDayBetween(from, to);

    // Load events
    List<E> events = jdbc.query(
        "select id, occurred_on, type, amount_cents from ledger.entries where occurred_on between ? and ? order by occurred_on, id",
        ps -> { ps.setObject(1, from); ps.setObject(2, to); },
        (rs, i) -> mapEvent(rs)
    );

    if (!events.isEmpty()) {
      // Optional: clear processed flags for these events to recompute cleanly
      List<UUID> ids = new ArrayList<>(events.size());
      for (E e : events) ids.add(e.id);
      processedRepo.deleteByIds(ids);

      // Re-apply using the same path as live consumption
      for (E e : events) {
        var t = "CREDIT".equals(e.type) ? BalanceApplicationService.EntryType.CREDIT : BalanceApplicationService.EntryType.DEBIT;
        app.applyEvent(e.id, e.day, t, e.amount);
      }
    }
  }

  private static E mapEvent(ResultSet rs) throws SQLException {
    return new E((UUID) rs.getObject(1), rs.getObject(2, LocalDate.class), rs.getString(3), rs.getLong(4));
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java
Size: 419 bytes
SHA256: 81F379C2E0BBDABE5B1A6D8A26307CE43DD66777CAB3BC5F1E0FDC2BE967897C
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;

@SpringBootApplication
@EnableRabbit
public class ConsolidatorApplication {
  public static void main(String[] args) {
    SpringApplication.run(ConsolidatorApplication.class, args);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java
Size: 910 bytes
SHA256: 3EFBEAB0CD0CDDBFE10D2ECE8C842788C765B3051E760C449449D47670921421
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.time.Instant;
import java.time.LocalDate;

@Entity
@Table(schema = "report", name = "daily_balances")
public class DailyBalance {
  @Id
  @Column(name = "day", nullable = false)
  private LocalDate day;

  @Column(name = "balance_cents", nullable = false)
  private long balanceCents;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected DailyBalance() {}

  public DailyBalance(LocalDate day, long balanceCents) {
    this.day = day;
    this.balanceCents = balanceCents;
    this.updatedAt = Instant.now();
  }

  public LocalDate getDay() { return day; }
  public long getBalanceCents() { return balanceCents; }
  public Instant getUpdatedAt() { return updatedAt; }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java
Size: 2199 bytes
SHA256: 4AC8B1B826EE013B20321C392FC4515BE3507A2F772DC56B93B2D7535B365693
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.messaging;

import com.cashflowchallenge.consolidator.application.BalanceApplicationService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.util.UUID;

@Component
public class LedgerEventConsumer {
  private static final Logger log = LoggerFactory.getLogger(LedgerEventConsumer.class);
  private final BalanceApplicationService app;
  private final ObjectMapper mapper;
  private final Counter processed;
  private final Counter duplicates;

  public LedgerEventConsumer(BalanceApplicationService app, ObjectMapper mapper, MeterRegistry registry) {
    this.app = app;
    this.mapper = mapper;
    this.processed = registry.counter("app_entries_processed_total");
    this.duplicates = registry.counter("app_entries_duplicate_total");
  }

  @RabbitListener(queues = RabbitConfig.QUEUE)
  @Transactional
  public void handle(@Payload String json) {
    try {
      JsonNode n = mapper.readTree(json);
      UUID eventId = UUID.fromString(n.get("id").asText());
      LocalDate day = LocalDate.parse(n.get("occurredOn").asText());
      long amount = n.get("amountCents").asLong();
      String type = n.get("type").asText();
      boolean applied = app.applyEvent(eventId, day,
          "CREDIT".equals(type) ? BalanceApplicationService.EntryType.CREDIT : BalanceApplicationService.EntryType.DEBIT,
          amount);
      if (applied) {
        processed.increment();
      } else {
        log.debug("Duplicate event ignored: {}", eventId);
        duplicates.increment();
      }
    } catch (Exception e) {
      log.error("Failed to process event; will retry and may be dead-lettered", e);
      throw new RuntimeException(e);
    }
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java
Size: 3928 bytes
SHA256: 1FE54C0B0B5E22DF939C141BC6881CBDC7879F9400AE231E8D56AA78A2CFAD20
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.messaging;

import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.core.AcknowledgeMode;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitConfig {

  public static final String LEDGER_EXCHANGE = "ledger.events";
  public static final String ROUTING_KEY = "ledger.entry-recorded";

  public static final String QUEUE = "report.ledger.entry-recorded.q";

  // DLQ setup
  public static final String DLX_EXCHANGE = "ledger.dlx";
  public static final String DLQ_ROUTING_KEY = "ledger.entry-recorded.dlq";
  public static final String DLQ_QUEUE = "report.ledger.entry-recorded.dlq";

  @Bean TopicExchange ledgerExchange() { return new TopicExchange(LEDGER_EXCHANGE, true, false); }
  @Bean TopicExchange deadLetterExchange() { return new TopicExchange(DLX_EXCHANGE, true, false); }

  @Bean
  Queue queue() {
    return QueueBuilder.durable(QUEUE)
        .withArgument("x-dead-letter-exchange", DLX_EXCHANGE)
        .withArgument("x-dead-letter-routing-key", DLQ_ROUTING_KEY)
        .withArgument("x-queue-type", "quorum")
        .withArgument("x-quorum-initial-group-size", 1)
        .build();
  }

  @Bean Queue dlq() { return QueueBuilder.durable(DLQ_QUEUE)
      .withArgument("x-queue-type", "quorum")
      .withArgument("x-quorum-initial-group-size", 1)
      .withArgument("x-message-ttl", 86400000)
      .withArgument("x-overflow", "reject-publish")
      .build(); }

  @Bean
  Binding binding(Queue queue, TopicExchange ledgerExchange) {
    return BindingBuilder.bind(queue).to(ledgerExchange).with(ROUTING_KEY);
  }

  @Bean
  Binding dlqBinding(Queue dlq, TopicExchange deadLetterExchange) {
    return BindingBuilder.bind(dlq).to(deadLetterExchange).with(DLQ_ROUTING_KEY);
  }

  /**
   * Group the topology into a single Declarables bean for explicit ownership
   * by consolidator-service (admin auto-startup declares at application start).
   */
  @Bean
  public Declarables ledgerTopology(
      @Qualifier("ledgerExchange") TopicExchange ledgerExchange,
      @Qualifier("deadLetterExchange") TopicExchange deadLetterExchange,
      @Qualifier("queue") Queue entryRecordedQueue,
      @Qualifier("dlq") Queue entryRecordedDlq,
      @Qualifier("binding") Binding entryRecordedBinding,
      @Qualifier("dlqBinding") Binding entryRecordedDlqBinding) {
    return new Declarables(
        ledgerExchange,
        deadLetterExchange,
        entryRecordedQueue,
        entryRecordedDlq,
        entryRecordedBinding,
        entryRecordedDlqBinding);
  }

  /**
   * Configure listener retry with exponential backoff and no infinite requeue.
   * After max attempts the message goes to DLQ via RejectAndDontRequeueRecoverer.
   */
  @Bean
  SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory cf) {
    SimpleRabbitListenerContainerFactory f = new SimpleRabbitListenerContainerFactory();
    f.setConnectionFactory(cf);
    f.setDefaultRequeueRejected(false); // hand control to DLQ after retries
    f.setAcknowledgeMode(AcknowledgeMode.AUTO);
    f.setPrefetchCount(100);
    f.setConcurrentConsumers(2);
    f.setMaxConcurrentConsumers(8);
    f.setAdviceChain(
        RetryInterceptorBuilder.stateless()
            .maxAttempts(5)
            .backOffOptions(200, 2.0, 5000) // 200ms -> 400 -> 800 -> 1600 -> 3200 .. capped 5s
            .recoverer(new RejectAndDontRequeueRecoverer())
            .build());
    return f;
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java
Size: 1011 bytes
SHA256: ED2A7F2A43462053A82E2332313850B5498C57C3190EE07C8E1A6FFD95BDB4E4
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.repository;

import com.cashflowchallenge.consolidator.domain.DailyBalance;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;

public interface DailyBalanceRepository extends JpaRepository<DailyBalance, LocalDate> {
  @Modifying
  @Transactional
  @Query(value = "INSERT INTO report.daily_balances(day, balance_cents, updated_at) " +
      "VALUES (?1, ?2, now()) " +
      "ON CONFLICT (day) DO UPDATE SET balance_cents = report.daily_balances.balance_cents + EXCLUDED.balance_cents, updated_at = now()", nativeQuery = true)
  void upsertAdd(LocalDate day, long deltaCents);

  @Modifying
  @Transactional
  @Query("delete from DailyBalance d where d.day between ?1 and ?2")
  void deleteByDayBetween(LocalDate from, LocalDate to);
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java
Size: 872 bytes
SHA256: 2E2FC0960406201F84AE2DB0A6E5BD15F3D296222318B3EBF8E12AFD4A20143C
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.repository;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public class ProcessedEventRepository {
  private final JdbcTemplate jdbc;

  public ProcessedEventRepository(JdbcTemplate jdbc) {
    this.jdbc = jdbc;
  }

  public int insertIgnore(UUID id) {
    return jdbc.update("INSERT INTO report.processed_events(id, processed_at) VALUES (?, now()) ON CONFLICT DO NOTHING", id);
  }

  public int deleteByIds(List<UUID> ids) {
    if (ids == null || ids.isEmpty()) return 0;
    String inSql = ids.stream().map(x -> "?").reduce((a,b) -> a + "," + b).orElse("?");
    String sql = "DELETE FROM report.processed_events WHERE id IN (" + inSql + ")";
    return jdbc.update(sql, ids.toArray());
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java
Size: 1351 bytes
SHA256: B7D1C587F867F5B47FB5D2FFDC77C80AE7D177B3864EFF12D1DF0EB0A3F56E0F
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class ApiKeyFilter extends OncePerRequestFilter {
  private final String apiKey;
  public ApiKeyFilter(@Value("${api.key:}") String apiKey) { this.apiKey = apiKey; }

  @Override
  protected boolean shouldNotFilter(HttpServletRequest request) {
    if (apiKey == null || apiKey.isBlank()) return true;
    return !(request.getRequestURI().startsWith("/consolidator/") && request.getMethod().equals(HttpMethod.POST.name()));
  }

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String provided = request.getHeader("X-API-Key");
    if (provided == null || !provided.equals(apiKey)) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    filterChain.doFilter(request, response);
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java
Size: 1130 bytes
SHA256: 1B39E0DE39F2D7A4F00298FDD1B14CA0EF6F1C15F72B88251D780F6C087FC449
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    String idem = request.getHeader("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.setHeader("Idempotency-Key", idem);
    }
    try { filterChain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java
Size: 1246 bytes
SHA256: 36400355814A8CC2602FE2962FC559F4388CD8B96094215FEABDDB5BB470DA75
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java
Size: 3428 bytes
SHA256: AD2054C29DA290BE33831257BB60531128FD697A7BB48BE1CFD5E3A6DE5FECDD
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: consolidator-service\src\main\resources\application.yml
Size: 1296 bytes
SHA256: EE68B762A4DFBF0D239A56F5B1966DFE8112ACC8B7FC87B96BF94E46473DDF35
<<<BEGIN CONTENT
server:
  port: 8082
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: consolidator-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: none
  lifecycle:
    timeout-per-shutdown-phase: 20s
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:app}
    password: ${SPRING_RABBITMQ_PASSWORD:app}
  amqp:
    admin:
      # Explicitly enable declarations in consolidator
      auto-startup: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

api:
  key: ${API_KEY:}

springdoc:
  swagger-ui:
    path: /swagger

logging:
  level:
    root: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\application.yml

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V1__init.sql
Size: 203 bytes
SHA256: C41AB8DFFDF22E394DF82D1EFCFA672611B38E1EEEFA27CC33F732ECDEAC3243
<<<BEGIN CONTENT
CREATE SCHEMA IF NOT EXISTS report;

CREATE TABLE IF NOT EXISTS report.daily_balances (
    day DATE PRIMARY KEY,
    balance_cents BIGINT NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V1__init.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V2__indexes.sql
Size: 144 bytes
SHA256: 7FF46B4B58E4EB4DDF83C4818C4BD88E21FF17762BFC8BDE44B01CEF7680A80D
<<<BEGIN CONTENT
-- Explicit index on report.daily_balances primary key column
CREATE INDEX IF NOT EXISTS idx_daily_balances_day ON report.daily_balances(day);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V2__indexes.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql
Size: 53 bytes
SHA256: 7FB296974B42F34FE5BE1B89869902558AF12021A6F8B921FBFC7CDB5EDEFC79
<<<BEGIN CONTENT
DROP INDEX IF EXISTS report.idx_daily_balances_day;


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V4__processed_events.sql
Size: 130 bytes
SHA256: D24DC850E731BA6E6AF772CE192B42CF5878C2D2305F3A6F19D1E4F2C1E82280
<<<BEGIN CONTENT
CREATE TABLE IF NOT EXISTS report.processed_events (
  id UUID PRIMARY KEY,
  processed_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V4__processed_events.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V5__report_guards.sql
Size: 265 bytes
SHA256: B4CCBD47A95710D14BEBF6C4ECC9F61DDEB717FA5627345657C02ECB20BBA8C9
<<<BEGIN CONTENT
DO $$
BEGIN
  BEGIN
    ALTER TABLE report.daily_balances
      ALTER COLUMN balance_cents SET NOT NULL,
      ALTER COLUMN updated_at SET NOT NULL;
  EXCEPTION WHEN undefined_table THEN
    -- table created earlier migrations; ignore if not present
  END;
END$$;


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V5__report_guards.sql

-----8<----- FILE: consolidator-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\logback-spring.xml

-----8<----- FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java
Size: 1895 bytes
SHA256: F74C0A2D524E3CEA043E2643C8C3CE48A7261D91CCB9E9E5FBC89383F5429B73
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.it;

import com.cashflowchallenge.consolidator.ConsolidatorApplication;
import com.cashflowchallenge.consolidator.infrastructure.messaging.LedgerEventConsumer;
import io.micrometer.core.instrument.MeterRegistry;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = ConsolidatorApplication.class)
@ActiveProfiles("it")
public class DoubleDeliveryIT {

  @Autowired LedgerEventConsumer consumer;
  @Autowired JdbcTemplate jdbc;
  @Autowired MeterRegistry registry;

  @Test
  void sameEventTwice_updatesOnce_andCountsDuplicate() throws Exception {
    UUID eventId = UUID.randomUUID();
    LocalDate day = LocalDate.now();
    long amount = 777;
    String eventJson = "{" +
        "\"id\":\"" + eventId + "\"," +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":" + amount + "," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"it\"" +
        "}";

    jdbc.update("DELETE FROM report.processed_events WHERE id = ?", eventId);
    jdbc.update("DELETE FROM report.daily_balances WHERE day = ?", day);

    double dupBefore = registry.counter("app_entries_duplicate_total").count();

    consumer.handle(eventJson);
    consumer.handle(eventJson);

    Long bal = jdbc.queryForObject("SELECT balance_cents FROM report.daily_balances WHERE day = ?", Long.class, day);
    assertThat(bal).isEqualTo(amount);

    double dupAfter = registry.counter("app_entries_duplicate_total").count();
    assertThat(dupAfter).isEqualTo(dupBefore + 1.0d);
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java

-----8<----- FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java
Size: 1001 bytes
SHA256: FDC2D8CC016A1B03BC7C882C3B49AA3CAB43C32D8FF100D26122B24DCF44535E
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.repo;

import com.cashflowchallenge.consolidator.ConsolidatorApplication;
import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = ConsolidatorApplication.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@ActiveProfiles("it")
public class DailyBalanceRepositoryIT {
  @Autowired DailyBalanceRepository repo;

  @Test
  void upsertAddsDelta() {
    LocalDate day = LocalDate.now();
    repo.upsertAdd(day, 1000);
    repo.upsertAdd(day, -300);
    var found = repo.findById(day);
    assertThat(found).isPresent();
    assertThat(found.get().getBalanceCents()).isEqualTo(700);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java

-----8<----- FILE: consolidator-service\src\test\resources\application-it.yml
Size: 409 bytes
SHA256: C1DECEA0866A547D35DC4DD23890E894F2B46DCB611075B6BC8A7D8C72F215C1
<<<BEGIN CONTENT
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/app
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    locations: classpath:db/migration
    create-schemas: true
    schemas: report
    default-schema: report
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: app
    password: app
logging:
  level:
    root: INFO

END CONTENT
-----8<----- END FILE: consolidator-service\src\test\resources\application-it.yml

-----8<----- FILE: docker-compose.yml
Size: 5882 bytes
SHA256: 5FCB16E27C2CABD7C32799238A21229C62641AFE326631365ACE26F7AAD7B853
<<<BEGIN CONTENT
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d app"]
      interval: 5s
      timeout: 3s
      retries: 30

  rabbitmq:
    image: ${RABBITMQ_IMAGE:-rabbitmq:3.13-management}
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${SPRING_RABBITMQ_USERNAME:-app}
      RABBITMQ_DEFAULT_PASS: ${SPRING_RABBITMQ_PASSWORD:-app}
      RABBITMQ_NODENAME: rabbit@rabbitmq
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-dev-cookie}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 15s

  prometheus:
    image: prom/prometheus:v2.53.1
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    ports:
      - "${PROM_PORT:-19090}:9090"

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning

  ledger-service:
    build: ./ledger-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_FLYWAY_CREATE_SCHEMAS=true
      - SPRING_FLYWAY_SCHEMAS=ledger
      - SPRING_FLYWAY_DEFAULT_SCHEMA=ledger
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=app
      - SPRING_RABBITMQ_PASSWORD=app
      - API_KEY=admin
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  consolidator-service:
    build: ./consolidator-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=app
      - SPRING_RABBITMQ_PASSWORD=app
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_FLYWAY_CREATE_SCHEMAS=true
      - SPRING_FLYWAY_SCHEMAS=report
      - SPRING_FLYWAY_DEFAULT_SCHEMA=report
      - API_KEY=admin
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  balance-query-service:
    build: ./balance-query-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8083/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  api-gateway:
    build: ./api-gateway
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      ledger-service:
        condition: service_healthy
      consolidator-service:
        condition: service_healthy
      balance-query-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  tester:
    image: maven:3.9-eclipse-temurin-17
    profiles: ["tester"]
    working_dir: /workspace
    volumes:
      - ./:/workspace
      - maven-repo:/root/.m2
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      API_BASE_URL: http://api-gateway:8080
      API_KEY: admin
    depends_on:
      api-gateway:
        condition: service_healthy
      ledger-service:
        condition: service_healthy
      consolidator-service:
        condition: service_healthy
      balance-query-service:
        condition: service_healthy
    command: >
      mvn -q -DskipTests=true -DskipITs=false verify

volumes:
  postgres-data:
  maven-repo:
  rabbitmq-data:

END CONTENT
-----8<----- END FILE: docker-compose.yml

-----8<----- FILE: docs\adr\ADR-001-microservices-ddd-outbox.md
Size: 543 bytes
SHA256: 6E1F69D885140E05EE2744B8201AD0DBCA742DD24EB3BB1DAE0E04FE476B7F86
<<<BEGIN CONTENT
ADR-001: Microservices + DDD + Outbox

Context
- We need independent services for write (ledger), async consolidation, and read (balance queries), with clear responsibilities and decoupling.

Decision
- Use small Spring Boot microservices with DDD-inspired layering per service.
- Use the Outbox pattern in ledger-service to publish events reliably to RabbitMQ.

Consequences
- Ledger remains available even if consolidator is down; events are retried from outbox.
- Slight write-path complexity due to outbox/scheduler, but robust delivery.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-001-microservices-ddd-outbox.md

-----8<----- FILE: docs\adr\ADR-002-rabbitmq-vs-kafka.md
Size: 469 bytes
SHA256: 7CC5AE01A28AC2601794642253CFD42D301FC7566B1A90699BA7857FAD4B2054
<<<BEGIN CONTENT
ADR-002: RabbitMQ vs Kafka

Context
- We need a simple, local-friendly broker for event delivery between ledger and consolidator.

Decision
- Use RabbitMQ for local simplicity, easy Docker image, management UI, and adequate semantics for this challenge.

Consequences
- Lower operational overhead for local dev; sufficient delivery guarantees for our outbox-driven pattern.
- Kafka would be more scalable for high-throughput streams but is heavier to operate locally.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-002-rabbitmq-vs-kafka.md

-----8<----- FILE: docs\adr\ADR-003-rate-limiting-gateway.md
Size: 470 bytes
SHA256: 76C9A894C8E5AACE4062990E8EF714FB2E1AFD97A20933A004C25C2DE4D76B68
<<<BEGIN CONTENT
ADR-003: Rate Limiting at Gateway

Context
- We want to shield the read endpoints from overload and keep the system responsive under bursts.

Decision
- Implement a simple in-memory rate limiter at the API Gateway for /balances/* at ~50 rps per instance.

Consequences
- Occasional 429 responses under peak are acceptable (~5% allowed), protecting downstream services.
- Per-instance in-memory limiter is simple but not globally coordinated; acceptable for this scope.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-003-rate-limiting-gateway.md

-----8<----- FILE: docs\adr\ADR-004-idempotency-and-outbox.md
Size: 1177 bytes
SHA256: A0ED567A5B5AF974C04B5973B964A7B59F559F93F7868FE05478937D1EAAA6EA
<<<BEGIN CONTENT
ADR-004: Idempotency and Outbox

Context
- We must support HTTP idempotency for writes and reliable, once-only consolidation to the read model.

Decision
- Use Idempotency-Key header and PostgreSQL `INSERT ... ON CONFLICT` to implement first‑write‑wins in the ledger service.
- Persist an outbox row transactionally with the write and publish to RabbitMQ with publisher confirms + returns.
- Consume in consolidator with a transactional first‑write‑wins marker (`INSERT ... ON CONFLICT DO NOTHING`) before mutating state.

Consequences
- Duplicate HTTP submissions return 409 Conflict with the same id; no duplicate rows or extra outbox events.
- Returned or NACKed messages are retried with backoff; after a cap they are marked poisoned for operator review.
- Consolidator ignores duplicate deliveries; daily balances are updated once.

Code Pointers
- Ledger idempotency: `RecordEntryService#record` (UPSERT) and `LedgerController`.
- Outbox publishing: `OutboxPublisher` (confirms/returns) and `OutboxDrainScheduler` (skip-locked + backoff + poison).
- Consumer idempotency: `LedgerEventConsumer` (`processed_events` marker) and `DailyBalanceRepository#upsertAdd`.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-004-idempotency-and-outbox.md

-----8<----- FILE: docs\CHECKLIST-REQUISITOS.md
Size: 1368 bytes
SHA256: ACFBFD6296DBFAD4EABDD61641B57F5CC85E90E3A510F9F306D5B400858FADA6
<<<BEGIN CONTENT
# Checklist de Requisitos — Onde Cada Item é Atendido

- Serviço de lançamentos: `POST /ledger/entries` (201/200 idempotente com Location estável)
  - Cobertura: Cenários A, B, F nos runners (`ops/test-suite.*`); coleção `ops/requests.http`
  - Rota via API Gateway (porta 8080)

- Serviço de saldo diário: `GET /balances/daily?date=YYYY-MM-DD`
  - Cobertura: Cenários A..I (antes/depois e pós-rebuild)
  - Apenas leitura; usado na micro-carga

- Não-funcionais (50 rps, ≤ 5% perda)
  - Scripts: `ops/load.sh` (bash), `ops/load.ps1` (pwsh)
  - Runners: `--load`/`-Load` executam ao final do smoke
  - CI: matriz Linux/Windows em `.github/workflows/test.yml`

- Resiliência/isolamento
  - Ledger aceita POST mesmo se consolidator ficar indisponível (outbox + fila); rebuild replace-only e idempotente
  - Cobertura: runners (rebuild invariance Cenários D, I)

- Observabilidade
  - `/actuator/health` e `/actuator/prometheus` expostos; dashboards provisionados
  - Runners aguardam health e coletam logs em falha

- Segurança
  - API key obrigatória em POST via gateway (`X-API-Key`, default `admin`)
  - Cobertura: Cenário F (403)

- Documentação/decisões
  - ADRs em `docs/adr/*.md` (se aplicável)
  - Como rodar/testar: `README.md` + `docs/TESTES.md`
  - Scripts cruzados: `ops/test-suite.sh` (Linux/macOS), `ops/test-suite.ps1` (Windows)


END CONTENT
-----8<----- END FILE: docs\CHECKLIST-REQUISITOS.md

-----8<----- FILE: docs\diagrams\c4-container.mmd
Size: 580 bytes
SHA256: F0BAEB832F27119375B609EA51FFC00AB8E909C494ED38BC78476EC8668B337A
<<<BEGIN CONTENT
%% C4 Container Diagram
flowchart TB
  subgraph Client
    Merchant((Merchant))
  end

  subgraph Infra
    DB[(PostgreSQL)]
    MQ[(RabbitMQ)]
    Prom[Prometheus]
    Graf[Grafana]
  end

  subgraph Services
    Gateway[API Gateway]
    Ledger[Ledger Service]
    Cons[Consolidator Service]
    Query[Balance Query Service]
  end

  Merchant --> Gateway
  Gateway --> Ledger
  Gateway --> Query
  Gateway --> Cons

  Ledger --> DB
  Ledger --> MQ
  MQ --> Cons
  Cons --> DB
  Query --> DB

  Gateway --> Prom
  Ledger --> Prom
  Cons --> Prom
  Query --> Prom
  Prom --> Graf


END CONTENT
-----8<----- END FILE: docs\diagrams\c4-container.mmd

-----8<----- FILE: docs\diagrams\c4-context.mmd
Size: 624 bytes
SHA256: E87E69EC09F9973C01E1D448E8AB37200AE15341A246824EC4CB3D9BCAD890D0
<<<BEGIN CONTENT
%% C4 Context Diagram
flowchart LR
  Merchant((Merchant))
  Gateway[API Gateway]
  Ledger[Ledger Service]
  Consolidator[Consolidator Service]
  Query[Balance Query Service]
  DB[(PostgreSQL: ledger & report schemas)]
  MQ[(RabbitMQ)]

  Merchant -->|HTTP /ledger, /balances| Gateway
  Gateway --> Ledger
  Gateway --> Query
  Gateway --> Consolidator
  Ledger --> DB
  Ledger -->|Outbox -> Events| MQ
  MQ --> Consolidator
  Consolidator --> DB
  Query --> DB

%% Business capabilities
%% - Ledger: Record entry
%% - Consolidator: Consolidate daily balances
%% - Balance-Query: Query balances
%% - Gateway: Edge/rate-limit

END CONTENT
-----8<----- END FILE: docs\diagrams\c4-context.mmd

-----8<----- FILE: docs\diagrams\sequence-entry-to-balance.mmd
Size: 658 bytes
SHA256: 6A8FDD3F72FA314F472EF1A0274BD3F731ADD97F1667F79D18FEE9EF70B10067
<<<BEGIN CONTENT
%% Sequence: POST entry -> outbox -> broker -> consolidator -> query
sequenceDiagram
  participant M as Merchant
  participant G as API Gateway
  participant L as Ledger Service
  participant MQ as RabbitMQ
  participant C as Consolidator
  participant DB as Postgres
  participant Q as Balance Query

  M->>G: POST /ledger/entries
  G->>L: Forward request
  L->>DB: Save entry + outbox
  L-->>M: 201 Created (id)
  L->>MQ: Publish ledger.entry-recorded
  MQ-->>C: Deliver event
  C->>DB: Upsert report.daily_balances
  M->>G: GET /balances/daily?date=YYYY-MM-DD
  G->>Q: Forward request
  Q->>DB: Read report.daily_balances
  Q-->>M: { day, balanceCents }


END CONTENT
-----8<----- END FILE: docs\diagrams\sequence-entry-to-balance.mmd

-----8<----- FILE: docs\TESTES.md
Size: 3105 bytes
SHA256: D00B08A895DDE8148508EDD91A6BAA02914AA00A8F707279F76A120E83C4CD94
<<<BEGIN CONTENT
# Guia do Avaliador — Testes Funcionais e NFR

## Pré-requisitos
- Docker + Docker Compose
- Linux/macOS: bash, curl · Windows: PowerShell 7 (pwsh)
- API_KEY no .env (default: admin)

## Subir a stack
```bash
docker compose up -d --build
```

## Testes automatizados (cross-OS)
Linux/macOS:
```bash
bash ops/test-suite.sh --load
```
Windows:
```powershell
pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -Load
```

Os runners:
- aguardam health dos serviços (gateway 8080; apps 8081..8083);
- executam os cenários A..I abaixo;
- exibem o que foi enviado (método, URL, headers, body) e o que retornou (status, headers relevantes e body pretty JSON);
- salvam evidências em out/ (requests/responses por cenário);
- executam micro-carga somente após smoke com sucesso (50 rps por 15s, perda ≤ 5%).

## Cenários funcionais (com critérios claros)

Headers padrão em POSTs:
X-API-Key: admin · Content-Type: application/json · Idempotency-Key: <GUID>
Header recomendado em GETs: X-Request-Id: <GUID>

A — Crédito básico (201 → replay 200)
POST /ledger/entries
```json
{ "occurredOn": "YYYY-MM-DD", "type": "CREDIT", "amountCents": 1000, "description": "smoke" }
```
Esperado: 201 Location: /ledger/entries/<id>; replay com mesma Idempotency-Key → 200 mesma Location. GET /balances/daily?date=YYYY-MM-DD ≥ 1000.

B — Débito básico
POST type: "DEBIT", "amountCents": 700. GET /balances/daily?date=YYYY-MM-DD reduz em 700 vs. saldo anterior.

C — Mix no mesmo dia
Envie: +500, +400, −200 (ordem livre). GET → saldo do dia = +700.

D — Multi-dia (ontem + hoje)
Ontem: +500, −200; Hoje: +400. GET ontem = +300; GET hoje = +400.

E — Rebuild não altera saldo (invariância)
POST /consolidator/rebuild?from=<ontem>&to=<hoje> → { "jobId": "..." }; Poll até COMPLETED|DONE. GETs idênticos aos medidos antes do rebuild.

F — Segurança 403
POST sem X-API-Key → 403 Forbidden.

G — Múltiplos débitos no mesmo dia
Envie: −300 e −200 adicionais. GET → saldo do dia reduzido em −500 adicionais.

H — Mix reordenado
Envie +500, −200, +400 (ordem aleatória). GET → saldo final = +700.

I — Rebuild multi-dia (replace-only)
Refaça créditos/débitos em ontem e hoje, verifique GETs. POST rebuild from=ontem&to=hoje e re-verifique: valores idênticos.

### Aceitação (geral):
- POST inicial 201 + Location estável; replay com mesma Idempotency-Key 200 + mesma Location.
- GET /balances/daily reflete lançamentos; rebuild não altera saldos (replace-only).
- NFR: micro-carga (50 rps / 15s) com perda ≤ 5%.

## Micro-carga (NFR)
Linux/macOS: `bash ops/test-suite.sh --load` (ou `bash ops/load.sh --rps 50 --duration 15s --max-loss 0.05`)

Windows: `pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -Load` (ou `pwsh ops\load.ps1 -Rps 50 -Duration '15s' -MaxLoss 0.05`)

Somente leitura: GET /balances/daily. Falha se perda > limiar.

## Troubleshooting rápido
Manter a stack para inspeção: `--no-teardown` / `-NoTeardown`

Logs: `docker compose logs --no-color --since=10m`

Evidências salvas em out/ (requests/responses por cenário).

END CONTENT
-----8<----- END FILE: docs\TESTES.md

-----8<----- FILE: it-tests\pom.xml
Size: 2349 bytes
SHA256: 9449052FC66F08218A851454EC9B494EE823C5ED0E1E9CEF2DEA2883F2DA6767
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.cashflowchallenge</groupId>
    <artifactId>cashflow-challenge</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>it-tests</artifactId>
  <name>it-tests</name>
  <packaging>jar</packaging>

  <properties>
    <!-- Skip by default; compose tester overrides with -DskipTests=false -->
    <skipTests>true</skipTests>
  </properties>

  <dependencies>
    <!-- JUnit 5 + test utilities via Spring Boot's managed versions -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

END CONTENT
-----8<----- END FILE: it-tests\pom.xml

-----8<----- FILE: it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java
Size: 1125 bytes
SHA256: 1D897CF20A744B252FB073783BC05BB5CA24F553B7F95D5D6EE0FD7F5C84C692
<<<BEGIN CONTENT
package com.cashflowchallenge.it;

import io.restassured.RestAssured;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.is;

public class DuplicateIdempotencyIT {
  @Test
  void duplicate_post_returns_conflict_and_effect_once() {
    String base = System.getenv().getOrDefault("API_BASE_URL", "http://api-gateway:8080");
    RestAssured.baseURI = base;
    String day = LocalDate.now().toString();

    String body = "{" +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":2345," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"e2e\"" +
        "}";

    String key = "dup-e2e-1";

    given().header("Content-Type", "application/json").header("Idempotency-Key", key).body(body)
        .when().post("/ledger/entries")
        .then().statusCode(anyOf(is(200), is(201)));

    given().header("Content-Type", "application/json").header("Idempotency-Key", key).body(body)
        .when().post("/ledger/entries")
        .then().statusCode(409);
  }
}


END CONTENT
-----8<----- END FILE: it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java

-----8<----- FILE: it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java
Size: 1379 bytes
SHA256: 995948FA9B1F61950011EB97B7B721C4E0C3C1CE52B23A9C006A99B4421F17DD
<<<BEGIN CONTENT
package com.cashflowchallenge.it;

import io.restassured.RestAssured;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;

import static io.restassured.RestAssured.given;
import static org.awaitility.Awaitility.await;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.greaterThanOrEqualTo;
import static org.hamcrest.Matchers.is;

public class LedgerFlowIT {
  @Test
  void endToEnd_entry_then_balance() {
    String base = System.getenv().getOrDefault("API_BASE_URL", "http://api-gateway:8080");
    RestAssured.baseURI = base;
    String day = LocalDate.now().toString();

    // Create entry via gateway -> ledger-service (through Rabbit) -> consolidator -> Postgres
    given()
      .header("Content-Type", "application/json")
      .header("Idempotency-Key", "it-demo-1")
      .body("{\"occurredOn\":\"" + day + "\",\"amountCents\":1234,\"type\":\"CREDIT\",\"description\":\"it\"}")
    .when()
      .post("/ledger/entries")
    .then()
      .statusCode(anyOf(is(200), is(201)));

    // Poll balance endpoint until the consumer processes the event
    await().atMost(30, TimeUnit.SECONDS).untilAsserted(() ->
      given()
        .when().get("/balances/daily?date=" + day)
        .then()
          .statusCode(200)
          .body("balanceCents", greaterThanOrEqualTo(1234))
    );
  }
}

END CONTENT
-----8<----- END FILE: it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java

-----8<----- FILE: ledger-service\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: ledger-service\docker-entrypoint.sh

-----8<----- FILE: ledger-service\Dockerfile
Size: 792 bytes
SHA256: EE70E3A25A319983252ABFB874EF1E9E704ECF65D25968F995E022398293A20A
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/ledger-service-*.jar app.jar
EXPOSE 8081
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: ledger-service\Dockerfile

-----8<----- FILE: ledger-service\pom.xml
Size: 4912 bytes
SHA256: 92F03802E8064D9583465D0F53545922A4D2CE24D7AD1F14FCF0B1D207F9B0F6
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>ledger-service</artifactId>
  <name>ledger-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>10.17.3</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
      <version>10.17.3</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: ledger-service\pom.xml

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java
Size: 947 bytes
SHA256: C72149581B44BFDA2519F50F278BBB56E9FCF8CCA990F974590EC16100B3262D
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api.dto;

import com.cashflowchallenge.ledger.domain.EntryType;
import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDate;

public class LedgerEntryRequest {
  @NotNull
  @JsonFormat(pattern = "yyyy-MM-dd")
  @Schema(example = "2025-01-01")
  private LocalDate occurredOn;

  @NotNull
  private EntryType type;

  @Min(1)
  private long amountCents;

  @jakarta.validation.constraints.Size(max = 255, message = "description must be up to 255 chars")
  private String description;

  public LocalDate getOccurredOn() { return occurredOn; }
  public EntryType getType() { return type; }
  public long getAmountCents() { return amountCents; }
  public String getDescription() { return description; }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java
Size: 183 bytes
SHA256: 644372490F4B22CBA4B97D42FD0B5910B2D4A3B15F229DC7AD133552DF54824C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api.dto;

import java.util.UUID;

public class LedgerEntryResponse {
  public UUID id;
  public LedgerEntryResponse(UUID id) { this.id = id; }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java
Size: 3331 bytes
SHA256: 9B67BD0AD45D6D6C54F45D0B70F1CBF3BCA2BDB176B598C19072B601CBF9FE50
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api;

import com.cashflowchallenge.ledger.api.dto.LedgerEntryRequest;
import com.cashflowchallenge.ledger.api.dto.LedgerEntryResponse;
import com.cashflowchallenge.ledger.application.RecordEntryService;
import com.cashflowchallenge.ledger.domain.Entry;
import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.infrastructure.repository.EntryRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/ledger")
@Tag(name = "Ledger API")
public class LedgerController {
  private final RecordEntryService recordEntryService;
  private final EntryRepository entryRepository;

  public LedgerController(RecordEntryService recordEntryService, EntryRepository entryRepository) {
    this.recordEntryService = recordEntryService;
    this.entryRepository = entryRepository;
  }

  @PostMapping("/entries")
  @Operation(
      summary = "Create a ledger entry with idempotency",
      parameters = {
          @Parameter(name = "X-Request-Id", in = ParameterIn.HEADER, required = false,
              description = "Optional client-supplied request id (UUID); generated if absent"),
          @Parameter(name = "Idempotency-Key", in = ParameterIn.HEADER, required = false,
              description = "Recommended for writes; echoed back if provided")
      },
      responses = {
          @ApiResponse(responseCode = "201", description = "Created",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided")
              }),
          @ApiResponse(responseCode = "200", description = "Replayed (idempotent)",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided")
              })
      }
  )
  public ResponseEntity<LedgerEntryResponse> create(
      @RequestHeader("Idempotency-Key") String idempotencyKey,
      @Valid @RequestBody LedgerEntryRequest req) {
    var result = recordEntryService.record(req.getOccurredOn(), req.getAmountCents(), req.getType(), req.getDescription(), idempotencyKey);
    URI location = URI.create("/ledger/entries/" + result.id);
    if (result.created) {
      return ResponseEntity.created(location).body(new LedgerEntryResponse(result.id));
    } else {
      return ResponseEntity.ok().location(location).body(new LedgerEntryResponse(result.id));
    }
  }

  @GetMapping("/entries")
  @Operation(summary = "List entries by date")
  public List<Entry> list(@RequestParam("date") LocalDate date) {
    return entryRepository.findByOccurredOn(date);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java
Size: 3260 bytes
SHA256: 350429E0A0E8987593D1DD3AA687CDD3DA671E743B7C4546C60B1B95B67805F5
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.application;

import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Service
public class RecordEntryService {
  private final NamedParameterJdbcTemplate jdbc;
  private final OutboxRepository outboxRepository;
  private final ObjectMapper objectMapper;
  private final Counter createdCounter;
  private final Counter conflictCounter;

  public RecordEntryService(NamedParameterJdbcTemplate jdbc, OutboxRepository outboxRepository, ObjectMapper objectMapper, MeterRegistry registry) {
    this.jdbc = jdbc;
    this.outboxRepository = outboxRepository;
    this.objectMapper = objectMapper;
    this.createdCounter = registry.counter("entries_created_total");
    this.conflictCounter = registry.counter("entries_conflict_total");
  }

  public static class Result {
    public final UUID id;
    public final boolean created;
    public Result(UUID id, boolean created) { this.id = id; this.created = created; }
  }

  @Transactional
  public Result record(LocalDate occurredOn, long amountCents, EntryType type, String description, String idempotencyKey) {
    UUID id = UUID.randomUUID();
    String sql = """
      INSERT INTO ledger.entries (id, occurred_on, type, amount_cents, description, idempotency_key)
      VALUES (:id, :day, :type, :amt, :desc, :idem)
      ON CONFLICT (idempotency_key) DO UPDATE
        SET idempotency_key = EXCLUDED.idempotency_key
      RETURNING id, (xmax = 0) AS created
      """;
    Map<String, Object> params = new HashMap<>();
    params.put("id", id);
    params.put("day", occurredOn);
    params.put("type", type.name());
    params.put("amt", amountCents);
    params.put("desc", description);
    params.put("idem", idempotencyKey);

    Map<String, Object> row = jdbc.queryForMap(sql, params);
    UUID returnedId = UUID.fromString(row.get("id").toString());
    boolean created = (Boolean) row.get("created");

    if (created) {
      // Only create outbox when newly inserted
      Map<String, Object> payload = Map.of(
          "id", returnedId.toString(),
          "occurredOn", occurredOn.toString(),
          "amountCents", amountCents,
          "type", type.name(),
          "description", description
      );
      String json;
      try {
        json = objectMapper.writeValueAsString(payload);
      } catch (Exception e) {
        throw new RuntimeException("Failed to serialize outbox payload", e);
      }
      OutboxEvent evt = new OutboxEvent(UUID.randomUUID(), "Entry", "ledger.entry-recorded", json);
      outboxRepository.save(evt);
      createdCounter.increment();
    } else {
      conflictCounter.increment();
    }
    return new Result(returnedId, created);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java
Size: 1755 bytes
SHA256: 9DFA8DABEC582FB0C273BE07EA4D48B7E7EF7D4D266046DA49C32BCAFA597807
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import jakarta.persistence.*;
import java.time.Instant;
import java.time.LocalDate;
import java.util.UUID;

@Entity
@Table(schema = "ledger", name = "entries", uniqueConstraints = {
    @UniqueConstraint(name = "uk_entries_idempotency_key", columnNames = {"idempotency_key"})
})
public class Entry {
  @Id
  @Column(nullable = false)
  private UUID id;

  @Column(name = "occurred_on", nullable = false)
  private LocalDate occurredOn;

  @Column(name = "amount_cents", nullable = false)
  private long amountCents;

  @Enumerated(EnumType.STRING)
  @Column(nullable = false, length = 10)
  private EntryType type;

  @Column(columnDefinition = "text")
  private String description;

  @Column(name = "created_at", nullable = false)
  private Instant createdAt;

  @Column(name = "idempotency_key", nullable = false, length = 64)
  private String idempotencyKey;

  protected Entry() {}

  public Entry(UUID id, LocalDate occurredOn, long amountCents, EntryType type, String description, String idempotencyKey) {
    if (amountCents <= 0) throw new IllegalArgumentException("amountCents must be positive");
    this.id = id;
    this.occurredOn = occurredOn;
    this.amountCents = amountCents;
    this.type = type;
    this.description = description;
    this.createdAt = Instant.now();
    this.idempotencyKey = idempotencyKey;
  }

  public UUID getId() { return id; }
  public LocalDate getOccurredOn() { return occurredOn; }
  public long getAmountCents() { return amountCents; }
  public EntryType getType() { return type; }
  public String getDescription() { return description; }
  public Instant getCreatedAt() { return createdAt; }
  public String getIdempotencyKey() { return idempotencyKey; }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java
Size: 294 bytes
SHA256: 65C71BF1D321B0BC315BCC29764467FE0487ECC730F71F01F13BF0D30D48E4E1
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

public enum EntryType {
  CREDIT,
  DEBIT;

  public long signedAmount(long amountCents) {
    if (amountCents <= 0) throw new IllegalArgumentException("amountCents must be positive");
    return this == CREDIT ? amountCents : -amountCents;
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java
Size: 1869 bytes
SHA256: 90AC7026316DCA7CB7CC6C7EB66C4F0F641DA3B83A12473F102C55CDB6E9063C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;
import java.time.Instant;
import java.util.UUID;

@Entity
@Table(schema = "ledger", name = "outbox")
public class OutboxEvent {
  @Id
  @Column(nullable = false)
  private UUID id;

  @Column(nullable = false, length = 32)
  private String aggregate;

  @Column(name = "event_type", nullable = false, length = 64)
  private String eventType;

  @Column(columnDefinition = "jsonb", nullable = false)
  @JdbcTypeCode(SqlTypes.JSON)
  private String payload;

  @Column(name = "created_at", nullable = false)
  private Instant createdAt;

  @Column(name = "published_at")
  private Instant publishedAt;

  @Column(name = "attempts", nullable = false)
  private int attempts = 0;

  @Column(name = "last_error")
  private String lastError;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected OutboxEvent() {}

  public OutboxEvent(UUID id, String aggregate, String eventType, String payload) {
    this.id = id;
    this.aggregate = aggregate;
    this.eventType = eventType;
    this.payload = payload;
    this.createdAt = Instant.now();
    this.updatedAt = this.createdAt;
  }

  public UUID getId() { return id; }
  public String getAggregate() { return aggregate; }
  public String getEventType() { return eventType; }
  public String getPayload() { return payload; }
  public Instant getCreatedAt() { return createdAt; }
  public Instant getPublishedAt() { return publishedAt; }
  public int getAttempts() { return attempts; }
  public String getLastError() { return lastError; }
  public Instant getUpdatedAt() { return updatedAt; }
  public void markPublished() { this.publishedAt = Instant.now(); }
  public boolean isPublished() { return publishedAt != null; }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java
Size: 480 bytes
SHA256: 6B47E805A01CC327BFE94426537E713633A036EC318BA2CE2F89960CB18777F9
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.sql.DataSource;

@Configuration
public class JdbcConfig {
  @Bean
  public NamedParameterJdbcTemplate namedParameterJdbcTemplate(DataSource dataSource) {
    return new NamedParameterJdbcTemplate(dataSource);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java
Size: 3609 bytes
SHA256: 6A3A574CF25CB7EFD37EE9145638BA00DE9A781BF09DA793950245EF566245E3
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Component
public class OutboxDrainScheduler {
  private static final Logger log = LoggerFactory.getLogger(OutboxDrainScheduler.class);

  private final OutboxRepository repo;
  private final OutboxPublisher publisher;
  private final JdbcTemplate jdbc;
  private final int batchSize;
  private final int maxAttempts;
  private final io.micrometer.core.instrument.Gauge unpublishedGauge;
  private final io.micrometer.core.instrument.Gauge poisonedGauge;

  public OutboxDrainScheduler(OutboxRepository repo, OutboxPublisher publisher, JdbcTemplate jdbc,
                              @Value("${outbox.batchSize:200}") int batchSize,
                              @Value("${outbox.maxAttempts:20}") int maxAttempts,
                              io.micrometer.core.instrument.MeterRegistry registry) {
    this.repo = repo;
    this.publisher = publisher;
    this.jdbc = jdbc;
    this.batchSize = batchSize;
    this.maxAttempts = maxAttempts;
    this.unpublishedGauge = io.micrometer.core.instrument.Gauge.builder("outbox_unpublished_count", repo, OutboxRepository::countUnpublished).register(registry);
    this.poisonedGauge = io.micrometer.core.instrument.Gauge.builder("outbox_poisoned_count", repo, OutboxRepository::countPoisoned).register(registry);
  }

  @Scheduled(fixedDelayString = "${outbox.drainDelay:1000}")
  public void drain() {
    int processed = 0;
    for (int i = 0; i < batchSize; i++) {
      if (!processOne()) break;
      processed++;
    }
    if (processed > 0) log.debug("Outbox processed {} events", processed);
  }

  @Transactional
  protected boolean processOne() {
    UUID id = jdbc.query(
        """
        SELECT id
        FROM ledger.outbox
        WHERE published_at IS NULL
          AND (attempts = 0 OR now() - updated_at > LEAST((attempts * attempts) * interval '5 seconds', interval '5 minutes'))
          AND (poisoned_at IS NULL)
        ORDER BY created_at ASC
        LIMIT 1
        FOR UPDATE SKIP LOCKED
        """,
        rs -> rs.next() ? (UUID) rs.getObject(1) : null);
    if (id == null) return false;
    OutboxEvent evt = repo.findById(id).orElse(null);
    if (evt == null) return true; // someone deleted/published meanwhile
    if (evt.getAttempts() >= maxAttempts) {
      repo.markPoisoned(id);
      org.slf4j.MDC.put("outboxId", id.toString());
      log.warn("Outbox event poisoned after max attempts: {}", id);
      org.slf4j.MDC.remove("outboxId");
      return true;
    }
    boolean ok = publisher.publishAndConfirm(evt);
    if (ok) {
      repo.markPublished(id);
    } else {
      repo.markFailed(id, "nack/exception during publish");
      // If exceeded attempts after failure, poison it
      OutboxEvent nowEvt = repo.findById(id).orElse(null);
      if (nowEvt != null && nowEvt.getAttempts() >= maxAttempts) {
        repo.markPoisoned(id);
        org.slf4j.MDC.put("outboxId", id.toString());
        log.warn("Outbox event poisoned after failure threshold: {}", id);
        org.slf4j.MDC.remove("outboxId");
      }
    }
    return true;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java
Size: 5179 bytes
SHA256: 48A9E011222104DD6778606CA67CA6A86F7C43CE6976C5BEF41F36A4995AB45A
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageProperties;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.slf4j.MDC;

import static com.cashflowchallenge.ledger.infrastructure.messaging.RabbitConfig.LEDGER_EXCHANGE;
import static com.cashflowchallenge.ledger.infrastructure.messaging.RabbitConfig.ROUTING_KEY;

@Component
public class OutboxPublisher {
  private static final Logger log = LoggerFactory.getLogger(OutboxPublisher.class);

  private final RabbitTemplate rabbitTemplate;
  private final OutboxRepository outboxRepository;
  private final Counter published;
  private final Counter returned;
  private final Counter nacked;
  private final Counter failed;
  // Track if a basic.return was observed for a given correlation id
  private final ConcurrentMap<String, Boolean> returnsSeen = new ConcurrentHashMap<>();

  public OutboxPublisher(RabbitTemplate rabbitTemplate, OutboxRepository outboxRepository, MeterRegistry registry) {
    this.rabbitTemplate = rabbitTemplate;
    this.outboxRepository = outboxRepository;
    this.published = registry.counter("outbox_published_total");
    this.returned = registry.counter("outbox_returned_total");
    this.nacked = registry.counter("outbox_nacked_total");
    this.failed = registry.counter("outbox_publish_failed_total");
  }

  @PostConstruct
  void initCallbacks() {
    rabbitTemplate.setReturnsCallback(ret -> {
      returned.increment();
      failed.increment();
      String corrId = ret.getMessage().getMessageProperties().getCorrelationId();
      if (corrId != null) returnsSeen.put(corrId, Boolean.TRUE);
      log.warn("Rabbit RETURNED (unroutable): replyCode={}, replyText={}, exchange={}, routingKey={}, corrId={}, message={}",
          ret.getReplyCode(), ret.getReplyText(), ret.getExchange(), ret.getRoutingKey(), corrId,
          new String(ret.getMessage().getBody(), StandardCharsets.UTF_8));
      // Keep outbox row; deletion is decided in the confirm callback
    });
    rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -> {
      String corrId = correlationData != null ? correlationData.getId() : null;
      if (!ack) {
        nacked.increment();
        log.warn("Confirm NACK corrId={}, cause={}", corrId, cause);
      }
    });
  }

  // Synchronous publish with confirms. Returns true on ACK (and not returned), false otherwise
  public boolean publishAndConfirm(OutboxEvent evt) {
    UUID id = evt.getId();
    String idStr = id.toString();
    String payload = evt.getPayload();
    MessageProperties props = jsonProps();
    props.setCorrelationId(idStr);
    String rid = MDC.get("requestId");
    if (rid != null && !rid.isBlank()) {
      props.setHeader("X-Request-Id", rid);
    }
    props.setHeader("X-Event-Version", 1);
    props.setHeader("Idempotency-Key", idStr);
    Message msg = new Message(payload.getBytes(StandardCharsets.UTF_8), props);
    CorrelationData cd = new CorrelationData(idStr);
    try {
      // Avoid false positives from previous attempts: clear any stale RETURN flag
      returnsSeen.remove(idStr);
      rabbitTemplate.convertAndSend(LEDGER_EXCHANGE, ROUTING_KEY, msg, cd);
      CorrelationData.Confirm confirm = cd.getFuture().get();
      if (confirm != null && confirm.isAck()) {
        boolean wasReturned = Boolean.TRUE.equals(returnsSeen.remove(idStr));
        if (wasReturned) {
          nacked.increment();
          log.warn("ACK received but message was RETURNED earlier: {}", idStr);
          outboxRepository.markFailed(id, "returned earlier");
          return false;
        }
        published.increment();
        log.debug("Outbox ACK: {}", idStr);
        return true;
      } else {
        nacked.increment();
        log.warn("Outbox NACK: {}", idStr);
        outboxRepository.markFailed(id, "nack");
        failed.increment();
        return false;
      }
    } catch (Exception e) {
      nacked.increment();
      log.error("Outbox send threw: {}", idStr, e);
      outboxRepository.markFailed(id, e.getMessage());
      failed.increment();
      return false;
    }
  }

  // Backward-compat shim for legacy tests calling publishOne(...)
  public void publishOne(OutboxEvent event) {
    publishAndConfirm(event);
  }

  private static MessageProperties jsonProps() {
    MessageProperties p = new MessageProperties();
    p.setContentType(MessageProperties.CONTENT_TYPE_JSON);
    p.setContentEncoding(StandardCharsets.UTF_8.name());
    return p;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java
Size: 1066 bytes
SHA256: 5F0515A6CDCC16B51945EF48AD6D46A9BB1147F42BE009666B327D6D2601DD76
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitConfig {

  // Constants used by publisher/tests; topology is owned by consolidator-service.
  public static final String LEDGER_EXCHANGE = "ledger.events";
  public static final String ROUTING_KEY = "ledger.entry-recorded";
  public static final String QUEUE = "report.ledger.entry-recorded.q";
  public static final String DLX_EXCHANGE = "ledger.dlx";
  public static final String DLQ_ROUTING_KEY = "ledger.entry-recorded.dlq";
  public static final String DLQ_QUEUE = "report.ledger.entry-recorded.dlq";

  @Bean
  public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
    RabbitTemplate tpl = new RabbitTemplate(connectionFactory);
    tpl.setMandatory(true); // honor returns
    return tpl;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java
Size: 470 bytes
SHA256: 81F461F5B3ADAE9129B749D0C5A304CA74781D52E83C909F2504D0F5F1E5EA43
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.repository;

import com.cashflowchallenge.ledger.domain.Entry;
import org.springframework.data.jpa.repository.JpaRepository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

public interface EntryRepository extends JpaRepository<Entry, UUID> {
  Optional<Entry> findByIdempotencyKey(String idempotencyKey);
  List<Entry> findByOccurredOn(LocalDate occurredOn);
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java
Size: 1537 bytes
SHA256: 57E9CD66179B68933C797B9C2FDAA3A6AEDFB043DD9229B04FE075C002E422CC
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.repository;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

public interface OutboxRepository extends JpaRepository<OutboxEvent, UUID> {
  // Convenience batch finder to drain outbox in small chunks
  List<OutboxEvent> findTop100ByOrderByCreatedAtAsc();

  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Transactional
  @Query("update OutboxEvent o set o.publishedAt = CURRENT_TIMESTAMP, o.updatedAt = CURRENT_TIMESTAMP where o.id = :id")
  int markPublished(@Param("id") UUID id);

  @Modifying
  @Query("update OutboxEvent o set o.attempts = o.attempts + 1, o.lastError = :err, o.updatedAt = CURRENT_TIMESTAMP where o.id = :id")
  void markFailed(@Param("id") UUID id, @Param("err") String error);

  @Modifying
  @Query(value = "update ledger.outbox set poisoned_at = now(), updated_at = now() where id = :id", nativeQuery = true)
  void markPoisoned(@Param("id") UUID id);

  @Query("select count(o) from OutboxEvent o where o.publishedAt is null")
  long countUnpublished();

  @Query(value = "select count(*) from ledger.outbox where poisoned_at is not null", nativeQuery = true)
  long countPoisoned();
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java
Size: 1463 bytes
SHA256: 5C111A495A7420BE4DE07CB43A504EBBF336C66BC4BD000609C174EF1CF863BA
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class ApiKeyFilter extends OncePerRequestFilter {
  private final String apiKey;

  public ApiKeyFilter(@Value("${api.key:}") String apiKey) {
    this.apiKey = apiKey;
  }

  @Override
  protected boolean shouldNotFilter(HttpServletRequest request) {
    // Only enforce on write endpoints if API key is configured
    if (apiKey == null || apiKey.isBlank()) return true;
    String path = request.getRequestURI();
    boolean isWrite = request.getMethod().equals(HttpMethod.POST.name());
    return !isWrite || !path.startsWith("/ledger");
  }

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String provided = request.getHeader("X-API-Key");
    if (provided == null || !provided.equals(apiKey)) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    filterChain.doFilter(request, response);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java
Size: 1124 bytes
SHA256: 3724D7AF393B306CC04C88B5FCB3078D032BD270C7B6D21ED2F76D3805E97F77
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    String idem = request.getHeader("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.setHeader("Idempotency-Key", idem);
    }
    try { filterChain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java
Size: 1240 bytes
SHA256: 1AE8A67D230C4DF9BF8FD64D5A4433ED80A768633011288DCD58F83457AB682C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java
Size: 3422 bytes
SHA256: 5BA7CBF5C8062C92DC9671457EC9E274457D90289907FBF657D8A5F8B83C5684
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java
Size: 409 bytes
SHA256: 88571F0B70852A5A94292E3FB5459E5F391549FD192ECEBBBFB4BE8629A8F327
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class LedgerApplication {
  public static void main(String[] args) {
    SpringApplication.run(LedgerApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java

-----8<----- FILE: ledger-service\src\main\resources\application.yml
Size: 2016 bytes
SHA256: E44EFB4D2881B40292A794939789BF95710EE60469E1E722398332C4F58F0146
<<<BEGIN CONTENT
server:
  port: 8081
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: ledger-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  lifecycle:
    timeout-per-shutdown-phase: 20s
  flyway:
    enabled: true
    locations: classpath:db/migration
    check-location: true
    create-schemas: true
    schemas: ledger
    default-schema: ledger
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        default_schema: ledger
        jdbc:
          lob:
            non_contextual_creation: true
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:app}
    password: ${SPRING_RABBITMQ_PASSWORD:app}
    # Do not create RabbitAdmin, do not auto-declare topology
    dynamic: false
    listener:
      simple:
        # Don't fail startup if queue missing; consolidator owns topology
        missing-queues-fatal: false
    publisher-returns: true
    publisher-confirm-type: correlated
    template:
      mandatory: true

  amqp:
    admin:
      # If a RabbitAdmin bean exists for some reason, keep it from running
      auto-startup: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      probes:
        enabled: true
  info:
    git:
      mode: simple
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}

api:
  key: ${API_KEY:}

springdoc:
  swagger-ui:
    path: /swagger

outbox:
  drainDelay: 500
  batchSize: 200
  maxAttempts: 20
logging:
  level:
    root: INFO
    org.flywaydb: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\application.yml

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V1__init.sql
Size: 695 bytes
SHA256: EF388AF92241B17E09FB0AE795FDA6408309C528781F7D046F20DED1C6D28FB3
<<<BEGIN CONTENT
CREATE SCHEMA IF NOT EXISTS ledger;

CREATE TABLE IF NOT EXISTS ledger.entries (
    id UUID PRIMARY KEY,
    occurred_on DATE NOT NULL,
    amount_cents BIGINT NOT NULL,
    type VARCHAR(10) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    idempotency_key VARCHAR(64) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS ledger.outbox (
    id UUID PRIMARY KEY,
    aggregate VARCHAR(32) NOT NULL,
    event_type VARCHAR(64) NOT NULL,
    payload JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    published_at TIMESTAMPTZ NULL
);

CREATE INDEX IF NOT EXISTS idx_outbox_unpublished ON ledger.outbox(published_at) WHERE published_at IS NULL;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V1__init.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V2__indexes.sql
Size: 136 bytes
SHA256: DD610F579A409358B3B02ED574FB8B2E80F81EA5A9EC32FF40E5A67C150BFCBF
<<<BEGIN CONTENT
-- Speeds up listing and range aggregations by date
CREATE INDEX IF NOT EXISTS idx_entries_occurred_on ON ledger.entries(occurred_on);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V2__indexes.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql
Size: 177 bytes
SHA256: 4887A3F73745CBE8342890460DB5175B0D84F6A6FA26AB1D2B8B649DF39D6592
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.entries
  ALTER COLUMN idempotency_key SET NOT NULL;

CREATE UNIQUE INDEX IF NOT EXISTS ux_entries_idem_key
  ON ledger.entries (idempotency_key);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V4__outbox_state.sql
Size: 320 bytes
SHA256: F7A39B664616209E5993835FDE87D76E92762E6153DD4E38FF8CA307934DB060
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.outbox
  ADD COLUMN IF NOT EXISTS attempts INT NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS last_error TEXT,
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ NOT NULL DEFAULT now();

CREATE INDEX IF NOT EXISTS idx_outbox_order ON ledger.outbox (published_at NULLS LAST, created_at, id);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V4__outbox_state.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql
Size: 833 bytes
SHA256: C68BB89FDB3C23E94FCF3D8824CA288C6EFC0B71D47345039C8E79E80323315D
<<<BEGIN CONTENT
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_schema='ledger' AND table_name='entries' AND column_name='amount_cents'
  ) THEN
    RAISE EXCEPTION 'ledger.entries.amount_cents column missing';
  END IF;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_amount_pos CHECK (amount_cents >= 1);
  EXCEPTION WHEN duplicate_object THEN
    -- already present, ignore
  END;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_type_valid CHECK (type IN ('CREDIT','DEBIT'));
  EXCEPTION WHEN duplicate_object THEN
  END;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_occurred_on_range CHECK (occurred_on BETWEEN DATE '2000-01-01' AND (CURRENT_DATE + INTERVAL '3650 days'));
  EXCEPTION WHEN duplicate_object THEN
  END;
END$$;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql
Size: 198 bytes
SHA256: 95FA629D5276A76266E7C46175E6887530BB9F59128029CC732833692293A042
<<<BEGIN CONTENT
CREATE INDEX IF NOT EXISTS ix_entries_occurred_on ON ledger.entries(occurred_on);
CREATE INDEX IF NOT EXISTS ix_outbox_unpublished_created ON ledger.outbox (created_at) WHERE published_at IS NULL;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql
Size: 356 bytes
SHA256: D855F2AE1B4877ABED008897B7324C699F4D422D327BA395EBD9C81988788BAC
<<<BEGIN CONTENT
CREATE OR REPLACE VIEW ledger.v_outbox_stuck AS
  SELECT id, attempts, created_at, updated_at, last_error
  FROM ledger.outbox
  WHERE published_at IS NULL AND attempts >= 10;

CREATE OR REPLACE VIEW ledger.v_idempotency_old AS
  SELECT id, idempotency_key, occurred_on, created_at
  FROM ledger.entries
  WHERE created_at < (now() - INTERVAL '90 days');


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql
Size: 89 bytes
SHA256: 71B97237BF3C2655C6C6B6DBD618ED1DA1231D24B3623577F99488E804DB2C3A
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.outbox
  ADD COLUMN IF NOT EXISTS poisoned_at TIMESTAMPTZ;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql

-----8<----- FILE: ledger-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\logback-spring.xml

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java
Size: 2437 bytes
SHA256: 2486A30071B1F60BBD1652299EE20C32D0B5C31C6A6C636C7C84DCF352881321
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api;

import com.cashflowchallenge.ledger.LedgerApplication;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = LedgerApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("it")
public class LedgerIdempotencyIT {

  @Autowired TestRestTemplate rest;
  @Autowired JdbcTemplate jdbc;

  @Test
  void firstIsCreated_thenConflict_withSameIdempotencyKey() {
    String key = "it-idem-" + UUID.randomUUID();
    String day = LocalDate.now().toString();
    String body = "{" +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":1234," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"it\"" +
        "}";

    HttpHeaders h = new HttpHeaders();
    h.setContentType(MediaType.APPLICATION_JSON);
    h.set("Idempotency-Key", key);

    ParameterizedTypeReference<Map<String, Object>> mapType = new ParameterizedTypeReference<>() {};
    ResponseEntity<Map<String, Object>> r1 = rest.exchange("/ledger/entries", HttpMethod.POST, new HttpEntity<>(body, h), mapType);
    assertThat(r1.getStatusCode()).isIn(HttpStatus.CREATED, HttpStatus.OK); // created
    assertThat(r1.getBody()).isNotNull();
    String id = r1.getBody().get("id").toString();

    ResponseEntity<Map<String, Object>> r2 = rest.exchange("/ledger/entries", HttpMethod.POST, new HttpEntity<>(body, h), mapType);
    assertThat(r2.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
    assertThat(r2.getBody()).isNotNull();
    assertThat(r2.getBody().get("id").toString()).isEqualTo(id);

    Integer cntEntries = jdbc.queryForObject("select count(*) from ledger.entries where idempotency_key = ?", Integer.class, key);
    assertThat(cntEntries).isEqualTo(1);

    Integer cntOutbox = jdbc.queryForObject("select count(*) from ledger.outbox where payload->>'id' = ?", Integer.class, id);
    assertThat(cntOutbox).isEqualTo(1);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java
Size: 495 bytes
SHA256: E74A8FD7BDCA38291521BFB5DB63A820AC61EFD3E897D19F1DB72E681F33EB88
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class EntryTypeTest {
  @Test
  void creditIsPositive() {
    assertEquals(100, EntryType.CREDIT.signedAmount(100));
  }

  @Test
  void debitIsNegative() {
    assertEquals(-100, EntryType.DEBIT.signedAmount(100));
  }

  @Test
  void rejectsNonPositive() {
    assertThrows(IllegalArgumentException.class, () -> EntryType.CREDIT.signedAmount(0));
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java
Size: 1088 bytes
SHA256: DBA90424852179AECD3C436AB418166A65A5D062B761AFD243C39E0C3826B5BD
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infra;

import com.cashflowchallenge.ledger.LedgerApplication;
import com.cashflowchallenge.ledger.application.RecordEntryService;
import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = LedgerApplication.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@ActiveProfiles("it")
public class JpaOutboxIT {
  @Autowired RecordEntryService service;
  @Autowired OutboxRepository outbox;

  @Test
  void savingEntryCreatesOutbox() {
    var result = service.record(LocalDate.now(), 1000, EntryType.CREDIT, "t", "ik-1");
    assertThat(result.created).isTrue();
    assertThat(outbox.findTop100ByOrderByCreatedAtAsc()).isNotEmpty();
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java
Size: 1654 bytes
SHA256: 1A9F530B7A21F40D44C70E54669ABCBB48402EC3265D2289337594355E0C0197
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.connection.CorrelationData;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

public class OutboxPublisherCorrelationIdTest {

  @Test
  void setsCorrelationIdOnMessage() {
    RabbitTemplate template = mock(RabbitTemplate.class);
    OutboxRepository repo = mock(OutboxRepository.class);
    var registry = new SimpleMeterRegistry();

    OutboxPublisher publisher = new OutboxPublisher(template, repo, registry);
    // We don't need returns callback for this test

    UUID id = UUID.randomUUID();
    OutboxEvent evt = new OutboxEvent(id, "Entry", "ledger.entry-recorded", "{\"k\":1}");

    // Capture message argument
    ArgumentCaptor<Message> msgCaptor = ArgumentCaptor.forClass(Message.class);

    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), any(CorrelationData.class));

    publisher.publishAndConfirm(evt);

    Message sent = msgCaptor.getValue();
    assertThat(sent).isNotNull();
    assertThat(sent.getMessageProperties().getCorrelationId()).isEqualTo(id.toString());
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java
Size: 3664 bytes
SHA256: 5F0D3B8EB7E647D48D3EC4B2B986D0E0649B26510C34045B76F63ADFC8CDBDE8
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.ReturnedMessage;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

public class OutboxPublisherReturnThenAckTest {

  @Test
  void returnThenAck_doesNotDelete_thenNextAck_deletes() {
    RabbitTemplate template = mock(RabbitTemplate.class);
    OutboxRepository repo = mock(OutboxRepository.class);
    var registry = new SimpleMeterRegistry();

    OutboxPublisher publisher = new OutboxPublisher(template, repo, registry);
    // capture ReturnsCallback registered in @PostConstruct
    var returnsCbCaptor = ArgumentCaptor.forClass(RabbitTemplate.ReturnsCallback.class);
    doAnswer(inv -> { return null; })
        .when(template).setReturnsCallback(returnsCbCaptor.capture());
    publisher.initCallbacks();

    // Prepare first event
    UUID id1 = UUID.randomUUID();
    OutboxEvent evt1 = new OutboxEvent(id1, "Entry", "ledger.entry-recorded", "{\"k\":1}");

    // capture message & correlation for first send
    ArgumentCaptor<Message> msgCaptor = ArgumentCaptor.forClass(Message.class);
    ArgumentCaptor<CorrelationData> cdCaptor = ArgumentCaptor.forClass(CorrelationData.class);
    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), cdCaptor.capture());

    // --- First publish: simulate RETURN then ACK ---
    publisher.publishAndConfirm(evt1);

    Message sent1 = msgCaptor.getAllValues().get(0);
    CorrelationData cd1 = cdCaptor.getAllValues().get(0);

    // simulate broker RETURN (unroutable) using the same message
    ReturnedMessage rm = new ReturnedMessage(
        sent1, 312, "NO_ROUTE", RabbitConfig.LEDGER_EXCHANGE, RabbitConfig.ROUTING_KEY);
    returnsCbCaptor.getValue().returnedMessage(rm);

    // simulate broker ACK (true)
    cd1.getFuture().complete(new CorrelationData.Confirm(true, null));

    // verify: NOT deleted due to prior RETURN
    verify(repo, never()).deleteById(id1);

    // metrics after first attempt
    assertThat(registry.counter("outbox_returned_total").count()).isEqualTo(1.0d);
    assertThat(registry.counter("outbox_published_total").count()).isEqualTo(0.0d);
    assertThat(registry.counter("outbox_nacked_total").count()).isEqualTo(1.0d);

    // --- Second publish: clean path (ACK only) ---
    reset(template);
    msgCaptor = ArgumentCaptor.forClass(Message.class);
    cdCaptor  = ArgumentCaptor.forClass(CorrelationData.class);
    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), cdCaptor.capture());

    UUID id2 = UUID.randomUUID();
    OutboxEvent evt2 = new OutboxEvent(id2, "Entry", "ledger.entry-recorded", "{\"k\":2}");
    publisher.publishAndConfirm(evt2);

    CorrelationData cd2 = cdCaptor.getAllValues().get(0);
    cd2.getFuture().complete(new CorrelationData.Confirm(true, null));

    // verify: deleted on success
    verify(repo).deleteById(id2);
    assertThat(registry.counter("outbox_published_total").count()).isEqualTo(1.0d);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java

-----8<----- FILE: ledger-service\src\test\resources\application-it.yml
Size: 409 bytes
SHA256: 1F8106FEF37956708ACEF546957F143F9D1D47BF700590AC066786505DC5D9EF
<<<BEGIN CONTENT
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/app
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    locations: classpath:db/migration
    create-schemas: true
    schemas: ledger
    default-schema: ledger
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: app
    password: app
logging:
  level:
    root: INFO

END CONTENT
-----8<----- END FILE: ledger-service\src\test\resources\application-it.yml

-----8<----- FILE: make-project-dump.ps1
Size: 5962 bytes
SHA256: A0A0A2C490B72BD3A1465918523E06FB5C34E508B6D712E0BB4B3DBC9DB96F7B
<<<BEGIN CONTENT
<# make-project-dump.ps1
   Gera 1 TXT na raiz com: cabeçalho, tree (ou fallback), lista de arquivos
   e conteúdo completo (sem limite). Binários são pulados; use -IncludeBinary
   para gravar base64.
#>

param(
  [string]$Output = "project-dump.txt",
  [switch]$IncludeBinary
)

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# ------------------ CONFIG ------------------
$ExcludeDirs = @(
  '.git','node_modules','target','build','out','dist','logs','bin','obj',
  '.idea','.vscode','.gradle','.venv','venv','coverage','.m2','.terraform',
  '.DS_Store'
)

$BinaryExt = @(
  '.png','.jpg','.jpeg','.gif','.bmp','.svg','.ico',
  '.pdf','.zip','.7z','.gz','.tar','.tgz','.rar',
  '.jar','.war','.ear','.class',
  '.exe','.dll','.so','.dylib',
  '.psd','.ai','.mp3','.wav','.mp4','.mov','.avi','.mkv','.iso',
  '.sqlite','.db','.parquet'
)

# ------------------ ROOT (FIX) ------------------
# Usa $PSScriptRoot quando disponível; senão, PSCommandPath; senão, CWD.
$Root = $PSScriptRoot
if ([string]::IsNullOrWhiteSpace($Root)) {
  if ($PSCommandPath) {
    $Root = Split-Path -Path $PSCommandPath -Parent
  } else {
    $Root = (Get-Location).Path
  }
}
Set-Location -LiteralPath $Root

# ------------------ OUTPUT ------------------
$OutFile = Join-Path $Root $Output
if (Test-Path -LiteralPath $OutFile) {
  Copy-Item -LiteralPath $OutFile -Destination "$OutFile.$(Get-Date -Format 'yyyyMMdd-HHmmss').bak" -Force
}
Set-Content -LiteralPath $OutFile -Value "" -Encoding UTF8

function Write-Line([string]$s = "") { Add-Content -LiteralPath $OutFile -Value $s }
function Write-Section([string]$title) {
  Write-Line ""
  Write-Line ("".PadLeft(80,'='))
  Write-Line ("=  $title")
  Write-Line ("".PadLeft(80,'='))
}

# ------------------ FILTERS ------------------
$dirsPattern  = ($ExcludeDirs | ForEach-Object { [regex]::Escape($_) }) -join '|'
$excludeRegex = [regex]::new("[\\/](?:$dirsPattern)[\\/]", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)

function ShouldSkipPath([string]$fullPath) { return $excludeRegex.IsMatch($fullPath) }
function IsBinaryByExt([string]$path) {
  $ext = [System.IO.Path]::GetExtension($path)
  if ([string]::IsNullOrEmpty($ext)) { return $false }
  return ($BinaryExt -contains $ext.ToLowerInvariant())
}

# ------------------ HEADER ------------------
Write-Section "PROJECT DUMP — HEADER"
Write-Line ("Timestamp       : {0}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss zzz'))
Write-Line ("Root            : {0}" -f $Root)
Write-Line ("PowerShell      : {0}" -f $PSVersionTable.PSVersion)
Write-Line ("OS              : {0}" -f [System.Environment]::OSVersion.VersionString)
Write-Line ("IncludeBinary   : {0}" -f ($IncludeBinary.IsPresent))

try {
  $null = Get-Command git -ErrorAction Stop
  $branch = (git rev-parse --abbrev-ref HEAD 2>$null)
  $commit = (git rev-parse --short HEAD 2>$null)
  $remote = (git remote -v 2>$null | Select-Object -First 1)
  if ($branch) { Write-Line ("Git Branch      : {0}" -f $branch.Trim()) }
  if ($commit) { Write-Line ("Git Commit      : {0}" -f $commit.Trim()) }
  if ($remote) { Write-Line ("Git Remote      : {0}" -f $remote.Trim()) }
} catch { Write-Line "Git             : not available" }

# ------------------ TREE ------------------
Write-Section "TREE (ASCII)"
$treeOk = $false
try {
  if ($env:ComSpec) {
    $tree = & $env:ComSpec /c "tree /F /A" 2>$null
    if ($LASTEXITCODE -eq 0 -and $tree) {
      $tree | Add-Content -LiteralPath $OutFile -Encoding UTF8
      $treeOk = $true
    }
  }
} catch { }
if (-not $treeOk) {
  Write-Line "[fallback] 'tree' indisponível; listando caminhos relativos:"
  Get-ChildItem -Recurse -Force | ForEach-Object {
    Write-Line ($_.FullName.Substring($Root.Length).TrimStart('\','/'))
  }
}

# ------------------ FILE LIST ------------------
Write-Section "FILE LIST (filtered)"
$allFiles = Get-ChildItem -Recurse -Force -File | Where-Object { -not (ShouldSkipPath $_.FullName) }
$relFiles = $allFiles | ForEach-Object {
  $_ | Add-Member -NotePropertyName RelPath -NotePropertyValue ($_.FullName.Substring($Root.Length).TrimStart('\','/')) -PassThru
}
$relFiles | Sort-Object RelPath | ForEach-Object { Write-Line $_.RelPath }
Write-Line ""
Write-Line ("Total files (after filters): {0}" -f $relFiles.Count)

# ------------------ CONTENTS ------------------
Write-Section "FILE CONTENTS"
foreach ($f in ($relFiles | Sort-Object RelPath)) {
  $full = $f.FullName
  $rel  = $f.RelPath

  Write-Line ("-----8<----- FILE: {0}" -f $rel)
  Write-Line ("Size: {0} bytes" -f $f.Length)
  try { Write-Line ("SHA256: {0}" -f (Get-FileHash -LiteralPath $full -Algorithm SHA256).Hash) }
  catch { Write-Line ("SHA256: <unavailable> ({0})" -f $_.Exception.Message) }

  $isBin = IsBinaryByExt $full
  if ($isBin -and -not $IncludeBinary) {
    Write-Line "[content skipped] Reason: binary extension"
  } else {
    try {
      if ($isBin -and $IncludeBinary) {
        Write-Line "<<<BEGIN BINARY BASE64"
        [byte[]]$bytes = [System.IO.File]::ReadAllBytes($full)
        [Convert]::ToBase64String($bytes) -split "(.{1,120})" | Where-Object { $_ } | ForEach-Object { Write-Line $_ }
        Write-Line "END BINARY BASE64"
      } else {
        Write-Line "<<<BEGIN CONTENT"
        $content = Get-Content -LiteralPath $full -Raw -ErrorAction Stop
        $content = $content -replace "`r`n","`n"
        Write-Line $content
        Write-Line "END CONTENT"
      }
    } catch {
      Write-Line ("[content skipped] Could not read file: {0}" -f $_.Exception.Message)
    }
  }
  Write-Line ("-----8<----- END FILE: {0}" -f $rel)
  Write-Line ""
}

# ------------------ SUMMARY ------------------
Write-Section "SUMMARY"
Write-Line ("Files listed : {0}" -f $relFiles.Count)
Write-Line ("Output file  : {0}" -f $OutFile)
Write-Line "Done."

END CONTENT
-----8<----- END FILE: make-project-dump.ps1

-----8<----- FILE: Makefile
Size: 1727 bytes
SHA256: 5A8F2797260827D0294A39B8A359F51C69D6183BCF7624AC9C6685130DFF614C
<<<BEGIN CONTENT
SHELL := /bin/sh

.PHONY: up down logs clean test smoke load

up:
	docker compose up -d --build

down:
	docker compose down -v

logs:
	@mkdir -p out
	docker compose logs --no-color > out/compose-logs.txt || true
	@echo "Logs written to out/compose-logs.txt"

clean:
	find . -name target -type d -prune -exec rm -rf {} +
	rm -rf out

test:
	mvn -q -T 1C clean verify

smoke:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/smoke.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/smoke.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/smoke.sh; \
	else echo "No shell for smoke test (need pwsh/powershell/bash)"; fi

load:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/load.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/load.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/load.sh; \
	else echo "No shell for load script (need pwsh/powershell/bash)"; fi

.PHONY: e2e it
e2e:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/test-suite.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/test-suite.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/test-suite.sh; \
	else echo "No shell for test suite (need pwsh/powershell/bash)"; fi

it:
	docker compose --profile tester run --rm tester

.PHONY: secrets.dev
secrets.dev:
	@mkdir -p secrets
	@set -a; [ -f .env ] && . ./.env || true; set +a; \
	for v in API_KEY SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD SPRING_RABBITMQ_USERNAME SPRING_RABBITMQ_PASSWORD; do \
	  eval val="\$$v"; \
	  if [ -n "$$val" ]; then printf "%s" "$$val" > "secrets/$$v"; echo "wrote secrets/$$v"; else echo "skipped $$v (unset)"; fi; \
	done

END CONTENT
-----8<----- END FILE: Makefile

-----8<----- FILE: ops\grafana\provisioning\dashboards\dashboard.yml
Size: 208 bytes
SHA256: 9A17A58FFC203863C52F28B3465D76F94D93507A7A7E5A27E05D8878C8DF8F74
<<<BEGIN CONTENT
apiVersion: 1
providers:
  - name: 'Default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    updateIntervalSeconds: 10
    options:
      path: /etc/grafana/provisioning/dashboards


END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\dashboards\dashboard.yml

-----8<----- FILE: ops\grafana\provisioning\dashboards\spring-dashboard.json
Size: 2237 bytes
SHA256: 215BD8B8C2BA0FAE94B6CF849CF9FFD7A93BD995DBE6EDC9FFFF51654A2C36E4
<<<BEGIN CONTENT
{
  "annotations": {"list": []},
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1626,
  "links": [],
  "panels": [
    {
      "type": "graph",
      "title": "HTTP Server Requests",
      "targets": [
        {
          "expr": "sum(rate(http_server_requests_seconds_count[1m])) by (uri, status)",
          "legendFormat": "{{uri}} {{status}}",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0}
    },
    {
      "type": "graph",
      "title": "JVM Memory Used",
      "targets": [
        {
          "expr": "sum(jvm_memory_used_bytes{area=\"heap\"}) by (instance)",
          "legendFormat": "{{instance}}",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
    },
    {
      "type": "graph",
      "title": "Entries Processed",
      "targets": [
        {
          "expr": "rate(app_entries_processed_total[1m])",
          "legendFormat": "entries processed",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
    },
    {
      "type": "graph",
      "title": "Outbox Published (rate)",
      "targets": [
        {
          "expr": "rate(outbox_published_total[1m])",
          "legendFormat": "published",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 24}
    },
    {
      "type": "graph",
      "title": "Outbox Returned (rate)",
      "targets": [
        {
          "expr": "rate(outbox_returned_total[1m])",
          "legendFormat": "returned",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 32}
    },
    {
      "type": "graph",
      "title": "Outbox Nacked/Failures (rate)",
      "targets": [
        {
          "expr": "rate(outbox_nacked_total[1m])",
          "legendFormat": "nacked/failures",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 40}
    }
  ],
  "schemaVersion": 27,
  "style": "dark",
  "tags": ["spring", "micrometer"],
  "templating": {"list": []},
  "time": {"from": "now-6h", "to": "now"},
  "timezone": "browser",
  "title": "Spring Boot Observability",
  "version": 1
}

END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\dashboards\spring-dashboard.json

-----8<----- FILE: ops\grafana\provisioning\datasources\datasource.yml
Size: 140 bytes
SHA256: 564E33B9048A1655F1EB36C86065BAF1283BEF84E397107DD1C1FDA05B5A05F1
<<<BEGIN CONTENT
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true


END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\datasources\datasource.yml

-----8<----- FILE: ops\load.ps1
Size: 973 bytes
SHA256: 02E4044B198BB3C27D3DDD6023EC3ACDAF2DEF5C18A6C14DA63C3F83518853B9
<<<BEGIN CONTENT
param(
  [int]$Rps = 50,
  [string]$Duration = '15s',
  [double]$MaxLoss = 0.05,
  [string]$Date = (Get-Date -Format 'yyyy-MM-dd')
)
$ErrorActionPreference = 'Stop'
$api = "http://localhost:8080"
$stopAt = (Get-Date).Add([System.TimeSpan]::Parse($Duration))
[int]$ok = 0; [int]$err = 0

$script = {
  param($u)
  try { Invoke-RestMethod -Method Get -Uri $u -TimeoutSec 5 | Out-Null; 0 }
  catch { 1 }
}

while ((Get-Date) -lt $stopAt) {
  $urls = 1..$Rps | ForEach-Object { "$api/balances/daily?date=$Date" }
  $jobs = foreach ($u in $urls) { Start-ThreadJob -ScriptBlock $script -ArgumentList $u }
  Receive-Job -Job $jobs -Wait -AutoRemoveJob | ForEach-Object { if ($_ -eq 0) { $ok++ } else { $err++ } }
  Start-Sleep -Milliseconds 1000
}
$total = [math]::Max(1, $ok + $err)
$loss = $err / $total
if ($loss -gt $MaxLoss) { Write-Error "Loss ratio $([math]::Round($loss,4)) > $MaxLoss"; exit 1 }
Write-Host "OK: rps=$Rps duration=$Duration loss=$([math]::Round($loss,4))"

END CONTENT
-----8<----- END FILE: ops\load.ps1

-----8<----- FILE: ops\load.sh
Size: 1296 bytes
SHA256: 460E898945D666A2C2B322D838B2CA4D4D6517E0016D3159A31D34BD9D6EAD03
<<<BEGIN CONTENT
#!/usr/bin/env bash
set -euo pipefail

RPS=50
DUR="15s"
MAX_LOSS=0.05
DATE="$(date +%F)"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --rps) RPS="$2"; shift 2 ;;
    --duration) DUR="$2"; shift 2 ;;
    --max-loss) MAX_LOSS="$2"; shift 2 ;;
    --date) DATE="$2"; shift 2 ;;
    *) DATE="$1"; shift ;;
  esac
done

URL="http://localhost:8080/balances/daily?date=${DATE}"
SECS=${DUR%s}

echo "Load: ${RPS} rps for ${SECS}s on ${URL} (max-loss ${MAX_LOSS})"

ok=0
err=0

req_batch() {
  local out="$1"
  local code
  code=$(curl -s -m 3 -o /dev/null -w "%{http_code}" "$URL" || echo "000")
  echo "$code" >> "$out"
}

tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

for ((t=0;t<SECS;t++)); do
  outfile="$tmpdir/codes_$t.txt"
  : > "$outfile"
  # spawn RPS concurrent GETs
  seq 1 "$RPS" | xargs -I{} -P "$RPS" bash -c 'req_batch "$0"' "$outfile"
  # tally this second
  while read -r c; do
    if [[ "$c" =~ ^2[0-9][0-9]$ ]]; then ok=$((ok+1)); else err=$((err+1)); fi
  done < "$outfile"
done

total=$((ok+err))
loss=0
if (( total > 0 )); then
  loss=$(awk -v e=$err -v t=$total 'BEGIN{ printf "%.6f", (e/t) }')
fi
echo "Summary: total=$total 2xx=$ok errors=$err loss=$loss"

awk -v l=$loss -v m=$MAX_LOSS 'BEGIN{ if (l>m) exit 1 }' || { echo "FAIL: loss ratio > max-loss"; exit 1; }
echo "OK"

END CONTENT
-----8<----- END FILE: ops\load.sh

-----8<----- FILE: ops\prometheus\prometheus.yml
Size: 850 bytes
SHA256: 8445E709891ECE79F254FC6A108278D3ED65724D4943A81843924A986DD2B2BD
<<<BEGIN CONTENT
global:
  scrape_interval: 5s

scrape_configs:
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
    metrics_path: /metrics
  - job_name: 'api-gateway'
    static_configs:
      - targets: ['api-gateway:8080']
    metrics_path: /actuator/prometheus
  - job_name: 'ledger-service'
    static_configs:
      - targets: ['ledger-service:8081']
    metrics_path: /actuator/prometheus
  - job_name: 'consolidator-service'
    static_configs:
      - targets: ['consolidator-service:8082']
    metrics_path: /actuator/prometheus
  - job_name: 'balance-query-service'
    static_configs:
      - targets: ['balance-query-service:8083']
    metrics_path: /actuator/prometheus

rule_files:
  - /etc/prometheus/rules.yml
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
    metrics_path: /metrics

END CONTENT
-----8<----- END FILE: ops\prometheus\prometheus.yml

-----8<----- FILE: ops\prometheus\rules.yml
Size: 1307 bytes
SHA256: 06726A787A59A7FBED9F6DBDE1FA2611BBD1F6588CAC9DFA55DC9AF153DAA067
<<<BEGIN CONTENT
groups:
  - name: app-slo
    rules:
      - alert: OutboxStuck
        expr: outbox_unpublished_count > 0 and increase(outbox_publish_failed_total[5m]) > 0
        for: 5m
        labels: { severity: warning }
        annotations: { summary: "Outbox messages failing", description: "Outbox has failing publishes for >5m" }

      - alert: ConsolidatorDuplicatesSpike
        expr: increase(app_entries_duplicate_total[5m]) > 10
        for: 2m
        labels: { severity: info }
        annotations: { summary: "Duplicate messages rising" }

      - alert: ReadinessFlapping
        expr: probe_success == 0
        for: 1m
        labels: { severity: critical }
        annotations: { summary: "Service readiness failing" }

  - name: rate-limit-slo
    rules:
      - record: gateway_ratelimit_rejections_ratio_1m
        expr: |
          rate(gateway_ratelimit_rejected_total[1m])
            /
          (rate(gateway_ratelimit_rejected_total[1m])
           + rate(gateway_ratelimit_allowed_total[1m]) )
      - alert: BalanceQueriesRejectionsHigh
        expr: gateway_ratelimit_rejections_ratio_1m > 0.05
        for: 2m
        labels: { severity: warning }
        annotations:
          summary: "Balance queries rejection >5% (1m)"
          description: "Investigate throttling or scale out."

END CONTENT
-----8<----- END FILE: ops\prometheus\rules.yml

-----8<----- FILE: ops\requests.http
Size: 1778 bytes
SHA256: E5AC96A37A6A74EE96F9208BA7D6269BA7274B5E9A6FCFCB18FBA47A7C4F6205
<<<BEGIN CONTENT
@api = http://localhost:8080
@apiKey = admin
@today = {{$timestamp RFC3339}}
@yesterday = {{$datetime iso8601 (-P1D)}}
@rid = {{$uuid}}
@idem = {{$uuid}}

### Create CREDIT (201)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{idem}}
X-Request-Id: {{rid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 1000,
  "description": "credit"
}

### Replay CREDIT (200, same Location)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{idem}}
X-Request-Id: {{rid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 1000,
  "description": "credit"
}

### Create DEBIT (201)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "DEBIT",
  "amountCents": 700,
  "description": "debit"
}

### Get daily balance
GET {{api}}/balances/daily?date={{today}}
X-Request-Id: {{$uuid}}

### Rebuild (today..today)
POST {{api}}/consolidator/rebuild?from={{today}}&to={{today}}
X-API-Key: {{apiKey}}
X-Request-Id: {{$uuid}}

### GET rebuild status (replace {{jobId}} with returned value)
GET {{api}}/consolidator/rebuild/status/{{jobId}}
X-Request-Id: {{$uuid}}

### Security 403 (no API key)
POST {{api}}/ledger/entries
Content-Type: application/json
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 100,
  "description": "no-key"
}

### Validation 400 (bad type)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "X",
  "amountCents": 100
}

END CONTENT
-----8<----- END FILE: ops\requests.http

-----8<----- FILE: ops\test-suite.ps1
Size: 19865 bytes
SHA256: 74F2BA67AEAE609661BA242454B3D52D11588C7D16C178407569EAD404F8D562
<<<BEGIN CONTENT
Param(
  [string]$Api = "http://localhost:8080",
  [string]$ApiKey = "admin",
  [switch]$NoTeardown,
  [switch]$Verbose,
  [switch]$Load
)

$ErrorActionPreference = 'Stop'
Set-StrictMode -Version Latest
if ($PSVersionTable.PSVersion.Major -lt 7) {
  Write-Error 'PowerShell 7 (pwsh) é obrigatório. Instale PS7 e execute novamente.'
  exit 1
}

#--- Run context & output folder ---
$Global:RunId   = Get-Date -Format "yyyyMMdd-HHmmss"
$Global:OutDir  = Join-Path "out" $RunId
New-Item -ItemType Directory -Force -Path $Global:OutDir | Out-Null

$Global:Steps = @()  # will collect structured step info
$ProgressPreference = 'SilentlyContinue'  # cleaner console

function Compose {
  try { docker compose version | Out-Null; docker compose @Args }
  catch { docker-compose @Args }
}

function Invoke-HttpStep {
  param(
    [Parameter(Mandatory)][ValidateSet('GET','POST','PUT','DELETE','PATCH')] [string]$Method,
    [Parameter(Mandatory)][string]$Url,
    [hashtable]$Headers,
    [string]$Body,
    [string]$Label = "step"
  )

  $ts   = Get-Date -Format "yyyyMMdd-HHmmssfff"
  $base = Join-Path $Global:OutDir "$ts-$Label"

  if ($Headers) { $Headers | ConvertTo-Json | Out-File "$base-headers.json" -Encoding utf8 }
  if ($Body)    { $Body                | Out-File "$base-req.json"     -Encoding utf8 }

  $invokeParams = @{ Method = $Method; Uri = $Url; SkipHttpErrorCheck = $true }
  if ($Headers) { $invokeParams.Headers = $Headers }
  if ($Body)    { $invokeParams.ContentType = 'application/json'; $invokeParams.Body = $Body }

  $resp = Invoke-WebRequest @invokeParams

  # ---- Console output (human-friendly) ----
  Write-Host "`n== $Label ==" -ForegroundColor Cyan
  Write-Host "-> $Method $Url"
  if ($Headers) { Write-Host "-> Headers:"; ($Headers.GetEnumerator() | Sort-Object Name | Format-Table -AutoSize | Out-String).Trim() | Write-Host }
  if ($Body)    { Write-Host "-> Payload:"; $Body | Write-Host }

  $statusColor = if([int]$resp.StatusCode -ge 400){'Red'}else{'Green'}
  Write-Host "<- Status: $($resp.StatusCode)" -ForegroundColor $statusColor
  if ($resp.Headers.Location) { Write-Host "<- Location: $($resp.Headers.Location)" }

  $pretty = $null
  if ($resp.Content) {
    try   { $pretty = $resp.Content | ConvertFrom-Json | ConvertTo-Json -Depth 15 }
    catch { $pretty = $resp.Content }
    Write-Host $pretty
  }

  # ---- Artifacts ----
  $resp.Content | Out-File "$base-resp.json" -Encoding utf8
  "$( [int]$resp.StatusCode )" | Out-File "$base-status.txt" -Encoding ascii
  if ($resp.Headers.Location) { "$($resp.Headers.Location)" | Out-File "$base-location.txt" -Encoding utf8 }

  # ---- Append to in-memory step log ----
  $entry = [pscustomobject]@{
    ts       = (Get-Date).ToString("o")
    label    = $Label
    method   = $Method
    url      = $Url
    status   = [int]$resp.StatusCode
    location = "$($resp.Headers.Location)"
    request  = if ($Body) { try { $Body | ConvertFrom-Json } catch { $Body } } else { $null }
    response = if ($pretty) { try { $pretty | ConvertFrom-Json } catch { $pretty } } else { $null }
  }
  $Global:Steps += $entry

  return $resp
}

Write-Host "`n== Subindo stack ==" -ForegroundColor Cyan
Compose down -v | Out-Null
Compose up -d --build | Out-Null
Compose ps

# Aguardar healthchecks via endpoints (inclui gateway)
function Wait-Healthy {
  param([string]$Url, [int]$TimeoutSec = 60)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  do {
    try {
      $r = Invoke-RestMethod -Method Get -Uri $Url -TimeoutSec 5 -ErrorAction Stop
      if ($r.status -eq 'UP') { return $true }
    } catch { }
    Start-Sleep -Seconds 1
  } while ((Get-Date) -lt $deadline)
  return $false
}

if(-not (Wait-Healthy -Url 'http://localhost:8080/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Gateway not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8081/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Ledger not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8082/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Consolidator not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8083/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Balance not healthy' }

function Dump-Logs {
  Write-Host "`n== Últimos logs (10m, tail 200) ==" -ForegroundColor Yellow
  try { Compose ps | Out-String | Write-Host } catch {}
  foreach ($s in 'postgres','rabbitmq','ledger-service','consolidator-service','balance-query-service','api-gateway') {
    Write-Host "`n-- $s --" -ForegroundColor Yellow
    try { Compose logs --no-color $s --since=10m | Select-Object -Last 500 | Out-String | Write-Host } catch {}
  }
}

trap {
  Dump-Logs
  if(-not $NoTeardown){ Compose down -v | Out-Null }
  exit 1
}

$day  = Get-Date -Format 'yyyy-MM-dd'
$idem = [guid]::NewGuid().Guid
$body = @{ occurredOn=$day; type='CREDIT'; amountCents=1000; description='smoke' } | ConvertTo-Json

Write-Host "`n== POST /ledger/entries (201) ==" -ForegroundColor Cyan
$r1 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idem } -Body $body -Label 'ledger-create'
$r1.StatusCode; $loc = $r1.Headers.Location
if ($r1.StatusCode -ne 201) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Esperado 201, obtido $($r1.StatusCode)" }
if($Verbose){ $r1.RawContent }

# Guardar consistência eventual: aguardar saldo pelo menos 1000
function Wait-UntilBalanceAtLeast {
  param([string]$ApiBase,[string]$Date,[int]$MinCents,[int]$TimeoutSec=30)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  do {
    try {
      $res = Invoke-RestMethod -Method Get -Uri "$ApiBase/balances/daily?date=$Date" -TimeoutSec 5 -ErrorAction Stop
      $balance = if ($res.balanceCents -is [int]) { $res.balanceCents } else { [int]($res | Select-Object -ExpandProperty balanceCents) }
      if ($balance -ge $MinCents) { return $true }
    } catch { }
    Start-Sleep -Seconds 1
  } while ((Get-Date) -lt $deadline)
  return $false
}
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents 1000 -TimeoutSec 30)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Daily balance did not reach expected value within timeout' }

Write-Host "`n== Replay mesma chave (200 + mesma Location) ==" -ForegroundColor Cyan
$r2 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idem } -Body $body -Label 'ledger-replay'
$r2.StatusCode; if ($r2.StatusCode -ne 200) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Esperado 200, obtido $($r2.StatusCode)" }
if ($r2.Headers.Location -ne $loc) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Location diferente no replay" }
if($Verbose){ $r2.RawContent }

Write-Host "`n== GET /balances/daily ==" -ForegroundColor Cyan
$rDaily = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'balances-daily'
$respDaily = $null; try { $respDaily = $rDaily.Content | ConvertFrom-Json } catch { $respDaily = $null }
if(-not $respDaily.balanceCents -or $respDaily.balanceCents -le 0){ if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Saldo diário inválido: $($respDaily | ConvertTo-Json -Compress)" }
if($Verbose){ $respDaily | ConvertTo-Json -Compress }

Write-Host "`n== Rebuild replace-only (D..D) ==" -ForegroundColor Cyan
$h = @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid }
$rJob = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$day&to=$day" -Headers $h -Label 'rebuild-start-today'
$job = $null; try { $job = $rJob.Content | ConvertFrom-Json } catch { $job = $null }
$jid = $job.jobId

$deadline = (Get-Date).AddSeconds(60)
do {
  $st = Invoke-RestMethod -Method Get "$Api/consolidator/rebuild/status/$jid"
  Write-Host "status =" $st.status
  if ($st.status -in @('COMPLETED','DONE')) { break }
  if ($st.status -eq 'FAILED') { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Rebuild FAILED" }
  Start-Sleep -Seconds 1
} while ((Get-Date) -lt $deadline)

Write-Host "`n== GET /balances/daily após rebuild (deve permanecer 1000) ==" -ForegroundColor Cyan
$rAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'balances-daily-after-rebuild'
$after = $null; try { $after = $rAfter.Content | ConvertFrom-Json } catch { $after = $null }
if($Verbose){ $after | ConvertTo-Json -Compress }
if($after.balanceCents -ne $respDaily.balanceCents){ if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Saldo mudou após rebuild ($($respDaily.balanceCents) -> $($after.balanceCents))" }

# -------- Scenario A: BASIC DEBIT --------
Write-Host "`n== Scenario: BASIC DEBIT (same-day) ==" -ForegroundColor Cyan
$todayStart = $after.balanceCents
$amt = 700
$idemA = [guid]::NewGuid().Guid
$bodyA = @{ occurredOn=$day; type='DEBIT'; amountCents=$amt; description='debit-smoke' } | ConvertTo-Json
$ra1 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemA } -Body $bodyA -Label 'debit-create'
Write-Host "status=$($ra1.StatusCode) location=$($ra1.Headers.Location)"; if($ra1.StatusCode -ne 201){ throw 'Scenario A: expected 201' }
$ra2 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemA } -Body $bodyA -Label 'debit-replay'
Write-Host "replay status=$($ra2.StatusCode) location=$($ra2.Headers.Location)"; if($ra2.StatusCode -ne 200 -or $ra2.Headers.Location -ne $ra1.Headers.Location){ throw 'Scenario A: replay 200/location' }
$expA = $todayStart - $amt
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expA -TimeoutSec 30)){ throw 'Scenario A: expected balance not reached' }
$rTodayAfterA = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-A-daily-after'
$todayAfterAObj = $null; try { $todayAfterAObj = $rTodayAfterA.Content | ConvertFrom-Json } catch { $todayAfterAObj = $null }
$todayAfterA = $todayAfterAObj.balanceCents
if($todayAfterA -ne $expA){ throw "Scenario A: expected $expA got $todayAfterA" }
Write-Host 'PASS scenario A'

# -------- Scenario B: MIXED same-day --------
Write-Host "`n== Scenario: MIXED same-day (+500,+400,-200) ==" -ForegroundColor Cyan
$baseB = $todayAfterA
$null = New-Item -ItemType Directory -Force -Path out | Out-Null
function Post-One([string]$t,[int]$v,[string]$d,[string]$tag){
  $ib=[guid]::NewGuid().Guid; $b=@{occurredOn=$day;type=$t;amountCents=$v;description=$d}|ConvertTo-Json
  $label = "scenario-"+$tag
  $resp = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$ib } -Body $b -Label $label
  return $resp
}
Post-One 'CREDIT' 500 'mix1' 'B-1' | Out-Null; Post-One 'CREDIT' 400 'mix2' 'B-2' | Out-Null; Post-One 'DEBIT' 200 'mix3' 'B-3' | Out-Null
$expB = $baseB + 700
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expB -TimeoutSec 30)){ throw 'Scenario B: expected balance not reached' }
$rCurB = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-B-daily-after'
$curBObj = $null; try { $curBObj = $rCurB.Content | ConvertFrom-Json } catch { $curBObj = $null }
$curB = $curBObj.balanceCents
if($curB -ne $expB){ throw "Scenario B: expected $expB got $curB" }
Write-Host 'PASS scenario B'

# -------- Scenario C: MULTI-DAY --------
Write-Host "`n== Scenario: MULTI-DAY (yesterday + today) ==" -ForegroundColor Cyan
$yday = (Get-Date).AddDays(-1).ToString('yyyy-MM-dd')
$rY0 = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-C-yday-before'
$y0Obj = $null; try { $y0Obj = $rY0.Content | ConvertFrom-Json } catch { $y0Obj = $null }
$y0 = $y0Obj.balanceCents
$rT0 = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-C-today-before'
$t0Obj = $null; try { $t0Obj = $rT0.Content | ConvertFrom-Json } catch { $t0Obj = $null }
$t0 = $t0Obj.balanceCents
Post-One 'CREDIT' 300 'ycredit'
$idemTd = [guid]::NewGuid().Guid; $bd=@{occurredOn=$day;type='DEBIT';amountCents=100;description='tdebit'}|ConvertTo-Json
Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemTd } -Body $bd -Label 'multi-day-today-debit' | Out-Null
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $yday -MinCents ($y0+300) -TimeoutSec 30)){ throw 'Scenario C: yesterday not reached' }
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents ($t0-100) -TimeoutSec 30)){ throw 'Scenario C: today not reached' }
$rYNow = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-C-yday-after'
$yNowObj = $null; try { $yNowObj = $rYNow.Content | ConvertFrom-Json } catch { $yNowObj = $null }
$yNow = $yNowObj.balanceCents
$rTNow = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-C-today-after'
$tNowObj = $null; try { $tNowObj = $rTNow.Content | ConvertFrom-Json } catch { $tNowObj = $null }
$tNow = $tNowObj.balanceCents
if($yNow -ne ($y0+300) -or $tNow -ne ($t0-100)){ throw "Scenario C: expected Y=$($y0+300) T=$($t0-100) got Y=$yNow T=$tNow" }
Write-Host 'PASS scenario C'

# -------- Scenario D: REBUILD invariance --------
Write-Host "`n== Scenario: REBUILD invariance (yesterday..today) ==" -ForegroundColor Cyan
$preY=$yNow; $preT=$tNow
$rjob2 = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$yday&to=$day" -Headers @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid } -Label 'rebuild-start-yday-today'
$job2 = $null; try { $job2 = $rjob2.Content | ConvertFrom-Json } catch { $job2 = $null }
$jid2 = $job2.jobId
if(-not $jid2){ throw 'Scenario D: no jobId' }
for($i=0;$i -lt 60;$i++){ $st2=(Invoke-RestMethod "$Api/consolidator/rebuild/status/$jid2").status; if($st2 -in @('COMPLETED','DONE')){ break }; Start-Sleep 1 }
$rYAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-D-yday-after'
$yAfterObj = $null; try { $yAfterObj = $rYAfter.Content | ConvertFrom-Json } catch { $yAfterObj = $null }
$yAfter = $yAfterObj.balanceCents
$rTAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-D-today-after'
$tAfterObj = $null; try { $tAfterObj = $rTAfter.Content | ConvertFrom-Json } catch { $tAfterObj = $null }
$tAfter = $tAfterObj.balanceCents
if($yAfter -ne $preY -or $tAfter -ne $preT){ throw 'Scenario D: balances changed after rebuild' }
Write-Host 'PASS scenario D'

# -------- Scenario E: Security 403 --------
Write-Host "`n== Scenario: SECURITY 403 (missing API key) ==" -ForegroundColor Cyan
$r403 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Body $body -Label 'security-403'
if([int]$r403.StatusCode -ne 403){ throw "Scenario E: expected 403 got $($r403.StatusCode)" }
Write-Host 'PASS scenario E'

# -------- Scenario F: Validation 400 --------
Write-Host "`n== Scenario: VALIDATION 400 (bad payload) ==" -ForegroundColor Cyan
$bad = @{ occurredOn=$day; type='X'; amountCents=100 } | ConvertTo-Json
$r400 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=[guid]::NewGuid().Guid } -Body $bad -Label 'validation-400'
if([int]$r400.StatusCode -ne 400){ throw "Scenario F: expected 400 got $($r400.StatusCode)" }
Write-Host 'PASS scenario F'

# -------- Scenario G: Multiple DEBITs same-day --------
Write-Host "`n== Scenario: MULTIPLE DEBITS (same-day) ==" -ForegroundColor Cyan
$rBaseG = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-G-daily-before'
$baseGObj = $null; try { $baseGObj = $rBaseG.Content | ConvertFrom-Json } catch { $baseGObj = $null }
$baseG = $baseGObj.balanceCents
Post-One 'DEBIT' 300 'gdebit1' 'G-1' | Out-Null
Post-One 'DEBIT' 200 'gdebit2' 'G-2' | Out-Null
$expG = $baseG - 500
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expG -TimeoutSec 30)){ throw 'Scenario G: expected balance not reached' }
$rCurG = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-G-daily-after'
$curGObj = $null; try { $curGObj = $rCurG.Content | ConvertFrom-Json } catch { $curGObj = $null }
$curG = $curGObj.balanceCents
if($curG -ne $expG){ throw "Scenario G: expected $expG got $curG" }
Write-Host 'PASS scenario G'

# -------- Scenario H: Mixed reordered (+500,-200,+400) --------
Write-Host "`n== Scenario: MIX REORDERED (+500,-200,+400) ==" -ForegroundColor Cyan
$rBaseH = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-H-daily-before'
$baseHObj = $null; try { $baseHObj = $rBaseH.Content | ConvertFrom-Json } catch { $baseHObj = $null }
$baseH = $baseHObj.balanceCents
Post-One 'CREDIT' 500 'hcredit1' 'H-1' | Out-Null
Post-One 'DEBIT' 200 'hdebit' 'H-2' | Out-Null
Post-One 'CREDIT' 400 'hcredit2' 'H-3' | Out-Null
$expH = $baseH + 700
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expH -TimeoutSec 30)){ throw 'Scenario H: expected balance not reached' }
$rCurH = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-H-daily-after'
$curHObj = $null; try { $curHObj = $rCurH.Content | ConvertFrom-Json } catch { $curHObj = $null }
$curH = $curHObj.balanceCents
if($curH -ne $expH){ throw "Scenario H: expected $expH got $curH" }
Write-Host 'PASS scenario H'

# -------- Scenario I: Multi-day rebuild invariance --------
Write-Host "`n== Scenario: REBUILD invariance (multi-day) ==" -ForegroundColor Cyan
$rPreYi = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-I-yday-before'
$preYiObj = $null; try { $preYiObj = $rPreYi.Content | ConvertFrom-Json } catch { $preYiObj = $null }
$preYi = $preYiObj.balanceCents
$rPreTi = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-I-today-before'
$preTiObj = $null; try { $preTiObj = $rPreTi.Content | ConvertFrom-Json } catch { $preTiObj = $null }
$preTi = $preTiObj.balanceCents
$rji = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$yday&to=$day" -Headers @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid } -Label 'rebuild-start-yday-to-today'
$ji = $null; try { $ji = $rji.Content | ConvertFrom-Json } catch { $ji = $null }
$jidI = $ji.jobId
for($i=0;$i -lt 60;$i++){ $sti=(Invoke-RestMethod "$Api/consolidator/rebuild/status/$jidI").status; if($sti -in @('COMPLETED','DONE')){ break }; Start-Sleep 1 }
$rYAfterI = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-I-yday-after'
$yAfterIObj = $null; try { $yAfterIObj = $rYAfterI.Content | ConvertFrom-Json } catch { $yAfterIObj = $null }
$yAfterI = $yAfterIObj.balanceCents
$rTAfterI = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-I-today-after'
$tAfterIObj = $null; try { $tAfterIObj = $rTAfterI.Content | ConvertFrom-Json } catch { $tAfterIObj = $null }
$tAfterI = $tAfterIObj.balanceCents
if($yAfterI -ne $preYi -or $tAfterI -ne $preTi){ throw 'Scenario I: balances changed after rebuild' }
Write-Host 'PASS scenario I'

if($Load){
  Write-Host "`n== Micro-load (50 rps, 15s, loss<=5%) ==" -ForegroundColor Cyan
  pwsh -File ops/load.ps1 -Rps 50 -Duration '15s' -MaxLoss 0.05 -Date $day
}

Write-Host "`nOK: testes concluídos" -ForegroundColor Green
Write-Host "`n== SUMMARY ==" -ForegroundColor Green
$Global:Steps |
  Select-Object ts,label,method,url,status,location |
  Format-Table -AutoSize

# Persist summary for CI / local inspection
$Global:Steps | ConvertTo-Json -Depth 15 | Out-File (Join-Path $Global:OutDir 'summary.json') -Encoding utf8
$Global:Steps | Export-Csv -NoTypeInformation (Join-Path $Global:OutDir 'summary.csv')

if(-not $NoTeardown){ Compose down -v | Out-Null }

END CONTENT
-----8<----- END FILE: ops\test-suite.ps1

-----8<----- FILE: ops\test-suite.sh
Size: 13916 bytes
SHA256: F6AA588032CC87BE98041AB8A512E6A2FFA1B2FC26DA04DFEF19DDE60C731281
<<<BEGIN CONTENT
#!/usr/bin/env bash
set -euo pipefail

# -------- Config --------
API="${API:-http://localhost:8080}"
API_KEY="${API_KEY:-admin}"
PROM_PORT="${PROM_PORT:-19090}"
DAY="$(date +%F)"
NO_TEARDOWN=false
VERBOSE=false
DO_LOAD=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-teardown) NO_TEARDOWN=true; shift ;;
    --verbose) VERBOSE=true; shift ;;
    --load) DO_LOAD=true; shift ;;
    *) shift ;;
  esac
done

# Compose command fallback
compose() {
  if docker compose version >/dev/null 2>&1; then docker compose "$@"
  elif docker-compose version >/dev/null 2>&1; then docker-compose "$@"
  else
    echo "ERROR: docker compose not found"; exit 1
  fi
}

uuid() {
  if command -v uuidgen >/dev/null 2>&1; then uuidgen
  else python3 - <<'PY'
import uuid; print(uuid.uuid4())
PY
  fi
}

header() { echo; echo "== $* =="; }

# Health wait using actuator endpoint
wait_health_url() {
  local url="$1"; local timeout="${2:-60}"; local end=$(( SECONDS + timeout ))
  while (( SECONDS < end )); do
    if out=$(curl -sf "$url" 2>/dev/null) && [[ "$out" == *'"status"'*'"UP"'* ]]; then
      return 0
    fi
    sleep 1
  done
  return 1
}

# Balance polling (eventual consistency)
wait_balance_at_least() {
  local api="$1"; local d="$2"; local min="$3"; local timeout="${4:-30}"; local end=$(( SECONDS + timeout ))
  while (( SECONDS < end )); do
    if out=$(curl -sf "$api/balances/daily?date=$d" 2>/dev/null); then
      bal=$(echo "$out" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9]\+\).*/\1/p')
      [[ -z "$bal" ]] && bal=$(echo "$out" | awk '/balanceCents/ {print $1}' | tail -n1)
      if [[ -n "$bal" && "$bal" -ge "$min" ]]; then return 0; fi
    fi
    sleep 1
  done
  return 1
}

# Dump last logs on failure for quick diagnostics
dump_logs() {
  echo "\n== Últimos logs (10m, tail -n 200) =="
  compose ps || true
  for s in postgres rabbitmq ledger-service consolidator-service balance-query-service api-gateway; do
    echo "\n-- $s --"
    compose logs --no-color --since=10m "$s" 2>/dev/null | tail -n 500 || true
  done
}

# Trap any error to print logs and optionally teardown
on_err() {
  dump_logs
  $NO_TEARDOWN || compose down -v || true
  exit 1
}
trap on_err ERR

# -------- Bring up stack --------
header "Subindo stack (PROM_PORT=$PROM_PORT)"
export PROM_PORT
compose down -v
compose up -d --build

header "Serviços"
compose ps

header "Aguardando healthchecks (gateway e serviços)"
wait_health_url "http://localhost:8080/actuator/health" 60 || { echo "FAIL health gateway"; exit 1; }
wait_health_url "http://localhost:8081/actuator/health" 60 || { echo "FAIL health ledger"; exit 1; }
wait_health_url "http://localhost:8082/actuator/health" 60 || { echo "FAIL health consolidator"; exit 1; }
wait_health_url "http://localhost:8083/actuator/health" 60 || { echo "FAIL health balance"; exit 1; }

# -------- Smoke: ledger idempotency --------
IDEM="$(uuid)"
BODY="$(cat <<JSON
{"occurredOn":"$DAY","type":"CREDIT","amountCents":1000,"description":"smoke"}
JSON
)"

header "POST /ledger/entries (espera 201)"
mkdir -p out
echo "$BODY" > out/scenario-A-credit-req.json
H1=$(curl -sS -D - -o out/scenario-A-credit-resp.txt -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM" \
  --data "$BODY")
S1=$(printf "%s" "$H1" | awk 'NR==1{print $2}')
LOC1=$(printf "%s" "$H1" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$S1 location=$LOC1"; [ "$S1" = "201" ] || { echo "FAIL 201"; exit 1; }
[[ "$VERBOSE" == true ]] && { echo "Request headers: Content-Type: application/json, X-API-Key: $API_KEY, Idempotency-Key: $IDEM"; printf '%s\n' "$H1"; cat out/scenario-A-credit-resp.txt; }

# Guard against eventual consistency: wait until balance reflects the write
AMOUNT=1000
header "Aguardando saldo diário refletir $AMOUNT (até 30s)"
wait_balance_at_least "$API" "$DAY" "$AMOUNT" 30 || { echo "FAIL: Daily balance did not reach expected value"; exit 1; }

header "Replay mesma chave (espera 200 e mesma Location)"
H2=$(curl -sS -D - -o out/scenario-A-credit-replay-resp.txt -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM" \
  --data "$BODY")
S2=$(printf "%s" "$H2" | awk 'NR==1{print $2}')
LOC2=$(printf "%s" "$H2" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$S2 location=$LOC2"; [ "$S2" = "200" ] || { echo "FAIL 200"; $NO_TEARDOWN || compose down -v; exit 1; }
[ "$LOC1" = "$LOC2" ] || { echo "FAIL Location mismatch"; $NO_TEARDOWN || compose down -v; exit 1; }
[[ "$VERBOSE" == true ]] && { echo "Request headers: Content-Type: application/json, X-API-Key: $API_KEY, Idempotency-Key: $IDEM"; printf '%s\n' "$H2"; cat out/scenario-A-credit-replay-resp.txt; }

header "GET /balances/daily?date=$DAY (deve refletir 1000)"
B1=$(curl -sS "$API/balances/daily?date=$DAY")
echo "$B1" | sed 's/.*/&/' > out/scenario-A-daily-resp.json
echo "$B1"
BEFORE=$(printf "%s" "$B1" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')

# -------- Rebuild replace-only --------
header "POST /consolidator/rebuild (D..D) -> jobId"
REQID="$(uuid)"
JOB=$(curl -sS -X POST "$API/consolidator/rebuild?from=$DAY&to=$DAY" -H "X-API-Key: $API_KEY" -H "X-Request-Id: $REQID")
echo "$JOB"
JID=$(printf "%s" "$JOB" | sed -n 's/.*"jobId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')

header "Aguardando status COMPLETED/DONE"
for i in $(seq 1 60); do
  ST=$(curl -sS "$API/consolidator/rebuild/status/$JID")
  echo "$ST"
  if echo "$ST" | grep -Eiq '"status"\s*:\s*"(COMPLETED|DONE)"'; then break; fi
  if echo "$ST" | grep -Eiq '"status"\s*:\s*"FAILED"'; then echo "FAIL rebuild"; $NO_TEARDOWN || compose down -v; exit 1; fi
  sleep 1
done

header "GET /balances/daily?date=$DAY (deve permanecer 1000 mesmo após rebuild)"
B2=$(curl -sS "$API/balances/daily?date=$DAY")
echo "$B2"
AFTER=$(printf "%s" "$B2" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
if [[ "$AFTER" != "$BEFORE" ]]; then echo "FAIL: saldo mudou após rebuild ($BEFORE -> $AFTER)"; $NO_TEARDOWN || compose down -v; exit 1; fi

# -------- Scenario A: Basic DEBIT (same-day) --------
header "Scenario: BASIC DEBIT (same-day)"
TODAY_START=$AFTER
AMT_DEBIT=700
IDEM_DA=$(uuid)
BODY_DA="$(cat <<JSON
{"occurredOn":"$DAY","type":"DEBIT","amountCents":$AMT_DEBIT,"description":"debit-smoke"}
JSON
)"
echo "Request:"; echo "$BODY_DA"
HDA1=$(curl -sS -D - -o /dev/null -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM_DA" \
  --data "$BODY_DA")
SDA1=$(printf "%s" "$HDA1" | awk 'NR==1{print $2}')
LDA1=$(printf "%s" "$HDA1" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$SDA1 location=$LDA1"; [ "$SDA1" = "201" ] || { echo "FAIL scenario A (201)"; exit 1; }
HDA2=$(curl -sS -D - -o /dev/null -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM_DA" \
  --data "$BODY_DA")
SDA2=$(printf "%s" "$HDA2" | awk 'NR==1{print $2}')
LDA2=$(printf "%s" "$HDA2" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "replay status=$SDA2 location=$LDA2"; [ "$SDA2" = "200" ] || { echo "FAIL scenario A (200 replay)"; exit 1; }
[ "$LDA1" = "$LDA2" ] || { echo "FAIL scenario A (Location mismatch)"; exit 1; }
EXP_TODAY=$(( TODAY_START - AMT_DEBIT ))
wait_balance_at_least "$API" "$DAY" "$EXP_TODAY" 30 || { echo "FAIL scenario A (did not reach expected balance)"; exit 1; }
TODAY_AFTER_A=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$TODAY_AFTER_A" = "$EXP_TODAY" ] || { echo "FAIL scenario A (expected $EXP_TODAY, got $TODAY_AFTER_A)"; exit 1; }
echo "PASS scenario A"

# -------- Scenario B: Mixed same-day (2x CREDIT, 1x DEBIT) --------
header "Scenario: MIXED same-day (+500,+400,-200)"
BASE_B=$TODAY_AFTER_A
post_entry() { local body="$1"; local key=$(uuid); curl -sS -o /dev/null -w "%{http_code}" -D /dev/null -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $key" --data "$body"; }
BODY_C1='{"occurredOn":"'"$DAY"'","type":"CREDIT","amountCents":500,"description":"mix1"}'
BODY_C2='{"occurredOn":"'"$DAY"'","type":"CREDIT","amountCents":400,"description":"mix2"}'
BODY_D1='{"occurredOn":"'"$DAY"'","type":"DEBIT","amountCents":200,"description":"mix3"}'
post_entry "$BODY_C1" >/dev/null
post_entry "$BODY_C2" >/dev/null
post_entry "$BODY_D1" >/dev/null
EXP_B=$(( BASE_B + 700 ))
wait_balance_at_least "$API" "$DAY" "$EXP_B" 30 || { echo "FAIL scenario B (did not reach expected)"; exit 1; }
CUR_B=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$CUR_B" = "$EXP_B" ] || { echo "FAIL scenario B (expected $EXP_B got $CUR_B)"; exit 1; }
echo "PASS scenario B"

# -------- Scenario C: Multi-day (yesterday + today) --------
header "Scenario: MULTI-DAY (yesterday + today)"
YDAY=$(python3 - <<'PY'
import datetime;print((datetime.date.today()-datetime.timedelta(days=1)).strftime('%Y-%m-%d'))
PY
)
Y0=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p'); Y0=${Y0:-0}
T0=$CUR_B
BODY_YC='{"occurredOn":"'"$YDAY"'","type":"CREDIT","amountCents":300,"description":"ycredit"}'
BODY_TD='{"occurredOn":"'"$DAY"'","type":"DEBIT","amountCents":100,"description":"tdebit"}'
post_entry "$BODY_YC" >/dev/null
post_entry "$BODY_TD" >/dev/null
EXP_Y=$(( Y0 + 300 ))
wait_balance_at_least "$API" "$YDAY" "$EXP_Y" 30 || { echo "FAIL scenario C (yesterday not reached)"; exit 1; }
EXP_T=$(( T0 - 100 ))
wait_balance_at_least "$API" "$DAY" "$EXP_T" 30 || { echo "FAIL scenario C (today not reached)"; exit 1; }
Y_NOW=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
T_NOW=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$Y_NOW" = "$EXP_Y" ] && [ "$T_NOW" = "$EXP_T" ] || { echo "FAIL scenario C (expected Y=$EXP_Y,T=$EXP_T got Y=$Y_NOW,T=$T_NOW)"; exit 1; }
echo "PASS scenario C"

# -------- Scenario D: Rebuild invariance (yesterday..today) --------
header "Scenario: REBUILD invariance (yesterday..today)"
PRE_Y=$Y_NOW; PRE_T=$T_NOW
REQID2=$(uuid)
JOB2=$(curl -sS -X POST "$API/consolidator/rebuild?from=$YDAY&to=$DAY" -H "X-API-Key: $API_KEY" -H "X-Request-Id: $REQID2")
JID2=$(printf "%s" "$JOB2" | sed -n 's/.*"jobId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
for i in $(seq 1 60); do ST2=$(curl -sS "$API/consolidator/rebuild/status/$JID2"); echo "$ST2"; echo "$ST2" | grep -Eiq '"status"\s*:\s*"(COMPLETED|DONE)"' && break; sleep 1; done
Y_AFTER=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
T_AFTER=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$Y_AFTER" = "$PRE_Y" ] && [ "$T_AFTER" = "$PRE_T" ] || { echo "FAIL scenario D (balances changed after rebuild)"; exit 1; }
echo "PASS scenario D"

# -------- Scenario E: Security 403 --------
header "Scenario: SECURITY 403 (missing API key)"
code=$(curl -sS -o /dev/null -w "%{http_code}" -X POST "$API/ledger/entries" -H "Content-Type: application/json" --data "$BODY")
[ "$VERBOSE" == true ] && echo "POST without key body: $BODY"
[ "$code" = "403" ] || { echo "FAIL scenario E (expected 403 got $code)"; exit 1; }
echo "PASS scenario E"

# -------- Scenario F: Validation 400 --------
header "Scenario: VALIDATION 400 (bad payload)"
BAD='{"occurredOn":"'"$DAY"'","type":"X","amountCents":100}'
echo "$BAD" > out/scenario-F-bad-req.json
code=$(curl -sS -o /dev/null -w "%{http_code}" -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BAD")
[ "$code" = "400" ] || { echo "FAIL scenario F (expected 400 got $code)"; exit 1; }
echo "PASS scenario F"

if [[ "$DO_LOAD" == true ]]; then
  header "Micro-load (50 rps, 15s, max-loss 5%)"
  bash ops/load.sh --rps 50 --duration 15s --max-loss 0.05 --date "$DAY"
fi

header "OK: testes concluídos"
$NO_TEARDOWN || compose down -v
echo "$BODY_DA" > out/scenario-A-debit-req.json
HDA1=$(curl -sS -D - -o out/scenario-A-debit-resp.txt -X POST "$API/ledger/entries" \
HDA2=$(curl -sS -D - -o out/scenario-A-debit-replay-resp.txt -X POST "$API/ledger/entries" \
echo "PASS scenario A"
echo "$BODY_C1" > out/scenario-B-1-req.json; echo "$BODY_C2" > out/scenario-B-2-req.json; echo "$BODY_D1" > out/scenario-B-3-req.json
curl -sS -D - -o out/scenario-B-1-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_C1" >/dev/null
curl -sS -D - -o out/scenario-B-2-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_C2" >/dev/null
curl -sS -D - -o out/scenario-B-3-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_D1" >/dev/null
echo "PASS scenario B"
echo "$BODY_YC" > out/scenario-C-ycredit-req.json
echo "$BODY_TD" > out/scenario-C-tdebit-req.json
curl -sS -D - -o out/scenario-C-ycredit-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_YC" >/dev/null
curl -sS -D - -o out/scenario-C-tdebit-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_TD" >/dev/null
echo "$JOB2" | sed 's/.*/&/' > out/scenario-D-rebuild-resp.json

END CONTENT
-----8<----- END FILE: ops\test-suite.sh

-----8<----- FILE: pom.xml
Size: 8854 bytes
SHA256: E69EF0B340AFFEE5D4AA1C3B3029D7BCA6B67AAFB922596827A5D212EB7B0CDC
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cashflowchallenge</groupId>
    <artifactId>cashflow-challenge</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Cashflow Challenge</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring-cloud.version>2023.0.3</spring-cloud.version>
        <maven.compiler.release>17</maven.compiler.release>
        <!-- Align Flyway across modules to support PostgreSQL 16.10 -->
        <flyway.version>10.17.3</flyway.version>
        <!-- Default: skip ITs locally; tester/CI sets -DskipITs=false -->
        <skipITs>true</skipITs>
        <project.build.outputTimestamp>${maven.build.timestamp}</project.build.outputTimestamp>
    </properties>

    <modules>
        <module>api-gateway</module>
        <module>ledger-service</module>
        <module>consolidator-service</module>
        <module>balance-query-service</module>
        <module>it-tests</module>
    </modules>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${flyway.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <release>${maven.compiler.release}</release>
                        <showWarnings>true</showWarnings>
                        <failOnWarning>true</failOnWarning>
                        <compilerArgs>
                            <arg>-Xlint:all</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.2.5</version>
                    <configuration>
                        <useModulePath>false</useModulePath>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.4.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireJavaVersion>
                                        <version>[17,)</version>
                                    </requireJavaVersion>
                                    <banDuplicatePomDependencyVersions/>
                                    <requireReleaseDeps/>
                                </rules>
                                <fail>true</fail>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>[17,)</version>
                                </requireJavaVersion>
                                <banDuplicatePomDependencyVersions/>
                                <requireReleaseDeps/>
                                <requireMavenVersion>
                                    <version>[3.9,)</version>
                                </requireMavenVersion>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.12</version>
                <executions>
                    <execution>
                        <goals><goal>prepare-agent</goal></goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals><goal>report</goal></goals>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <exclude>**/dto/**</exclude>
                        <exclude>**/config/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.cyclonedx</groupId>
                <artifactId>cyclonedx-maven-plugin</artifactId>
                <version>2.7.10</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals><goal>makeAggregateBom</goal></goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>10.0.4</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals><goal>check</goal></goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals><goal>analyze</goal></goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>4.9.10</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>ci</id>
            <properties>
                <skipITs>false</skipITs>
            </properties>
        </profile>
    </profiles>

</project>

END CONTENT
-----8<----- END FILE: pom.xml

-----8<----- FILE: project-dump.txt
Size: 23929 bytes
SHA256: 26FCB35245B4710B3F174036F97ED3188912F34406A7E7C50FC0102FA02FCBEA
<<<BEGIN CONTENT


================================================================================
=  PROJECT DUMP — HEADER
================================================================================
Timestamp       : 2025-09-29 18:33:06 -03:00
Root            : C:\Users\leand\teste\banco-carrefour
PowerShell      : 7.5.3
OS              : Microsoft Windows NT 10.0.26100.0
IncludeBinary   : False

================================================================================
=  TREE (ASCII)
================================================================================
Folder PATH listing
Volume serial number is C48B-9891
C:.
|   .editorconfig
|   .env
|   .env.example
|   .gitattributes
|   .gitignore
|   docker-compose.yml
|   make-project-dump.ps1
|   Makefile
|   pom.xml
|   project-dump.txt
|   README.md
|   
+---.github
|   \---workflows
|           test.yml
|           
+---api-gateway
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   \---main
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---gateway
|   |       |               |   ApiGatewayApplication.java
|   |       |               |   
|   |       |               +---config
|   |       |               |       CorsConfig.java
|   |       |               |       
|   |       |               +---filters
|   |       |               |       ApiKeyWriteGuardFilter.java
|   |       |               |       RateLimitFilter.java
|   |       |               |       RequestIdFilter.java
|   |       |               |       
|   |       |               \---web
|   |       |                       FallbackController.java
|   |       |                       GlobalExceptionHandler.java
|   |       |                       
|   |       \---resources
|   |               application.yml
|   |               
|   \---target
|       |   api-gateway-0.1.0-SNAPSHOT.jar
|       |   api-gateway-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   
|       |   \---com
|       |       \---cashflowchallenge
|       |           \---gateway
|       |               |   ApiGatewayApplication.class
|       |               |   
|       |               +---filters
|       |               |       ApiKeyWriteGuardFilter.class
|       |               |       RateLimitFilter.class
|       |               |       RequestIdFilter.class
|       |               |       
|       |               \---web
|       |                       FallbackController.class
|       |                       GlobalExceptionHandler.class
|       |                       
|       +---generated-sources
|       |   \---annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       \---maven-status
|           \---maven-compiler-plugin
|               \---compile
|                   \---default-compile
|                           createdFiles.lst
|                           inputFiles.lst
|                           
+---balance-query-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---query
|   |   |   |               |   BalanceQueryApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |   |   BalanceController.java
|   |   |   |               |   |   
|   |   |   |               |   \---dto
|   |   |   |               |           BalancePoint.java
|   |   |   |               |           
|   |   |   |               +---domain
|   |   |   |               |       DailyBalance.java
|   |   |   |               |       
|   |   |   |               +---infrastructure
|   |   |   |               |   +---repository
|   |   |   |               |   |       DailyBalanceRepository.java
|   |   |   |               |   |       
|   |   |   |               |   +---security
|   |   |   |               |   |       RequestIdFilter.java
|   |   |   |               |   |       
|   |   |   |               |   \---web
|   |   |   |               |           CorsConfig.java
|   |   |   |               |           GlobalExceptionHandler.java
|   |   |   |               |           
|   |   |   |               \---web
|   |   |   \---resources
|   |   |           application.yml
|   |   |           logback-spring.xml
|   |   |           
|   |   \---test
|   |       \---java
|   |           \---com
|   |               \---cashflowchallenge
|   |                   \---query
|   |                       \---api
|   \---target
|       |   balance-query-service-0.1.0-SNAPSHOT.jar
|       |   balance-query-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   \---com
|       |       \---cashflowchallenge
|       |           \---query
|       |               |   BalanceQueryApplication.class
|       |               |   
|       |               +---api
|       |               |       BalanceController.class
|       |               |       
|       |               +---domain
|       |               |       DailyBalance.class
|       |               |       
|       |               \---infrastructure
|       |                   +---repository
|       |                   |       DailyBalanceRepository.class
|       |                   |       
|       |                   +---security
|       |                   |       RequestIdFilter.class
|       |                   |       
|       |                   \---web
|       |                           GlobalExceptionHandler.class
|       |                           
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       \---test-classes
+---consolidator-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---consolidator
|   |   |   |               |   ConsolidatorApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |       RebuildController.java
|   |   |   |               |       
|   |   |   |               +---application
|   |   |   |               |       BalanceApplicationService.java
|   |   |   |               |       RebuildService.java
|   |   |   |               |       
|   |   |   |               +---domain
|   |   |   |               |       DailyBalance.java
|   |   |   |               |       
|   |   |   |               +---infrastructure
|   |   |   |               |   +---messaging
|   |   |   |               |   |       LedgerEventConsumer.java
|   |   |   |               |   |       RabbitConfig.java
|   |   |   |               |   |       
|   |   |   |               |   +---repository
|   |   |   |               |   |       DailyBalanceRepository.java
|   |   |   |               |   |       ProcessedEventRepository.java
|   |   |   |               |   |       
|   |   |   |               |   +---security
|   |   |   |               |   |       ApiKeyFilter.java
|   |   |   |               |   |       RequestIdFilter.java
|   |   |   |               |   |       
|   |   |   |               |   \---web
|   |   |   |               |           CorsConfig.java
|   |   |   |               |           GlobalExceptionHandler.java
|   |   |   |               |           
|   |   |   |               \---web
|   |   |   \---resources
|   |   |       |   application.yml
|   |   |       |   logback-spring.xml
|   |   |       |   
|   |   |       \---db
|   |   |           \---migration
|   |   |                   V1__init.sql
|   |   |                   V2__indexes.sql
|   |   |                   V3__drop_redundant_idx.sql
|   |   |                   V4__processed_events.sql
|   |   |                   V5__report_guards.sql
|   |   |                   
|   |   \---test
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---consolidator
|   |       |               +---it
|   |       |               |       DoubleDeliveryIT.java
|   |       |               |       
|   |       |               \---repo
|   |       |                       DailyBalanceRepositoryIT.java
|   |       |                       
|   |       \---resources
|   |               application-it.yml
|   |               
|   \---target
|       |   consolidator-service-0.1.0-SNAPSHOT.jar
|       |   consolidator-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   +---com
|       |   |   \---cashflowchallenge
|       |   |       \---consolidator
|       |   |           |   ConsolidatorApplication.class
|       |   |           |   
|       |   |           +---api
|       |   |           |       RebuildController.class
|       |   |           |       
|       |   |           +---domain
|       |   |           |       DailyBalance.class
|       |   |           |       
|       |   |           \---infrastructure
|       |   |               +---messaging
|       |   |               |       LedgerEventConsumer.class
|       |   |               |       RabbitConfig.class
|       |   |               |       
|       |   |               +---repository
|       |   |               |       DailyBalanceRepository.class
|       |   |               |       
|       |   |               +---security
|       |   |               |       ApiKeyFilter.class
|       |   |               |       RequestIdFilter.class
|       |   |               |       
|       |   |               \---web
|       |   |                       GlobalExceptionHandler.class
|       |   |                       
|       |   \---db
|       |       \---migration
|       |               V1__init.sql
|       |               V2__indexes.sql
|       |               V3__drop_redundant_idx.sql
|       |               V4__processed_events.sql
|       |               V5__report_guards.sql
|       |               
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       com.cashflowchallenge.consolidator.repo.DailyBalanceRepositoryTest.txt
|       |       TEST-com.cashflowchallenge.consolidator.repo.DailyBalanceRepositoryTest.xml
|       |       
|       \---test-classes
|           |   application-it.yml
|           |   
|           \---com
|               \---cashflowchallenge
|                   \---consolidator
|                       +---it
|                       |       DoubleDeliveryIT.class
|                       |       
|                       \---repo
|                               DailyBalanceRepositoryIT.class
|                               
+---docs
|   |   CHECKLIST-REQUISITOS.md
|   |   TESTES.md
|   |   
|   +---adr
|   |       ADR-001-microservices-ddd-outbox.md
|   |       ADR-002-rabbitmq-vs-kafka.md
|   |       ADR-003-rate-limiting-gateway.md
|   |       ADR-004-idempotency-and-outbox.md
|   |       
|   \---diagrams
|           c4-container.mmd
|           c4-context.mmd
|           sequence-entry-to-balance.mmd
|           
+---it-tests
|   |   pom.xml
|   |   
|   +---src
|   |   \---test
|   |       \---java
|   |           \---com
|   |               \---cashflowchallenge
|   |                   \---it
|   |                           DuplicateIdempotencyIT.java
|   |                           LedgerFlowIT.java
|   |                           
|   \---target
|       |   it-tests-0.1.0-SNAPSHOT.jar
|       |   
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       com.cashflowchallenge.it.LedgerFlowIT.txt
|       |       TEST-com.cashflowchallenge.it.LedgerFlowIT.xml
|       |       
|       \---test-classes
|           \---com
|               \---cashflowchallenge
|                   \---it
|                           LedgerFlowIT.class
|                           
+---ledger-service
|   |   docker-entrypoint.sh
|   |   Dockerfile
|   |   pom.xml
|   |   
|   +---src
|   |   +---main
|   |   |   +---java
|   |   |   |   \---com
|   |   |   |       \---cashflowchallenge
|   |   |   |           \---ledger
|   |   |   |               |   LedgerApplication.java
|   |   |   |               |   
|   |   |   |               +---api
|   |   |   |               |   |   LedgerController.java
|   |   |   |               |   |   
|   |   |   |               |   \---dto
|   |   |   |               |           LedgerEntryRequest.java
|   |   |   |               |           LedgerEntryResponse.java
|   |   |   |               |           
|   |   |   |               +---application
|   |   |   |               |       RecordEntryService.java
|   |   |   |               |       
|   |   |   |               +---domain
|   |   |   |               |       Entry.java
|   |   |   |               |       EntryType.java
|   |   |   |               |       OutboxEvent.java
|   |   |   |               |       
|   |   |   |               \---infrastructure
|   |   |   |                   +---config
|   |   |   |                   |       JdbcConfig.java
|   |   |   |                   |       
|   |   |   |                   +---messaging
|   |   |   |                   |       OutboxDrainScheduler.java
|   |   |   |                   |       OutboxPublisher.java
|   |   |   |                   |       RabbitConfig.java
|   |   |   |                   |       
|   |   |   |                   +---repository
|   |   |   |                   |       EntryRepository.java
|   |   |   |                   |       OutboxRepository.java
|   |   |   |                   |       
|   |   |   |                   +---security
|   |   |   |                   |       ApiKeyFilter.java
|   |   |   |                   |       RequestIdFilter.java
|   |   |   |                   |       
|   |   |   |                   \---web
|   |   |   |                           CorsConfig.java
|   |   |   |                           GlobalExceptionHandler.java
|   |   |   |                           
|   |   |   \---resources
|   |   |       |   application.yml
|   |   |       |   logback-spring.xml
|   |   |       |   
|   |   |       \---db
|   |   |           \---migration
|   |   |                   V1__init.sql
|   |   |                   V2__indexes.sql
|   |   |                   V3__ledger_constraints.sql
|   |   |                   V4__outbox_state.sql
|   |   |                   V5__ledger_amount_and_enum_guards.sql
|   |   |                   V6__ledger_indexes_more.sql
|   |   |                   V7__maintenance_views.sql
|   |   |                   V8__outbox_poison_flag.sql
|   |   |                   
|   |   \---test
|   |       +---java
|   |       |   \---com
|   |       |       \---cashflowchallenge
|   |       |           \---ledger
|   |       |               +---api
|   |       |               |       LedgerIdempotencyIT.java
|   |       |               |       
|   |       |               +---domain
|   |       |               |       EntryTypeTest.java
|   |       |               |       
|   |       |               +---infra
|   |       |               |       JpaOutboxIT.java
|   |       |               |       
|   |       |               \---infrastructure
|   |       |                   \---messaging
|   |       |                           OutboxPublisherCorrelationIdTest.java
|   |       |                           OutboxPublisherReturnThenAckTest.java
|   |       |                           
|   |       \---resources
|   |               application-it.yml
|   |               
|   \---target
|       |   ledger-service-0.1.0-SNAPSHOT.jar
|       |   ledger-service-0.1.0-SNAPSHOT.jar.original
|       |   
|       +---classes
|       |   |   application.yml
|       |   |   logback-spring.xml
|       |   |   
|       |   +---com
|       |   |   \---cashflowchallenge
|       |   |       \---ledger
|       |   |           |   LedgerApplication.class
|       |   |           |   
|       |   |           +---api
|       |   |           |   |   LedgerController.class
|       |   |           |   |   
|       |   |           |   \---dto
|       |   |           |           LedgerEntryRequest.class
|       |   |           |           LedgerEntryResponse.class
|       |   |           |           
|       |   |           +---application
|       |   |           |       RecordEntryService$Result.class
|       |   |           |       RecordEntryService.class
|       |   |           |       
|       |   |           +---domain
|       |   |           |       Entry.class
|       |   |           |       EntryType.class
|       |   |           |       OutboxEvent.class
|       |   |           |       
|       |   |           \---infrastructure
|       |   |               +---config
|       |   |               |       JdbcConfig.class
|       |   |               |       
|       |   |               +---messaging
|       |   |               |       OutboxDrainScheduler.class
|       |   |               |       OutboxPublisher.class
|       |   |               |       RabbitConfig.class
|       |   |               |       
|       |   |               +---repository
|       |   |               |       EntryRepository.class
|       |   |               |       OutboxRepository.class
|       |   |               |       
|       |   |               +---security
|       |   |               |       ApiKeyFilter.class
|       |   |               |       RequestIdFilter.class
|       |   |               |       
|       |   |               \---web
|       |   |                       GlobalExceptionHandler.class
|       |   |                       
|       |   \---db
|       |       \---migration
|       |               V1__init.sql
|       |               V2__indexes.sql
|       |               V3__ledger_constraints.sql
|       |               V4__outbox_state.sql
|       |               V5__ledger_amount_and_enum_guards.sql
|       |               V6__ledger_indexes_more.sql
|       |               V7__maintenance_views.sql
|       |               V8__outbox_poison_flag.sql
|       |               
|       +---generated-sources
|       |   \---annotations
|       +---generated-test-sources
|       |   \---test-annotations
|       +---maven-archiver
|       |       pom.properties
|       |       
|       +---maven-status
|       |   \---maven-compiler-plugin
|       |       +---compile
|       |       |   \---default-compile
|       |       |           createdFiles.lst
|       |       |           inputFiles.lst
|       |       |           
|       |       \---testCompile
|       |           \---default-testCompile
|       |                   createdFiles.lst
|       |                   inputFiles.lst
|       |                   
|       +---surefire-reports
|       |       2025-09-27T23-54-32_542-jvmRun2.dump
|       |       2025-09-27T23-54-32_542-jvmRun2.dumpstream
|       |       com.cashflowchallenge.ledger.domain.EntryTypeTest.txt
|       |       com.cashflowchallenge.ledger.infra.JpaOutboxTest.txt
|       |       com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherCorrelationIdTest.txt
|       |       com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherReturnThenAckTest.txt
|       |       TEST-com.cashflowchallenge.ledger.domain.EntryTypeTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infra.JpaOutboxTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherCorrelationIdTest.xml
|       |       TEST-com.cashflowchallenge.ledger.infrastructure.messaging.OutboxPublisherReturnThenAckTest.xml
|       |       
|       \---test-classes
|           |   application-it.yml
|           |   
|           \---com
|               \---cashflowchallenge
|                   \---ledger
|                       +---api
|                       |       LedgerIdempotencyIT$1.class
|                       |       LedgerIdempotencyIT.class
|                       |       
|                       +---domain
|                       |       EntryTypeTest.class
|                       |       
|                       +---infra
|                       |       JpaOutboxIT.class
|                       |       
|                       \---infrastructure
|                           \---messaging
|                                   OutboxPublisherCorrelationIdTest.class
|                                   OutboxPublisherReturnThenAckTest.class
|                                   
+---ops
|   |   load.ps1
|   |   load.sh
|   |   requests.http
|   |   test-suite.ps1
|   |   test-suite.sh
|   |   
|   +---grafana
|   |   \---provisioning
|   |       +---dashboards
|   |       |       dashboard.yml
|   |       |       spring-dashboard.json
|   |       |       
|   |       \---datasources
|   |               datasource.yml
|   |               
|   \---prometheus
|           prometheus.yml
|           rules.yml
|           
+---out
|       scenario-A-credit-replay-resp.txt
|       scenario-A-credit-req.json
|       scenario-A-credit-resp.txt
|       scenario-A-daily-resp.json
|       scenario-A-debit-replay-resp.txt
|       scenario-A-debit-req.json
|       scenario-A-debit-resp.txt
|       
+---secrets
\---target
    \---classes
        \---META-INF
            \---sbom
                    application.cdx.json
                    

================================================================================
=  FILE LIST (filtered)
================================================================================
.editorconfig
.env
.env.example
.gitattributes
.github\workflows\test.yml
.gitignore
api-gateway\docker-entrypoint.sh
api-gateway\Dockerfile
api-gateway\pom.xml
api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java
api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java
api-gateway\src\main\resources\application.yml
balance-query-service\docker-entrypoint.sh
balance-query-service\Dockerfile
balance-query-service\pom.xml
balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java
balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java
balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java
balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java
balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java
balance-query-service\src\main\resources\application.yml
balance-query-service\src\main\resources\logback-spring.xml
consolidator-service\docker-entrypoint.sh
consolidator-service\Dockerfile
consolidator-service\pom.xml
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java
consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java
consolidator-service\src\main\resources\application.yml
consolidator-service\src\main\resources\db\migration\V1__init.sql
consolidator-service\src\main\resources\db\migration\V2__indexes.sql
consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql
consolidator-service\src\main\resources\db\migration\V4__processed_events.sql
consolidator-service\src\main\resources\db\migration\V5__report_guards.sql
consolidator-service\src\main\resources\logback-spring.xml
consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java
consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java
consolidator-service\src\test\resources\application-it.yml
docker-compose.yml
docs\adr\ADR-001-microservices-ddd-outbox.md
docs\adr\ADR-002-rabbitmq-vs-kafka.md
docs\adr\ADR-003-rate-limiting-gateway.md
docs\adr\ADR-004-idempotency-and-outbox.md
docs\CHECKLIST-REQUISITOS.md
docs\diagrams\c4-container.mmd
docs\diagrams\c4-context.mmd
docs\diagrams\sequence-entry-to-balance.mmd
docs\TESTES.md
it-tests\pom.xml
it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java
it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java
ledger-service\docker-entrypoint.sh
ledger-service\Dockerfile
ledger-service\pom.xml
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java
ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java
ledger-service\src\main\resources\application.yml
ledger-service\src\main\resources\db\migration\V1__init.sql
ledger-service\src\main\resources\db\migration\V2__indexes.sql
ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql
ledger-service\src\main\resources\db\migration\V4__outbox_state.sql
ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql
ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql
ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql
ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql
ledger-service\src\main\resources\logback-spring.xml
ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java
ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java
ledger-service\src\test\resources\application-it.yml
make-project-dump.ps1
Makefile
ops\grafana\provisioning\dashboards\dashboard.yml
ops\grafana\provisioning\dashboards\spring-dashboard.json
ops\grafana\provisioning\datasources\datasource.yml
ops\load.ps1
ops\load.sh
ops\prometheus\prometheus.yml
ops\prometheus\rules.yml
ops\requests.http
ops\test-suite.ps1
ops\test-suite.sh
pom.xml
project-dump.txt
README.md

Total files (after filters): 121

================================================================================
=  FILE CONTENTS
================================================================================
-----8<----- FILE: .editorconfig
Size: 174 bytes
SHA256: 81DE46492BB53CA8FB00FE22158EC1B8AB7A27225DC711062F44B3D99EA43864
<<<BEGIN CONTENT
root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.java]
indent_size = 2


END CONTENT
-----8<----- END FILE: .editorconfig

-----8<----- FILE: .env
Size: 196 bytes
SHA256: 6977E55B3CC1939B8B25D694E72F5C16D9E8A794DF11E09289D004024EF196EE
<<<BEGIN CONTENT
POSTGRES_DB=app
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

SPRING_RABBITMQ_HOST=rabbitmq
SPRING_RABBITMQ_PORT=5672
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app

API_KEY=admin

END CONTENT
-----8<----- END FILE: .env

-----8<----- FILE: .env.example
Size: 444 bytes
SHA256: D3E120DB6A168BE3A2A6F4D5820D2B295DAB29964DBED86E3F2C9EEE484CC5A8
<<<BEGIN CONTENT
POSTGRES_DB=app
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

SPRING_RABBITMQ_HOST=rabbitmq
SPRING_RABBITMQ_PORT=5672
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app

API_KEY=admin
GATEWAY_RPS_LIMIT=50
GATEWAY_RPS_PATHS=/balances/*,/ledger/*

PROM_PORT=19090

# RabbitMQ (optional overrides)
SPRING_RABBITMQ_USERNAME=app
SPRING_RABBITMQ_PASSWORD=app
RABBITMQ_ERLANG_COOKIE=dev-cookie
# RABBITMQ_IMAGE=rabbitmq:3.12.15-management

END CONTENT
-----8<----- END FILE: .env.example

-----8<----- FILE: .gitattributes
Size: 37 bytes
SHA256: E9794C19E7631CD29B9FD50EE6B2ED1740F8CBCC2349F93A3CB5991E28878D6F
<<<BEGIN CONTENT
*.sh text eol=lf
*.ps1 text eol=crlf

END CONTENT
-----8<----- END FILE: .gitattributes

-----8<----- FILE: .github\workflows\test.yml
Size: 1502 bytes
SHA256: 9F61DBA2CC7411582E919644B02B80F54630349369955BC31C3868260EF39376
<<<BEGIN CONTENT
name: E2E Tests

on:
  push:
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'
      - name: Build (skip tests)
        run: mvn -q -DskipTests=true package
      - name: Compose up
        run: docker compose up -d --build
      - name: Run test suite (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: bash ops/test-suite.sh --no-teardown --load
      - name: Run test suite (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -NoTeardown -Load
      - name: Upload request/response evidence
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evidencias-requests-${{ matrix.os }}
          path: out
      - name: Export logs on failure
        if: failure()
        run: |
          mkdir -p out
          docker compose ps > out/compose-ps.txt || true
          docker compose logs --no-color --since=10m > out/compose-logs.txt || true
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs-${{ matrix.os }}
          path: |
            out/compose-ps.txt
            out/compose-logs.txt

END CONTENT
-----8<----- END FILE: .github\workflows\test.yml

-----8<----- FILE: .gitignore
Size: 233 bytes
SHA256: D344615426D8D79E49B9A7A6D62641EC9BC264EE2B2D70B691AC13A65F467C2E
<<<BEGIN CONTENT
# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
release.properties

# IDEs
.idea/
*.iml
.project
.classpath
.settings/
.vscode/

# OS
.DS_Store
Thumbs.db

# Logs / Outputs
logs/
out/
.env

# Docker
.docker/


END CONTENT
-----8<----- END FILE: .gitignore

-----8<----- FILE: api-gateway\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: api-gateway\docker-entrypoint.sh

-----8<----- FILE: api-gateway\Dockerfile
Size: 883 bytes
SHA256: F3493E07F560195D4D28FE61B17F5F5FF885993265045D223F405362605EB03F
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \ 
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/api-gateway-*.jar app.jar
EXPOSE 8080
USER root
RUN chmod 0755 /usr/bin && true
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && chown appuser:appuser /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: api-gateway\Dockerfile

-----8<----- FILE: api-gateway\pom.xml
Size: 4605 bytes
SHA256: 24A7B8397A05FCC1190C3B791B94244C6CDC6DF674F2C2B64EF9438EDAFF72C2
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>api-gateway</artifactId>
  <name>api-gateway</name>
  <version>0.1.0-SNAPSHOT</version>

  <properties>
    <spring-cloud.version>2023.0.3</spring-cloud.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-gateway</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>false</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: api-gateway\pom.xml

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java
Size: 333 bytes
SHA256: 19C0B60AC24A33C3372B07FE0FA4C6884E2DDE434E458DF8ACDB211B39617ABD
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiGatewayApplication {
  public static void main(String[] args) {
    SpringApplication.run(ApiGatewayApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\ApiGatewayApplication.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java
Size: 1257 bytes
SHA256: 3D4D411FFDE2FE3EEEC972FDF2E170BD00CF380DA649C02BA2688E60183671FF
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsWebFilter;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsWebFilter corsWebFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsWebFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\config\CorsConfig.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java
Size: 1501 bytes
SHA256: 1F61BADFFF9B358E5C4F041B79E26A828681FF9ADD64053B7F3EC6FCCE2BE385
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class ApiKeyWriteGuardFilter implements GlobalFilter, Ordered {
  private final String apiKey;
  public ApiKeyWriteGuardFilter(@Value("${api.key:}") String apiKey) {
    this.apiKey = apiKey;
  }

  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    if (apiKey == null || apiKey.isBlank()) return chain.filter(exchange);
    String path = exchange.getRequest().getPath().value();
    boolean isWrite = exchange.getRequest().getMethod() == HttpMethod.POST;
    boolean protectedPath = path.startsWith("/ledger/") || path.startsWith("/consolidator/");
    if (isWrite && protectedPath) {
      String provided = exchange.getRequest().getHeaders().getFirst("X-API-Key");
      if (provided == null || !provided.equals(apiKey)) {
        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
        return exchange.getResponse().setComplete();
      }
    }
    return chain.filter(exchange);
  }

  @Override
  public int getOrder() { return -10; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\ApiKeyWriteGuardFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java
Size: 2980 bytes
SHA256: D43850EB3ADD2EAD7074DF35CABC0480773591CEECECC1234E20028F114BA209
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.time.Instant;
import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@Component
public class RateLimitFilter implements GlobalFilter, Ordered {
  private final int limitPerSecond;
  private final String[] pathPrefixes;
  private final Map<String, AtomicInteger> counters = new ConcurrentHashMap<>();
  private volatile long windowEpochSecond = Instant.now().getEpochSecond();

  private final MeterRegistry registry;

  public RateLimitFilter(MeterRegistry registry,
                         @Value("${gateway.rps.limit:50}") int limitPerSecond,
                         @Value("${gateway.rps.paths:/balances/*,/ledger/*}") String paths) {
    this.registry = registry;
    this.limitPerSecond = limitPerSecond;
    this.pathPrefixes = Arrays.stream(paths.split(","))
        .map(String::trim)
        .filter(s -> !s.isBlank())
        .map(s -> s.replace("*", ""))
        .map(s -> s.endsWith("/") ? s : s + "/")
        .toArray(String[]::new);
    for (String p : this.pathPrefixes) counters.put(p, new AtomicInteger(0));
  }

  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    String path = exchange.getRequest().getPath().value();
    String key = matchPrefix(path);
    if (key == null) return chain.filter(exchange);
    long nowSec = Instant.now().getEpochSecond();
    if (nowSec != windowEpochSecond) {
      windowEpochSecond = nowSec;
      counters.values().forEach(c -> c.set(0));
    }
    int current = counters.get(key).incrementAndGet();
    if (current > limitPerSecond) {
      Counter.builder("gateway_ratelimit_rejected_total")
          .tag("path", key)
          .tag("application", "api-gateway")
          .register(registry)
          .increment();
      exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);
      exchange.getResponse().getHeaders().set("Retry-After", "1");
      return exchange.getResponse().setComplete();
    }
    Counter.builder("gateway_ratelimit_allowed_total")
        .tag("path", key)
        .tag("application", "api-gateway")
        .register(registry)
        .increment();
    return chain.filter(exchange);
  }

  private String matchPrefix(String path) {
    for (String p : pathPrefixes) {
      if (path.startsWith(p)) return p;
    }
    return null;
  }

  @Override
  public int getOrder() { return -50; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RateLimitFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java
Size: 1302 bytes
SHA256: E56970006F5CAA9B256D2488F3F5C645063D01A3BB8E2EFAAAA84AC942AF964E
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.filters;

import org.slf4j.MDC;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.UUID;

@Component
public class RequestIdFilter implements GlobalFilter, Ordered {
  @Override
  public Mono<Void> filter(ServerWebExchange exchange, org.springframework.cloud.gateway.filter.GatewayFilterChain chain) {
    String rid = exchange.getRequest().getHeaders().getFirst("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    ServerHttpResponse response = exchange.getResponse();
    response.getHeaders().set("X-Request-Id", rid);
    // Propagate Idempotency-Key if present (for downstream logs)
    String idem = exchange.getRequest().getHeaders().getFirst("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.getHeaders().set("Idempotency-Key", idem);
    }
    return chain.filter(exchange).doFinally(s -> MDC.remove("requestId"));
  }

  @Override
  public int getOrder() { return -100; }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\filters\RequestIdFilter.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java
Size: 457 bytes
SHA256: 6ABEDF6E4EC0787E0E133B2C0D2ADD7E84AFC0EB0FFFE93019CE6E7CCD4E4F89
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.web;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@RestController
public class FallbackController {
  @GetMapping("/fallback/{svc}")
  public Map<String,Object> fb(@PathVariable String svc) {
    return Map.of("service", svc, "status", "degraded");
  }
}


END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\FallbackController.java

-----8<----- FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java
Size: 2490 bytes
SHA256: 90BA4B28C57A1D1E26DFE8F82500C91827BEC4C539A9EFAE7DC9C5F55F13A877
<<<BEGIN CONTENT
package com.cashflowchallenge.gateway.web;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.bind.support.WebExchangeBindException;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.ServerWebInputException;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({ ServerWebInputException.class, WebExchangeBindException.class, IllegalArgumentException.class })
  public ResponseEntity<Map<String,Object>> handleBadRequest(Exception ex, ServerWebExchange exchange) {
    return body(HttpStatus.BAD_REQUEST, message(ex), exchange);
  }

  @ExceptionHandler(ResponseStatusException.class)
  public ResponseEntity<Map<String,Object>> handleResponseStatus(ResponseStatusException ex, ServerWebExchange exchange) {
    return body(ex.getStatusCode(), ex.getReason() == null ? ex.getStatusCode().toString() : ex.getReason(), exchange);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String,Object>> handleAny(Throwable ex, ServerWebExchange exchange) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", exchange);
  }

  private static ResponseEntity<Map<String,Object>> body(org.springframework.http.HttpStatusCode status, String msg, ServerWebExchange exchange) {
    Map<String,Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.toString() : msg);
    map.put("path", exchange.getRequest().getPath().value());
    var headers = exchange.getRequest().getHeaders();
    map.put("requestId", headers.getFirst("X-Request-Id"));
    map.put("idempotencyKey", headers.getFirst("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof WebExchangeBindException be && !be.getAllErrors().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      be.getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\java\com\cashflowchallenge\gateway\web\GlobalExceptionHandler.java

-----8<----- FILE: api-gateway\src\main\resources\application.yml
Size: 1840 bytes
SHA256: CE0E6AACE91DA830AEAB612141C42FCA29D7257A0430DFC0BB67085676E7A3F6
<<<BEGIN CONTENT
server:
  port: 8080
  error:
    include-stacktrace: never

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      default-filters:
        - name: RequestSize
          args:
            maxSize: 1MB
        - name: Retry
          args:
            retries: 1
            methods: GET
            statuses: INTERNAL_SERVER_ERROR
            backoff:
              firstBackoff: 200ms
              maxBackoff: 2s
              factor: 2
      httpclient:
        connect-timeout: 2000
        response-timeout: 3s
      routes:
        - id: ledger
          uri: http://ledger-service:8081
          predicates:
            - Path=/ledger/**
          filters:
            - name: CircuitBreaker
              args:
                name: ledgerCB
                fallbackUri: forward:/fallback/ledger
        - id: consolidator
          uri: http://consolidator-service:8082
          predicates:
            - Path=/consolidator/**
          filters:
            - name: CircuitBreaker
              args:
                name: consolidatorCB
                fallbackUri: forward:/fallback/consolidator
        - id: balance
          uri: http://balance-query-service:8083
          predicates:
            - Path=/balances/**

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

logging:
  level:
    root: INFO

gateway:
  rps:
    limit: ${GATEWAY_RPS_LIMIT:50}
    paths: ${GATEWAY_RPS_PATHS:/balances/*,/ledger/*}

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: api-gateway\src\main\resources\application.yml

-----8<----- FILE: balance-query-service\docker-entrypoint.sh
Size: 389 bytes
SHA256: EFFF9CD5506C5490C69D7047C8264154EED2D4770490A49421A6EF8CEEF63068
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: balance-query-service\docker-entrypoint.sh

-----8<----- FILE: balance-query-service\Dockerfile
Size: 799 bytes
SHA256: 91677BB4E84B3A09FB43C09D82EDD05CBC41242765343F6938B580A33A42AA64
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/balance-query-service-*.jar app.jar
EXPOSE 8083
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: balance-query-service\Dockerfile

-----8<----- FILE: balance-query-service\pom.xml
Size: 4325 bytes
SHA256: 39D56B2517999715746A7C4951218193EB23ACFEEB337B16DD823C2016133CB2
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>balance-query-service</artifactId>
  <name>balance-query-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: balance-query-service\pom.xml

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java
Size: 3643 bytes
SHA256: D0EF37A53F45600954988DE91498CCF92983550539720A6314B0AB2AFCD55CF6
<<<BEGIN CONTENT
package com.cashflowchallenge.query.api;

import com.cashflowchallenge.query.api.dto.BalancePoint;
import com.cashflowchallenge.query.domain.DailyBalance;
import com.cashflowchallenge.query.infrastructure.repository.DailyBalanceRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.CacheControl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/balances")
@Tag(name = "Balance Query API")
public class BalanceController {
  private final DailyBalanceRepository repo;
  public BalanceController(DailyBalanceRepository repo) { this.repo = repo; }

  @GetMapping("/daily")
  @Operation(summary = "Get balance for a specific date",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<Map<String, Object>> daily(@RequestParam("date") LocalDate date) {
    Map<String, Object> body = repo.findById(date)
        .map(db -> Map.<String,Object>of("day", db.getDay().toString(), "balanceCents", db.getBalanceCents()))
        .orElseGet(() -> {
          Map<String, Object> m = new HashMap<>();
          m.put("day", date.toString());
          m.put("balanceCents", 0);
          return m;
        });
    return ResponseEntity.ok().cacheControl(CacheControl.maxAge(java.time.Duration.ofSeconds(30)).cachePublic()).body(body);
  }

  @GetMapping("/range")
  @Operation(summary = "Get balances for a date range [from,to]",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<List<BalancePoint>> range(@RequestParam("from") LocalDate from,
                                       @RequestParam("to") LocalDate to,
                                       @RequestParam(value = "page", required = false, defaultValue = "0") int page,
                                       @RequestParam(value = "size", required = false, defaultValue = "366") int size) {
    if (from.isAfter(to)) {
      return ResponseEntity.badRequest().body(List.of());
    }
    long span = java.time.temporal.ChronoUnit.DAYS.between(from, to) + 1;
    if (span > 366) {
      return ResponseEntity.badRequest().body(List.of());
    }
    List<DailyBalance> all = repo.findRange(from, to);
    int fromIndex = Math.max(0, Math.min(all.size(), page * size));
    int toIndex = Math.max(fromIndex, Math.min(all.size(), fromIndex + size));
    List<BalancePoint> pts = all.subList(fromIndex, toIndex).stream()
        .map(db -> new BalancePoint(db.getDay().toString(), db.getBalanceCents()))
        .toList();
    return ResponseEntity.ok().cacheControl(CacheControl.maxAge(java.time.Duration.ofSeconds(30)).cachePublic()).body(pts);
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\BalanceController.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java
Size: 255 bytes
SHA256: BEB0E751110BB654E3D4CB88D97035B660D7408FE6DC88205765F3B56C5AECA6
<<<BEGIN CONTENT
package com.cashflowchallenge.query.api.dto;

public class BalancePoint {
  public final String day;
  public final long balanceCents;
  public BalancePoint(String day, long balanceCents) {
    this.day = day;
    this.balanceCents = balanceCents;
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\api\dto\BalancePoint.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java
Size: 335 bytes
SHA256: BABBDA377A66B8B49EEBB0335DC93FE5E1514FBBF9A9AC2BE672A41348E0C843
<<<BEGIN CONTENT
package com.cashflowchallenge.query;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BalanceQueryApplication {
  public static void main(String[] args) {
    SpringApplication.run(BalanceQueryApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\BalanceQueryApplication.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java
Size: 746 bytes
SHA256: A5BD76DF1FC5E863DF794E5FD278046A506B11BF7847EC11E778D1B0FA5C5DFE
<<<BEGIN CONTENT
package com.cashflowchallenge.query.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.time.Instant;
import java.time.LocalDate;

@Entity
@Table(schema = "report", name = "daily_balances")
public class DailyBalance {
  @Id
  @Column(name = "day", nullable = false)
  private LocalDate day;

  @Column(name = "balance_cents", nullable = false)
  private long balanceCents;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected DailyBalance() {}

  public LocalDate getDay() { return day; }
  public long getBalanceCents() { return balanceCents; }
  public Instant getUpdatedAt() { return updatedAt; }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\domain\DailyBalance.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java
Size: 533 bytes
SHA256: 8232DC3439D238A009A753D30FA4DC2BAD52DA1AC5CB12E357DA9B1C96BA6B67
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.repository;

import com.cashflowchallenge.query.domain.DailyBalance;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.time.LocalDate;
import java.util.List;

public interface DailyBalanceRepository extends JpaRepository<DailyBalance, LocalDate> {
  @Query("select d from DailyBalance d where d.day between ?1 and ?2 order by d.day asc")
  List<DailyBalance> findRange(LocalDate from, LocalDate to);
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\repository\DailyBalanceRepository.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java
Size: 956 bytes
SHA256: 118DEDCF4E8567E5F316BFFE512BD5AB4F29C0C6892CBE40F7A94844336C1212
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    try { chain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java
Size: 1239 bytes
SHA256: 834DDC445A50B07675015B883BB59056DFF5D97F22C8589ED7BD60AF127DE323
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\CorsConfig.java

-----8<----- FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java
Size: 3421 bytes
SHA256: 5F3DD42F3F217A4C186AFC2E93B970608E4E4C6BE663C368FF8BD3DF7F3F7406
<<<BEGIN CONTENT
package com.cashflowchallenge.query.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\java\com\cashflowchallenge\query\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: balance-query-service\src\main\resources\application.yml
Size: 987 bytes
SHA256: F880DFB832C5913A0996CBAEAE6C9DDA2A4F5CA0BE48C7E8F2F50669F050DB60
<<<BEGIN CONTENT
server:
  port: 8083
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: balance-query-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: none
  lifecycle:
    timeout-per-shutdown-phase: 20s

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

springdoc:
  swagger-ui:
    path: /swagger

logging:
  level:
    root: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: balance-query-service\src\main\resources\application.yml

-----8<----- FILE: balance-query-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: balance-query-service\src\main\resources\logback-spring.xml

-----8<----- FILE: consolidator-service\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: consolidator-service\docker-entrypoint.sh

-----8<----- FILE: consolidator-service\Dockerfile
Size: 798 bytes
SHA256: 564679A4F5F8B01A4D52A81F1BA93D6E270089ACBD9E8D5CC9B6595273CB93F8
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/consolidator-service-*.jar app.jar
EXPOSE 8082
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: consolidator-service\Dockerfile

-----8<----- FILE: consolidator-service\pom.xml
Size: 5178 bytes
SHA256: B66F0F703A9CD56FD15F731C261A3F7855A4D65DA998BB16DAB60AFD20D6EC8C
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>consolidator-service</artifactId>
  <name>consolidator-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Retry/AOP for listener retry advice -->
    <dependency>
      <groupId>org.springframework.retry</groupId>
      <artifactId>spring-retry</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: consolidator-service\pom.xml

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java
Size: 2855 bytes
SHA256: 1055A1F95AAE3E023D0951E6EBB1E4DC3A451A8B2F3BA2245EC36A14E159AB0E
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.api;

import com.cashflowchallenge.consolidator.application.RebuildService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@RestController
@RequestMapping("/consolidator")
@Tag(name = "Consolidator Admin")
public class RebuildController {
  private final RebuildService rebuildService;
  private final ConcurrentHashMap<String, String> jobs = new ConcurrentHashMap<>();

  public RebuildController(RebuildService rebuildService) { this.rebuildService = rebuildService; }

  @PostMapping("/rebuild")
  @Operation(summary = "Backfill balances for range [from,to]",
      responses = {
          @ApiResponse(responseCode = "202",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public ResponseEntity<Map<String, Object>> rebuild(@RequestParam("from") LocalDate from,
                                                     @RequestParam("to") LocalDate to) {
    if (from.isAfter(to)) {
      return ResponseEntity.badRequest().body(Map.of("error", "from must be <= to"));
    }
    long span = ChronoUnit.DAYS.between(from, to) + 1;
    if (span > 366) {
      return ResponseEntity.badRequest().body(Map.of("error", "max range is 366 days"));
    }
    String jobId = UUID.randomUUID().toString();
    jobs.put(jobId, "PENDING");
    new Thread(() -> {
      try {
        jobs.put(jobId, "RUNNING");
        rebuildService.rebuildRange(from, to);
        jobs.put(jobId, "DONE");
      } catch (Exception e) {
        jobs.put(jobId, "FAILED:" + e.getMessage());
      }
    }, "rebuild-" + jobId).start();
    return ResponseEntity.status(HttpStatus.ACCEPTED).body(Map.of("jobId", jobId));
  }

  @GetMapping("/rebuild/status/{jobId}")
  @Operation(summary = "Get rebuild job status",
      responses = {
          @ApiResponse(responseCode = "200",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided on request")
              })
      })
  public Map<String, Object> status(@PathVariable String jobId) {
    return Map.of("jobId", jobId, "status", jobs.getOrDefault(jobId, "UNKNOWN"));
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\api\RebuildController.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java
Size: 1161 bytes
SHA256: B385B8A82C587F7BB72A239DC33C5159EBAB31E34C81B34ED074E33944575812
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.application;

import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import com.cashflowchallenge.consolidator.infrastructure.repository.ProcessedEventRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.UUID;

@Service
public class BalanceApplicationService {
  private final DailyBalanceRepository balanceRepo;
  private final ProcessedEventRepository processedRepo;

  public BalanceApplicationService(DailyBalanceRepository balanceRepo, ProcessedEventRepository processedRepo) {
    this.balanceRepo = balanceRepo;
    this.processedRepo = processedRepo;
  }

  public static enum EntryType { CREDIT, DEBIT }

  @Transactional
  public boolean applyEvent(UUID id, LocalDate occurredOn, EntryType type, long amountCents) {
    long delta = (type == EntryType.CREDIT) ? amountCents : -amountCents;
    int ins = processedRepo.insertIgnore(id);
    if (ins == 1) {
      balanceRepo.upsertAdd(occurredOn, delta);
      return true;
    }
    return false;
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\BalanceApplicationService.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java
Size: 2327 bytes
SHA256: 59918EA90A44DDE1706A2681D6E60664D80A14C896E7ED2741755B41C73E5107
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.application;

import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import com.cashflowchallenge.consolidator.infrastructure.repository.ProcessedEventRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Service
public class RebuildService {
  private final JdbcTemplate jdbc;
  private final DailyBalanceRepository balanceRepo;
  private final ProcessedEventRepository processedRepo;
  private final BalanceApplicationService app;

  public RebuildService(JdbcTemplate jdbc, DailyBalanceRepository balanceRepo,
                        ProcessedEventRepository processedRepo, BalanceApplicationService app) {
    this.jdbc = jdbc;
    this.balanceRepo = balanceRepo;
    this.processedRepo = processedRepo;
    this.app = app;
  }

  record E(UUID id, LocalDate day, String type, long amount) {}

  @Transactional
  public void rebuildRange(LocalDate from, LocalDate to) {
    // Replace semantics: clear balances in range
    balanceRepo.deleteByDayBetween(from, to);

    // Load events
    List<E> events = jdbc.query(
        "select id, occurred_on, type, amount_cents from ledger.entries where occurred_on between ? and ? order by occurred_on, id",
        ps -> { ps.setObject(1, from); ps.setObject(2, to); },
        (rs, i) -> mapEvent(rs)
    );

    if (!events.isEmpty()) {
      // Optional: clear processed flags for these events to recompute cleanly
      List<UUID> ids = new ArrayList<>(events.size());
      for (E e : events) ids.add(e.id);
      processedRepo.deleteByIds(ids);

      // Re-apply using the same path as live consumption
      for (E e : events) {
        var t = "CREDIT".equals(e.type) ? BalanceApplicationService.EntryType.CREDIT : BalanceApplicationService.EntryType.DEBIT;
        app.applyEvent(e.id, e.day, t, e.amount);
      }
    }
  }

  private static E mapEvent(ResultSet rs) throws SQLException {
    return new E((UUID) rs.getObject(1), rs.getObject(2, LocalDate.class), rs.getString(3), rs.getLong(4));
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\application\RebuildService.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java
Size: 419 bytes
SHA256: 81F379C2E0BBDABE5B1A6D8A26307CE43DD66777CAB3BC5F1E0FDC2BE967897C
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.amqp.rabbit.annotation.EnableRabbit;

@SpringBootApplication
@EnableRabbit
public class ConsolidatorApplication {
  public static void main(String[] args) {
    SpringApplication.run(ConsolidatorApplication.class, args);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\ConsolidatorApplication.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java
Size: 910 bytes
SHA256: 3EFBEAB0CD0CDDBFE10D2ECE8C842788C765B3051E760C449449D47670921421
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.domain;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.time.Instant;
import java.time.LocalDate;

@Entity
@Table(schema = "report", name = "daily_balances")
public class DailyBalance {
  @Id
  @Column(name = "day", nullable = false)
  private LocalDate day;

  @Column(name = "balance_cents", nullable = false)
  private long balanceCents;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected DailyBalance() {}

  public DailyBalance(LocalDate day, long balanceCents) {
    this.day = day;
    this.balanceCents = balanceCents;
    this.updatedAt = Instant.now();
  }

  public LocalDate getDay() { return day; }
  public long getBalanceCents() { return balanceCents; }
  public Instant getUpdatedAt() { return updatedAt; }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\domain\DailyBalance.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java
Size: 2199 bytes
SHA256: 4AC8B1B826EE013B20321C392FC4515BE3507A2F772DC56B93B2D7535B365693
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.messaging;

import com.cashflowchallenge.consolidator.application.BalanceApplicationService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.util.UUID;

@Component
public class LedgerEventConsumer {
  private static final Logger log = LoggerFactory.getLogger(LedgerEventConsumer.class);
  private final BalanceApplicationService app;
  private final ObjectMapper mapper;
  private final Counter processed;
  private final Counter duplicates;

  public LedgerEventConsumer(BalanceApplicationService app, ObjectMapper mapper, MeterRegistry registry) {
    this.app = app;
    this.mapper = mapper;
    this.processed = registry.counter("app_entries_processed_total");
    this.duplicates = registry.counter("app_entries_duplicate_total");
  }

  @RabbitListener(queues = RabbitConfig.QUEUE)
  @Transactional
  public void handle(@Payload String json) {
    try {
      JsonNode n = mapper.readTree(json);
      UUID eventId = UUID.fromString(n.get("id").asText());
      LocalDate day = LocalDate.parse(n.get("occurredOn").asText());
      long amount = n.get("amountCents").asLong();
      String type = n.get("type").asText();
      boolean applied = app.applyEvent(eventId, day,
          "CREDIT".equals(type) ? BalanceApplicationService.EntryType.CREDIT : BalanceApplicationService.EntryType.DEBIT,
          amount);
      if (applied) {
        processed.increment();
      } else {
        log.debug("Duplicate event ignored: {}", eventId);
        duplicates.increment();
      }
    } catch (Exception e) {
      log.error("Failed to process event; will retry and may be dead-lettered", e);
      throw new RuntimeException(e);
    }
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\LedgerEventConsumer.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java
Size: 3928 bytes
SHA256: 1FE54C0B0B5E22DF939C141BC6881CBDC7879F9400AE231E8D56AA78A2CFAD20
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.messaging;

import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.core.AcknowledgeMode;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitConfig {

  public static final String LEDGER_EXCHANGE = "ledger.events";
  public static final String ROUTING_KEY = "ledger.entry-recorded";

  public static final String QUEUE = "report.ledger.entry-recorded.q";

  // DLQ setup
  public static final String DLX_EXCHANGE = "ledger.dlx";
  public static final String DLQ_ROUTING_KEY = "ledger.entry-recorded.dlq";
  public static final String DLQ_QUEUE = "report.ledger.entry-recorded.dlq";

  @Bean TopicExchange ledgerExchange() { return new TopicExchange(LEDGER_EXCHANGE, true, false); }
  @Bean TopicExchange deadLetterExchange() { return new TopicExchange(DLX_EXCHANGE, true, false); }

  @Bean
  Queue queue() {
    return QueueBuilder.durable(QUEUE)
        .withArgument("x-dead-letter-exchange", DLX_EXCHANGE)
        .withArgument("x-dead-letter-routing-key", DLQ_ROUTING_KEY)
        .withArgument("x-queue-type", "quorum")
        .withArgument("x-quorum-initial-group-size", 1)
        .build();
  }

  @Bean Queue dlq() { return QueueBuilder.durable(DLQ_QUEUE)
      .withArgument("x-queue-type", "quorum")
      .withArgument("x-quorum-initial-group-size", 1)
      .withArgument("x-message-ttl", 86400000)
      .withArgument("x-overflow", "reject-publish")
      .build(); }

  @Bean
  Binding binding(Queue queue, TopicExchange ledgerExchange) {
    return BindingBuilder.bind(queue).to(ledgerExchange).with(ROUTING_KEY);
  }

  @Bean
  Binding dlqBinding(Queue dlq, TopicExchange deadLetterExchange) {
    return BindingBuilder.bind(dlq).to(deadLetterExchange).with(DLQ_ROUTING_KEY);
  }

  /**
   * Group the topology into a single Declarables bean for explicit ownership
   * by consolidator-service (admin auto-startup declares at application start).
   */
  @Bean
  public Declarables ledgerTopology(
      @Qualifier("ledgerExchange") TopicExchange ledgerExchange,
      @Qualifier("deadLetterExchange") TopicExchange deadLetterExchange,
      @Qualifier("queue") Queue entryRecordedQueue,
      @Qualifier("dlq") Queue entryRecordedDlq,
      @Qualifier("binding") Binding entryRecordedBinding,
      @Qualifier("dlqBinding") Binding entryRecordedDlqBinding) {
    return new Declarables(
        ledgerExchange,
        deadLetterExchange,
        entryRecordedQueue,
        entryRecordedDlq,
        entryRecordedBinding,
        entryRecordedDlqBinding);
  }

  /**
   * Configure listener retry with exponential backoff and no infinite requeue.
   * After max attempts the message goes to DLQ via RejectAndDontRequeueRecoverer.
   */
  @Bean
  SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory cf) {
    SimpleRabbitListenerContainerFactory f = new SimpleRabbitListenerContainerFactory();
    f.setConnectionFactory(cf);
    f.setDefaultRequeueRejected(false); // hand control to DLQ after retries
    f.setAcknowledgeMode(AcknowledgeMode.AUTO);
    f.setPrefetchCount(100);
    f.setConcurrentConsumers(2);
    f.setMaxConcurrentConsumers(8);
    f.setAdviceChain(
        RetryInterceptorBuilder.stateless()
            .maxAttempts(5)
            .backOffOptions(200, 2.0, 5000) // 200ms -> 400 -> 800 -> 1600 -> 3200 .. capped 5s
            .recoverer(new RejectAndDontRequeueRecoverer())
            .build());
    return f;
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\messaging\RabbitConfig.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java
Size: 1011 bytes
SHA256: ED2A7F2A43462053A82E2332313850B5498C57C3190EE07C8E1A6FFD95BDB4E4
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.repository;

import com.cashflowchallenge.consolidator.domain.DailyBalance;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;

public interface DailyBalanceRepository extends JpaRepository<DailyBalance, LocalDate> {
  @Modifying
  @Transactional
  @Query(value = "INSERT INTO report.daily_balances(day, balance_cents, updated_at) " +
      "VALUES (?1, ?2, now()) " +
      "ON CONFLICT (day) DO UPDATE SET balance_cents = report.daily_balances.balance_cents + EXCLUDED.balance_cents, updated_at = now()", nativeQuery = true)
  void upsertAdd(LocalDate day, long deltaCents);

  @Modifying
  @Transactional
  @Query("delete from DailyBalance d where d.day between ?1 and ?2")
  void deleteByDayBetween(LocalDate from, LocalDate to);
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\DailyBalanceRepository.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java
Size: 872 bytes
SHA256: 2E2FC0960406201F84AE2DB0A6E5BD15F3D296222318B3EBF8E12AFD4A20143C
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.repository;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.UUID;

@Repository
public class ProcessedEventRepository {
  private final JdbcTemplate jdbc;

  public ProcessedEventRepository(JdbcTemplate jdbc) {
    this.jdbc = jdbc;
  }

  public int insertIgnore(UUID id) {
    return jdbc.update("INSERT INTO report.processed_events(id, processed_at) VALUES (?, now()) ON CONFLICT DO NOTHING", id);
  }

  public int deleteByIds(List<UUID> ids) {
    if (ids == null || ids.isEmpty()) return 0;
    String inSql = ids.stream().map(x -> "?").reduce((a,b) -> a + "," + b).orElse("?");
    String sql = "DELETE FROM report.processed_events WHERE id IN (" + inSql + ")";
    return jdbc.update(sql, ids.toArray());
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\repository\ProcessedEventRepository.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java
Size: 1351 bytes
SHA256: B7D1C587F867F5B47FB5D2FFDC77C80AE7D177B3864EFF12D1DF0EB0A3F56E0F
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class ApiKeyFilter extends OncePerRequestFilter {
  private final String apiKey;
  public ApiKeyFilter(@Value("${api.key:}") String apiKey) { this.apiKey = apiKey; }

  @Override
  protected boolean shouldNotFilter(HttpServletRequest request) {
    if (apiKey == null || apiKey.isBlank()) return true;
    return !(request.getRequestURI().startsWith("/consolidator/") && request.getMethod().equals(HttpMethod.POST.name()));
  }

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String provided = request.getHeader("X-API-Key");
    if (provided == null || !provided.equals(apiKey)) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    filterChain.doFilter(request, response);
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\ApiKeyFilter.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java
Size: 1130 bytes
SHA256: 1B39E0DE39F2D7A4F00298FDD1B14CA0EF6F1C15F72B88251D780F6C087FC449
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    String idem = request.getHeader("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.setHeader("Idempotency-Key", idem);
    }
    try { filterChain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java
Size: 1246 bytes
SHA256: 36400355814A8CC2602FE2962FC559F4388CD8B96094215FEABDDB5BB470DA75
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\CorsConfig.java

-----8<----- FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java
Size: 3428 bytes
SHA256: AD2054C29DA290BE33831257BB60531128FD697A7BB48BE1CFD5E3A6DE5FECDD
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\java\com\cashflowchallenge\consolidator\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: consolidator-service\src\main\resources\application.yml
Size: 1296 bytes
SHA256: EE68B762A4DFBF0D239A56F5B1966DFE8112ACC8B7FC87B96BF94E46473DDF35
<<<BEGIN CONTENT
server:
  port: 8082
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: consolidator-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  jpa:
    hibernate:
      ddl-auto: none
  lifecycle:
    timeout-per-shutdown-phase: 20s
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:app}
    password: ${SPRING_RABBITMQ_PASSWORD:app}
  amqp:
    admin:
      # Explicitly enable declarations in consolidator
      auto-startup: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}
  info:
    git:
      mode: simple
  endpoint:
    health:
      probes:
        enabled: true

api:
  key: ${API_KEY:}

springdoc:
  swagger-ui:
    path: /swagger

logging:
  level:
    root: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\application.yml

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V1__init.sql
Size: 203 bytes
SHA256: C41AB8DFFDF22E394DF82D1EFCFA672611B38E1EEEFA27CC33F732ECDEAC3243
<<<BEGIN CONTENT
CREATE SCHEMA IF NOT EXISTS report;

CREATE TABLE IF NOT EXISTS report.daily_balances (
    day DATE PRIMARY KEY,
    balance_cents BIGINT NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V1__init.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V2__indexes.sql
Size: 144 bytes
SHA256: 7FF46B4B58E4EB4DDF83C4818C4BD88E21FF17762BFC8BDE44B01CEF7680A80D
<<<BEGIN CONTENT
-- Explicit index on report.daily_balances primary key column
CREATE INDEX IF NOT EXISTS idx_daily_balances_day ON report.daily_balances(day);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V2__indexes.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql
Size: 53 bytes
SHA256: 7FB296974B42F34FE5BE1B89869902558AF12021A6F8B921FBFC7CDB5EDEFC79
<<<BEGIN CONTENT
DROP INDEX IF EXISTS report.idx_daily_balances_day;


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V3__drop_redundant_idx.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V4__processed_events.sql
Size: 130 bytes
SHA256: D24DC850E731BA6E6AF772CE192B42CF5878C2D2305F3A6F19D1E4F2C1E82280
<<<BEGIN CONTENT
CREATE TABLE IF NOT EXISTS report.processed_events (
  id UUID PRIMARY KEY,
  processed_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V4__processed_events.sql

-----8<----- FILE: consolidator-service\src\main\resources\db\migration\V5__report_guards.sql
Size: 265 bytes
SHA256: B4CCBD47A95710D14BEBF6C4ECC9F61DDEB717FA5627345657C02ECB20BBA8C9
<<<BEGIN CONTENT
DO $$
BEGIN
  BEGIN
    ALTER TABLE report.daily_balances
      ALTER COLUMN balance_cents SET NOT NULL,
      ALTER COLUMN updated_at SET NOT NULL;
  EXCEPTION WHEN undefined_table THEN
    -- table created earlier migrations; ignore if not present
  END;
END$$;


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\db\migration\V5__report_guards.sql

-----8<----- FILE: consolidator-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: consolidator-service\src\main\resources\logback-spring.xml

-----8<----- FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java
Size: 1895 bytes
SHA256: F74C0A2D524E3CEA043E2643C8C3CE48A7261D91CCB9E9E5FBC89383F5429B73
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.it;

import com.cashflowchallenge.consolidator.ConsolidatorApplication;
import com.cashflowchallenge.consolidator.infrastructure.messaging.LedgerEventConsumer;
import io.micrometer.core.instrument.MeterRegistry;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = ConsolidatorApplication.class)
@ActiveProfiles("it")
public class DoubleDeliveryIT {

  @Autowired LedgerEventConsumer consumer;
  @Autowired JdbcTemplate jdbc;
  @Autowired MeterRegistry registry;

  @Test
  void sameEventTwice_updatesOnce_andCountsDuplicate() throws Exception {
    UUID eventId = UUID.randomUUID();
    LocalDate day = LocalDate.now();
    long amount = 777;
    String eventJson = "{" +
        "\"id\":\"" + eventId + "\"," +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":" + amount + "," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"it\"" +
        "}";

    jdbc.update("DELETE FROM report.processed_events WHERE id = ?", eventId);
    jdbc.update("DELETE FROM report.daily_balances WHERE day = ?", day);

    double dupBefore = registry.counter("app_entries_duplicate_total").count();

    consumer.handle(eventJson);
    consumer.handle(eventJson);

    Long bal = jdbc.queryForObject("SELECT balance_cents FROM report.daily_balances WHERE day = ?", Long.class, day);
    assertThat(bal).isEqualTo(amount);

    double dupAfter = registry.counter("app_entries_duplicate_total").count();
    assertThat(dupAfter).isEqualTo(dupBefore + 1.0d);
  }
}


END CONTENT
-----8<----- END FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\it\DoubleDeliveryIT.java

-----8<----- FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java
Size: 1001 bytes
SHA256: FDC2D8CC016A1B03BC7C882C3B49AA3CAB43C32D8FF100D26122B24DCF44535E
<<<BEGIN CONTENT
package com.cashflowchallenge.consolidator.repo;

import com.cashflowchallenge.consolidator.ConsolidatorApplication;
import com.cashflowchallenge.consolidator.infrastructure.repository.DailyBalanceRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = ConsolidatorApplication.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@ActiveProfiles("it")
public class DailyBalanceRepositoryIT {
  @Autowired DailyBalanceRepository repo;

  @Test
  void upsertAddsDelta() {
    LocalDate day = LocalDate.now();
    repo.upsertAdd(day, 1000);
    repo.upsertAdd(day, -300);
    var found = repo.findById(day);
    assertThat(found).isPresent();
    assertThat(found.get().getBalanceCents()).isEqualTo(700);
  }
}

END CONTENT
-----8<----- END FILE: consolidator-service\src\test\java\com\cashflowchallenge\consolidator\repo\DailyBalanceRepositoryIT.java

-----8<----- FILE: consolidator-service\src\test\resources\application-it.yml
Size: 409 bytes
SHA256: C1DECEA0866A547D35DC4DD23890E894F2B46DCB611075B6BC8A7D8C72F215C1
<<<BEGIN CONTENT
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/app
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    locations: classpath:db/migration
    create-schemas: true
    schemas: report
    default-schema: report
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: app
    password: app
logging:
  level:
    root: INFO

END CONTENT
-----8<----- END FILE: consolidator-service\src\test\resources\application-it.yml

-----8<----- FILE: docker-compose.yml
Size: 5882 bytes
SHA256: 5FCB16E27C2CABD7C32799238A21229C62641AFE326631365ACE26F7AAD7B853
<<<BEGIN CONTENT
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d app"]
      interval: 5s
      timeout: 3s
      retries: 30

  rabbitmq:
    image: ${RABBITMQ_IMAGE:-rabbitmq:3.13-management}
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${SPRING_RABBITMQ_USERNAME:-app}
      RABBITMQ_DEFAULT_PASS: ${SPRING_RABBITMQ_PASSWORD:-app}
      RABBITMQ_NODENAME: rabbit@rabbitmq
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-dev-cookie}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 15s

  prometheus:
    image: prom/prometheus:v2.53.1
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    ports:
      - "${PROM_PORT:-19090}:9090"

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning

  ledger-service:
    build: ./ledger-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_FLYWAY_CREATE_SCHEMAS=true
      - SPRING_FLYWAY_SCHEMAS=ledger
      - SPRING_FLYWAY_DEFAULT_SCHEMA=ledger
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=app
      - SPRING_RABBITMQ_PASSWORD=app
      - API_KEY=admin
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8081/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  consolidator-service:
    build: ./consolidator-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=app
      - SPRING_RABBITMQ_PASSWORD=app
      - SPRING_FLYWAY_ENABLED=true
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration
      - SPRING_FLYWAY_CREATE_SCHEMAS=true
      - SPRING_FLYWAY_SCHEMAS=report
      - SPRING_FLYWAY_DEFAULT_SCHEMA=report
      - API_KEY=admin
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8082/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  balance-query-service:
    build: ./balance-query-service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/app
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    ports:
      - "8083:8083"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8083/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  api-gateway:
    build: ./api-gateway
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - ./secrets:/run/secrets:ro
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 131072
        hard: 131072
    depends_on:
      ledger-service:
        condition: service_healthy
      consolidator-service:
        condition: service_healthy
      balance-query-service:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/actuator/health/readiness"]
      interval: 2s
      timeout: 2s
      retries: 60

  tester:
    image: maven:3.9-eclipse-temurin-17
    profiles: ["tester"]
    working_dir: /workspace
    volumes:
      - ./:/workspace
      - maven-repo:/root/.m2
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      API_BASE_URL: http://api-gateway:8080
      API_KEY: admin
    depends_on:
      api-gateway:
        condition: service_healthy
      ledger-service:
        condition: service_healthy
      consolidator-service:
        condition: service_healthy
      balance-query-service:
        condition: service_healthy
    command: >
      mvn -q -DskipTests=true -DskipITs=false verify

volumes:
  postgres-data:
  maven-repo:
  rabbitmq-data:

END CONTENT
-----8<----- END FILE: docker-compose.yml

-----8<----- FILE: docs\adr\ADR-001-microservices-ddd-outbox.md
Size: 543 bytes
SHA256: 6E1F69D885140E05EE2744B8201AD0DBCA742DD24EB3BB1DAE0E04FE476B7F86
<<<BEGIN CONTENT
ADR-001: Microservices + DDD + Outbox

Context
- We need independent services for write (ledger), async consolidation, and read (balance queries), with clear responsibilities and decoupling.

Decision
- Use small Spring Boot microservices with DDD-inspired layering per service.
- Use the Outbox pattern in ledger-service to publish events reliably to RabbitMQ.

Consequences
- Ledger remains available even if consolidator is down; events are retried from outbox.
- Slight write-path complexity due to outbox/scheduler, but robust delivery.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-001-microservices-ddd-outbox.md

-----8<----- FILE: docs\adr\ADR-002-rabbitmq-vs-kafka.md
Size: 469 bytes
SHA256: 7CC5AE01A28AC2601794642253CFD42D301FC7566B1A90699BA7857FAD4B2054
<<<BEGIN CONTENT
ADR-002: RabbitMQ vs Kafka

Context
- We need a simple, local-friendly broker for event delivery between ledger and consolidator.

Decision
- Use RabbitMQ for local simplicity, easy Docker image, management UI, and adequate semantics for this challenge.

Consequences
- Lower operational overhead for local dev; sufficient delivery guarantees for our outbox-driven pattern.
- Kafka would be more scalable for high-throughput streams but is heavier to operate locally.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-002-rabbitmq-vs-kafka.md

-----8<----- FILE: docs\adr\ADR-003-rate-limiting-gateway.md
Size: 470 bytes
SHA256: 76C9A894C8E5AACE4062990E8EF714FB2E1AFD97A20933A004C25C2DE4D76B68
<<<BEGIN CONTENT
ADR-003: Rate Limiting at Gateway

Context
- We want to shield the read endpoints from overload and keep the system responsive under bursts.

Decision
- Implement a simple in-memory rate limiter at the API Gateway for /balances/* at ~50 rps per instance.

Consequences
- Occasional 429 responses under peak are acceptable (~5% allowed), protecting downstream services.
- Per-instance in-memory limiter is simple but not globally coordinated; acceptable for this scope.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-003-rate-limiting-gateway.md

-----8<----- FILE: docs\adr\ADR-004-idempotency-and-outbox.md
Size: 1177 bytes
SHA256: A0ED567A5B5AF974C04B5973B964A7B59F559F93F7868FE05478937D1EAAA6EA
<<<BEGIN CONTENT
ADR-004: Idempotency and Outbox

Context
- We must support HTTP idempotency for writes and reliable, once-only consolidation to the read model.

Decision
- Use Idempotency-Key header and PostgreSQL `INSERT ... ON CONFLICT` to implement first‑write‑wins in the ledger service.
- Persist an outbox row transactionally with the write and publish to RabbitMQ with publisher confirms + returns.
- Consume in consolidator with a transactional first‑write‑wins marker (`INSERT ... ON CONFLICT DO NOTHING`) before mutating state.

Consequences
- Duplicate HTTP submissions return 409 Conflict with the same id; no duplicate rows or extra outbox events.
- Returned or NACKed messages are retried with backoff; after a cap they are marked poisoned for operator review.
- Consolidator ignores duplicate deliveries; daily balances are updated once.

Code Pointers
- Ledger idempotency: `RecordEntryService#record` (UPSERT) and `LedgerController`.
- Outbox publishing: `OutboxPublisher` (confirms/returns) and `OutboxDrainScheduler` (skip-locked + backoff + poison).
- Consumer idempotency: `LedgerEventConsumer` (`processed_events` marker) and `DailyBalanceRepository#upsertAdd`.


END CONTENT
-----8<----- END FILE: docs\adr\ADR-004-idempotency-and-outbox.md

-----8<----- FILE: docs\CHECKLIST-REQUISITOS.md
Size: 1368 bytes
SHA256: ACFBFD6296DBFAD4EABDD61641B57F5CC85E90E3A510F9F306D5B400858FADA6
<<<BEGIN CONTENT
# Checklist de Requisitos — Onde Cada Item é Atendido

- Serviço de lançamentos: `POST /ledger/entries` (201/200 idempotente com Location estável)
  - Cobertura: Cenários A, B, F nos runners (`ops/test-suite.*`); coleção `ops/requests.http`
  - Rota via API Gateway (porta 8080)

- Serviço de saldo diário: `GET /balances/daily?date=YYYY-MM-DD`
  - Cobertura: Cenários A..I (antes/depois e pós-rebuild)
  - Apenas leitura; usado na micro-carga

- Não-funcionais (50 rps, ≤ 5% perda)
  - Scripts: `ops/load.sh` (bash), `ops/load.ps1` (pwsh)
  - Runners: `--load`/`-Load` executam ao final do smoke
  - CI: matriz Linux/Windows em `.github/workflows/test.yml`

- Resiliência/isolamento
  - Ledger aceita POST mesmo se consolidator ficar indisponível (outbox + fila); rebuild replace-only e idempotente
  - Cobertura: runners (rebuild invariance Cenários D, I)

- Observabilidade
  - `/actuator/health` e `/actuator/prometheus` expostos; dashboards provisionados
  - Runners aguardam health e coletam logs em falha

- Segurança
  - API key obrigatória em POST via gateway (`X-API-Key`, default `admin`)
  - Cobertura: Cenário F (403)

- Documentação/decisões
  - ADRs em `docs/adr/*.md` (se aplicável)
  - Como rodar/testar: `README.md` + `docs/TESTES.md`
  - Scripts cruzados: `ops/test-suite.sh` (Linux/macOS), `ops/test-suite.ps1` (Windows)


END CONTENT
-----8<----- END FILE: docs\CHECKLIST-REQUISITOS.md

-----8<----- FILE: docs\diagrams\c4-container.mmd
Size: 580 bytes
SHA256: F0BAEB832F27119375B609EA51FFC00AB8E909C494ED38BC78476EC8668B337A
<<<BEGIN CONTENT
%% C4 Container Diagram
flowchart TB
  subgraph Client
    Merchant((Merchant))
  end

  subgraph Infra
    DB[(PostgreSQL)]
    MQ[(RabbitMQ)]
    Prom[Prometheus]
    Graf[Grafana]
  end

  subgraph Services
    Gateway[API Gateway]
    Ledger[Ledger Service]
    Cons[Consolidator Service]
    Query[Balance Query Service]
  end

  Merchant --> Gateway
  Gateway --> Ledger
  Gateway --> Query
  Gateway --> Cons

  Ledger --> DB
  Ledger --> MQ
  MQ --> Cons
  Cons --> DB
  Query --> DB

  Gateway --> Prom
  Ledger --> Prom
  Cons --> Prom
  Query --> Prom
  Prom --> Graf


END CONTENT
-----8<----- END FILE: docs\diagrams\c4-container.mmd

-----8<----- FILE: docs\diagrams\c4-context.mmd
Size: 624 bytes
SHA256: E87E69EC09F9973C01E1D448E8AB37200AE15341A246824EC4CB3D9BCAD890D0
<<<BEGIN CONTENT
%% C4 Context Diagram
flowchart LR
  Merchant((Merchant))
  Gateway[API Gateway]
  Ledger[Ledger Service]
  Consolidator[Consolidator Service]
  Query[Balance Query Service]
  DB[(PostgreSQL: ledger & report schemas)]
  MQ[(RabbitMQ)]

  Merchant -->|HTTP /ledger, /balances| Gateway
  Gateway --> Ledger
  Gateway --> Query
  Gateway --> Consolidator
  Ledger --> DB
  Ledger -->|Outbox -> Events| MQ
  MQ --> Consolidator
  Consolidator --> DB
  Query --> DB

%% Business capabilities
%% - Ledger: Record entry
%% - Consolidator: Consolidate daily balances
%% - Balance-Query: Query balances
%% - Gateway: Edge/rate-limit

END CONTENT
-----8<----- END FILE: docs\diagrams\c4-context.mmd

-----8<----- FILE: docs\diagrams\sequence-entry-to-balance.mmd
Size: 658 bytes
SHA256: 6A8FDD3F72FA314F472EF1A0274BD3F731ADD97F1667F79D18FEE9EF70B10067
<<<BEGIN CONTENT
%% Sequence: POST entry -> outbox -> broker -> consolidator -> query
sequenceDiagram
  participant M as Merchant
  participant G as API Gateway
  participant L as Ledger Service
  participant MQ as RabbitMQ
  participant C as Consolidator
  participant DB as Postgres
  participant Q as Balance Query

  M->>G: POST /ledger/entries
  G->>L: Forward request
  L->>DB: Save entry + outbox
  L-->>M: 201 Created (id)
  L->>MQ: Publish ledger.entry-recorded
  MQ-->>C: Deliver event
  C->>DB: Upsert report.daily_balances
  M->>G: GET /balances/daily?date=YYYY-MM-DD
  G->>Q: Forward request
  Q->>DB: Read report.daily_balances
  Q-->>M: { day, balanceCents }


END CONTENT
-----8<----- END FILE: docs\diagrams\sequence-entry-to-balance.mmd

-----8<----- FILE: docs\TESTES.md
Size: 3105 bytes
SHA256: D00B08A895DDE8148508EDD91A6BAA02914AA00A8F707279F76A120E83C4CD94
<<<BEGIN CONTENT
# Guia do Avaliador — Testes Funcionais e NFR

## Pré-requisitos
- Docker + Docker Compose
- Linux/macOS: bash, curl · Windows: PowerShell 7 (pwsh)
- API_KEY no .env (default: admin)

## Subir a stack
```bash
docker compose up -d --build
```

## Testes automatizados (cross-OS)
Linux/macOS:
```bash
bash ops/test-suite.sh --load
```
Windows:
```powershell
pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -Load
```

Os runners:
- aguardam health dos serviços (gateway 8080; apps 8081..8083);
- executam os cenários A..I abaixo;
- exibem o que foi enviado (método, URL, headers, body) e o que retornou (status, headers relevantes e body pretty JSON);
- salvam evidências em out/ (requests/responses por cenário);
- executam micro-carga somente após smoke com sucesso (50 rps por 15s, perda ≤ 5%).

## Cenários funcionais (com critérios claros)

Headers padrão em POSTs:
X-API-Key: admin · Content-Type: application/json · Idempotency-Key: <GUID>
Header recomendado em GETs: X-Request-Id: <GUID>

A — Crédito básico (201 → replay 200)
POST /ledger/entries
```json
{ "occurredOn": "YYYY-MM-DD", "type": "CREDIT", "amountCents": 1000, "description": "smoke" }
```
Esperado: 201 Location: /ledger/entries/<id>; replay com mesma Idempotency-Key → 200 mesma Location. GET /balances/daily?date=YYYY-MM-DD ≥ 1000.

B — Débito básico
POST type: "DEBIT", "amountCents": 700. GET /balances/daily?date=YYYY-MM-DD reduz em 700 vs. saldo anterior.

C — Mix no mesmo dia
Envie: +500, +400, −200 (ordem livre). GET → saldo do dia = +700.

D — Multi-dia (ontem + hoje)
Ontem: +500, −200; Hoje: +400. GET ontem = +300; GET hoje = +400.

E — Rebuild não altera saldo (invariância)
POST /consolidator/rebuild?from=<ontem>&to=<hoje> → { "jobId": "..." }; Poll até COMPLETED|DONE. GETs idênticos aos medidos antes do rebuild.

F — Segurança 403
POST sem X-API-Key → 403 Forbidden.

G — Múltiplos débitos no mesmo dia
Envie: −300 e −200 adicionais. GET → saldo do dia reduzido em −500 adicionais.

H — Mix reordenado
Envie +500, −200, +400 (ordem aleatória). GET → saldo final = +700.

I — Rebuild multi-dia (replace-only)
Refaça créditos/débitos em ontem e hoje, verifique GETs. POST rebuild from=ontem&to=hoje e re-verifique: valores idênticos.

### Aceitação (geral):
- POST inicial 201 + Location estável; replay com mesma Idempotency-Key 200 + mesma Location.
- GET /balances/daily reflete lançamentos; rebuild não altera saldos (replace-only).
- NFR: micro-carga (50 rps / 15s) com perda ≤ 5%.

## Micro-carga (NFR)
Linux/macOS: `bash ops/test-suite.sh --load` (ou `bash ops/load.sh --rps 50 --duration 15s --max-loss 0.05`)

Windows: `pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -Load` (ou `pwsh ops\load.ps1 -Rps 50 -Duration '15s' -MaxLoss 0.05`)

Somente leitura: GET /balances/daily. Falha se perda > limiar.

## Troubleshooting rápido
Manter a stack para inspeção: `--no-teardown` / `-NoTeardown`

Logs: `docker compose logs --no-color --since=10m`

Evidências salvas em out/ (requests/responses por cenário).

END CONTENT
-----8<----- END FILE: docs\TESTES.md

-----8<----- FILE: it-tests\pom.xml
Size: 2349 bytes
SHA256: 9449052FC66F08218A851454EC9B494EE823C5ED0E1E9CEF2DEA2883F2DA6767
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.cashflowchallenge</groupId>
    <artifactId>cashflow-challenge</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>it-tests</artifactId>
  <name>it-tests</name>
  <packaging>jar</packaging>

  <properties>
    <!-- Skip by default; compose tester overrides with -DskipTests=false -->
    <skipTests>true</skipTests>
  </properties>

  <dependencies>
    <!-- JUnit 5 + test utilities via Spring Boot's managed versions -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>

END CONTENT
-----8<----- END FILE: it-tests\pom.xml

-----8<----- FILE: it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java
Size: 1125 bytes
SHA256: 1D897CF20A744B252FB073783BC05BB5CA24F553B7F95D5D6EE0FD7F5C84C692
<<<BEGIN CONTENT
package com.cashflowchallenge.it;

import io.restassured.RestAssured;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.is;

public class DuplicateIdempotencyIT {
  @Test
  void duplicate_post_returns_conflict_and_effect_once() {
    String base = System.getenv().getOrDefault("API_BASE_URL", "http://api-gateway:8080");
    RestAssured.baseURI = base;
    String day = LocalDate.now().toString();

    String body = "{" +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":2345," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"e2e\"" +
        "}";

    String key = "dup-e2e-1";

    given().header("Content-Type", "application/json").header("Idempotency-Key", key).body(body)
        .when().post("/ledger/entries")
        .then().statusCode(anyOf(is(200), is(201)));

    given().header("Content-Type", "application/json").header("Idempotency-Key", key).body(body)
        .when().post("/ledger/entries")
        .then().statusCode(409);
  }
}


END CONTENT
-----8<----- END FILE: it-tests\src\test\java\com\cashflowchallenge\it\DuplicateIdempotencyIT.java

-----8<----- FILE: it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java
Size: 1379 bytes
SHA256: 995948FA9B1F61950011EB97B7B721C4E0C3C1CE52B23A9C006A99B4421F17DD
<<<BEGIN CONTENT
package com.cashflowchallenge.it;

import io.restassured.RestAssured;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;

import static io.restassured.RestAssured.given;
import static org.awaitility.Awaitility.await;
import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.greaterThanOrEqualTo;
import static org.hamcrest.Matchers.is;

public class LedgerFlowIT {
  @Test
  void endToEnd_entry_then_balance() {
    String base = System.getenv().getOrDefault("API_BASE_URL", "http://api-gateway:8080");
    RestAssured.baseURI = base;
    String day = LocalDate.now().toString();

    // Create entry via gateway -> ledger-service (through Rabbit) -> consolidator -> Postgres
    given()
      .header("Content-Type", "application/json")
      .header("Idempotency-Key", "it-demo-1")
      .body("{\"occurredOn\":\"" + day + "\",\"amountCents\":1234,\"type\":\"CREDIT\",\"description\":\"it\"}")
    .when()
      .post("/ledger/entries")
    .then()
      .statusCode(anyOf(is(200), is(201)));

    // Poll balance endpoint until the consumer processes the event
    await().atMost(30, TimeUnit.SECONDS).untilAsserted(() ->
      given()
        .when().get("/balances/daily?date=" + day)
        .then()
          .statusCode(200)
          .body("balanceCents", greaterThanOrEqualTo(1234))
    );
  }
}

END CONTENT
-----8<----- END FILE: it-tests\src\test\java\com\cashflowchallenge\it\LedgerFlowIT.java

-----8<----- FILE: ledger-service\docker-entrypoint.sh
Size: 643 bytes
SHA256: 0297D1D6DBF3546A41F82E54047FB8D3F153683F4AE74FE64CEE8869412C7CFA
<<<BEGIN CONTENT
#!/bin/sh
set -eu
[ -f /run/secrets/API_KEY ] && export API_KEY="$(cat /run/secrets/API_KEY)"
[ -f /run/secrets/SPRING_DATASOURCE_USERNAME ] && export SPRING_DATASOURCE_USERNAME="$(cat /run/secrets/SPRING_DATASOURCE_USERNAME)"
[ -f /run/secrets/SPRING_DATASOURCE_PASSWORD ] && export SPRING_DATASOURCE_PASSWORD="$(cat /run/secrets/SPRING_DATASOURCE_PASSWORD)"
[ -f /run/secrets/SPRING_RABBITMQ_USERNAME ] && export SPRING_RABBITMQ_USERNAME="$(cat /run/secrets/SPRING_RABBITMQ_USERNAME)"
[ -f /run/secrets/SPRING_RABBITMQ_PASSWORD ] && export SPRING_RABBITMQ_PASSWORD="$(cat /run/secrets/SPRING_RABBITMQ_PASSWORD)"
exec java -jar /app/app.jar


END CONTENT
-----8<----- END FILE: ledger-service\docker-entrypoint.sh

-----8<----- FILE: ledger-service\Dockerfile
Size: 792 bytes
SHA256: EE70E3A25A319983252ABFB874EF1E9E704ECF65D25968F995E022398293A20A
<<<BEGIN CONTENT
FROM maven:3.9-eclipse-temurin-17 AS build
WORKDIR /workspace
COPY . /workspace
RUN mvn -q -Dmaven.test.skip=true package

FROM eclipse-temurin:17-jre
RUN apt-get update && apt-get install -y --no-install-recommends curl \
  && rm -rf /var/lib/apt/lists/*
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitialRAMPercentage=40 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp -Dfile.encoding=UTF-8"
RUN useradd -ms /bin/bash appuser
USER appuser
WORKDIR /app
COPY --from=build /workspace/target/ledger-service-*.jar app.jar
EXPOSE 8081
USER root
COPY --chown=appuser:appuser docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
USER appuser
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

END CONTENT
-----8<----- END FILE: ledger-service\Dockerfile

-----8<----- FILE: ledger-service\pom.xml
Size: 4912 bytes
SHA256: 92F03802E8064D9583465D0F53545922A4D2CE24D7AD1F14FCF0B1D207F9B0F6
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.3</version>
    <relativePath/>
  </parent>
  <groupId>com.cashflowchallenge</groupId>
  <artifactId>ledger-service</artifactId>
  <name>ledger-service</name>
  <version>0.1.0-SNAPSHOT</version>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>10.17.3</version>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-database-postgresql</artifactId>
      <version>10.17.3</version>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>7.4</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <skipIfEmptyJar>true</skipIfEmptyJar>
          <layers>
            <enabled>true</enabled>
          </layers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <reproducible>true</reproducible>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
          <showWarnings>true</showWarnings>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
          </excludes>
          <useModulePath>false</useModulePath>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>3.2.5</version>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <includes>
            <include>**/*IT.java</include>
          </includes>
          <useModulePath>false</useModulePath>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

END CONTENT
-----8<----- END FILE: ledger-service\pom.xml

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java
Size: 947 bytes
SHA256: C72149581B44BFDA2519F50F278BBB56E9FCF8CCA990F974590EC16100B3262D
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api.dto;

import com.cashflowchallenge.ledger.domain.EntryType;
import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDate;

public class LedgerEntryRequest {
  @NotNull
  @JsonFormat(pattern = "yyyy-MM-dd")
  @Schema(example = "2025-01-01")
  private LocalDate occurredOn;

  @NotNull
  private EntryType type;

  @Min(1)
  private long amountCents;

  @jakarta.validation.constraints.Size(max = 255, message = "description must be up to 255 chars")
  private String description;

  public LocalDate getOccurredOn() { return occurredOn; }
  public EntryType getType() { return type; }
  public long getAmountCents() { return amountCents; }
  public String getDescription() { return description; }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryRequest.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java
Size: 183 bytes
SHA256: 644372490F4B22CBA4B97D42FD0B5910B2D4A3B15F229DC7AD133552DF54824C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api.dto;

import java.util.UUID;

public class LedgerEntryResponse {
  public UUID id;
  public LedgerEntryResponse(UUID id) { this.id = id; }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\dto\LedgerEntryResponse.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java
Size: 3331 bytes
SHA256: 9B67BD0AD45D6D6C54F45D0B70F1CBF3BCA2BDB176B598C19072B601CBF9FE50
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api;

import com.cashflowchallenge.ledger.api.dto.LedgerEntryRequest;
import com.cashflowchallenge.ledger.api.dto.LedgerEntryResponse;
import com.cashflowchallenge.ledger.application.RecordEntryService;
import com.cashflowchallenge.ledger.domain.Entry;
import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.infrastructure.repository.EntryRepository;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/ledger")
@Tag(name = "Ledger API")
public class LedgerController {
  private final RecordEntryService recordEntryService;
  private final EntryRepository entryRepository;

  public LedgerController(RecordEntryService recordEntryService, EntryRepository entryRepository) {
    this.recordEntryService = recordEntryService;
    this.entryRepository = entryRepository;
  }

  @PostMapping("/entries")
  @Operation(
      summary = "Create a ledger entry with idempotency",
      parameters = {
          @Parameter(name = "X-Request-Id", in = ParameterIn.HEADER, required = false,
              description = "Optional client-supplied request id (UUID); generated if absent"),
          @Parameter(name = "Idempotency-Key", in = ParameterIn.HEADER, required = false,
              description = "Recommended for writes; echoed back if provided")
      },
      responses = {
          @ApiResponse(responseCode = "201", description = "Created",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided")
              }),
          @ApiResponse(responseCode = "200", description = "Replayed (idempotent)",
              headers = {
                  @Header(name = "X-Request-Id", description = "Echoed/generated request id"),
                  @Header(name = "Idempotency-Key", description = "Echoed if provided")
              })
      }
  )
  public ResponseEntity<LedgerEntryResponse> create(
      @RequestHeader("Idempotency-Key") String idempotencyKey,
      @Valid @RequestBody LedgerEntryRequest req) {
    var result = recordEntryService.record(req.getOccurredOn(), req.getAmountCents(), req.getType(), req.getDescription(), idempotencyKey);
    URI location = URI.create("/ledger/entries/" + result.id);
    if (result.created) {
      return ResponseEntity.created(location).body(new LedgerEntryResponse(result.id));
    } else {
      return ResponseEntity.ok().location(location).body(new LedgerEntryResponse(result.id));
    }
  }

  @GetMapping("/entries")
  @Operation(summary = "List entries by date")
  public List<Entry> list(@RequestParam("date") LocalDate date) {
    return entryRepository.findByOccurredOn(date);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\api\LedgerController.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java
Size: 3260 bytes
SHA256: 350429E0A0E8987593D1DD3AA687CDD3DA671E743B7C4546C60B1B95B67805F5
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.application;

import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Service
public class RecordEntryService {
  private final NamedParameterJdbcTemplate jdbc;
  private final OutboxRepository outboxRepository;
  private final ObjectMapper objectMapper;
  private final Counter createdCounter;
  private final Counter conflictCounter;

  public RecordEntryService(NamedParameterJdbcTemplate jdbc, OutboxRepository outboxRepository, ObjectMapper objectMapper, MeterRegistry registry) {
    this.jdbc = jdbc;
    this.outboxRepository = outboxRepository;
    this.objectMapper = objectMapper;
    this.createdCounter = registry.counter("entries_created_total");
    this.conflictCounter = registry.counter("entries_conflict_total");
  }

  public static class Result {
    public final UUID id;
    public final boolean created;
    public Result(UUID id, boolean created) { this.id = id; this.created = created; }
  }

  @Transactional
  public Result record(LocalDate occurredOn, long amountCents, EntryType type, String description, String idempotencyKey) {
    UUID id = UUID.randomUUID();
    String sql = """
      INSERT INTO ledger.entries (id, occurred_on, type, amount_cents, description, idempotency_key)
      VALUES (:id, :day, :type, :amt, :desc, :idem)
      ON CONFLICT (idempotency_key) DO UPDATE
        SET idempotency_key = EXCLUDED.idempotency_key
      RETURNING id, (xmax = 0) AS created
      """;
    Map<String, Object> params = new HashMap<>();
    params.put("id", id);
    params.put("day", occurredOn);
    params.put("type", type.name());
    params.put("amt", amountCents);
    params.put("desc", description);
    params.put("idem", idempotencyKey);

    Map<String, Object> row = jdbc.queryForMap(sql, params);
    UUID returnedId = UUID.fromString(row.get("id").toString());
    boolean created = (Boolean) row.get("created");

    if (created) {
      // Only create outbox when newly inserted
      Map<String, Object> payload = Map.of(
          "id", returnedId.toString(),
          "occurredOn", occurredOn.toString(),
          "amountCents", amountCents,
          "type", type.name(),
          "description", description
      );
      String json;
      try {
        json = objectMapper.writeValueAsString(payload);
      } catch (Exception e) {
        throw new RuntimeException("Failed to serialize outbox payload", e);
      }
      OutboxEvent evt = new OutboxEvent(UUID.randomUUID(), "Entry", "ledger.entry-recorded", json);
      outboxRepository.save(evt);
      createdCounter.increment();
    } else {
      conflictCounter.increment();
    }
    return new Result(returnedId, created);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\application\RecordEntryService.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java
Size: 1755 bytes
SHA256: 9DFA8DABEC582FB0C273BE07EA4D48B7E7EF7D4D266046DA49C32BCAFA597807
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import jakarta.persistence.*;
import java.time.Instant;
import java.time.LocalDate;
import java.util.UUID;

@Entity
@Table(schema = "ledger", name = "entries", uniqueConstraints = {
    @UniqueConstraint(name = "uk_entries_idempotency_key", columnNames = {"idempotency_key"})
})
public class Entry {
  @Id
  @Column(nullable = false)
  private UUID id;

  @Column(name = "occurred_on", nullable = false)
  private LocalDate occurredOn;

  @Column(name = "amount_cents", nullable = false)
  private long amountCents;

  @Enumerated(EnumType.STRING)
  @Column(nullable = false, length = 10)
  private EntryType type;

  @Column(columnDefinition = "text")
  private String description;

  @Column(name = "created_at", nullable = false)
  private Instant createdAt;

  @Column(name = "idempotency_key", nullable = false, length = 64)
  private String idempotencyKey;

  protected Entry() {}

  public Entry(UUID id, LocalDate occurredOn, long amountCents, EntryType type, String description, String idempotencyKey) {
    if (amountCents <= 0) throw new IllegalArgumentException("amountCents must be positive");
    this.id = id;
    this.occurredOn = occurredOn;
    this.amountCents = amountCents;
    this.type = type;
    this.description = description;
    this.createdAt = Instant.now();
    this.idempotencyKey = idempotencyKey;
  }

  public UUID getId() { return id; }
  public LocalDate getOccurredOn() { return occurredOn; }
  public long getAmountCents() { return amountCents; }
  public EntryType getType() { return type; }
  public String getDescription() { return description; }
  public Instant getCreatedAt() { return createdAt; }
  public String getIdempotencyKey() { return idempotencyKey; }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\Entry.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java
Size: 294 bytes
SHA256: 65C71BF1D321B0BC315BCC29764467FE0487ECC730F71F01F13BF0D30D48E4E1
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

public enum EntryType {
  CREDIT,
  DEBIT;

  public long signedAmount(long amountCents) {
    if (amountCents <= 0) throw new IllegalArgumentException("amountCents must be positive");
    return this == CREDIT ? amountCents : -amountCents;
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\EntryType.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java
Size: 1869 bytes
SHA256: 90AC7026316DCA7CB7CC6C7EB66C4F0F641DA3B83A12473F102C55CDB6E9063C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import jakarta.persistence.*;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;
import java.time.Instant;
import java.util.UUID;

@Entity
@Table(schema = "ledger", name = "outbox")
public class OutboxEvent {
  @Id
  @Column(nullable = false)
  private UUID id;

  @Column(nullable = false, length = 32)
  private String aggregate;

  @Column(name = "event_type", nullable = false, length = 64)
  private String eventType;

  @Column(columnDefinition = "jsonb", nullable = false)
  @JdbcTypeCode(SqlTypes.JSON)
  private String payload;

  @Column(name = "created_at", nullable = false)
  private Instant createdAt;

  @Column(name = "published_at")
  private Instant publishedAt;

  @Column(name = "attempts", nullable = false)
  private int attempts = 0;

  @Column(name = "last_error")
  private String lastError;

  @Column(name = "updated_at", nullable = false)
  private Instant updatedAt;

  protected OutboxEvent() {}

  public OutboxEvent(UUID id, String aggregate, String eventType, String payload) {
    this.id = id;
    this.aggregate = aggregate;
    this.eventType = eventType;
    this.payload = payload;
    this.createdAt = Instant.now();
    this.updatedAt = this.createdAt;
  }

  public UUID getId() { return id; }
  public String getAggregate() { return aggregate; }
  public String getEventType() { return eventType; }
  public String getPayload() { return payload; }
  public Instant getCreatedAt() { return createdAt; }
  public Instant getPublishedAt() { return publishedAt; }
  public int getAttempts() { return attempts; }
  public String getLastError() { return lastError; }
  public Instant getUpdatedAt() { return updatedAt; }
  public void markPublished() { this.publishedAt = Instant.now(); }
  public boolean isPublished() { return publishedAt != null; }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\domain\OutboxEvent.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java
Size: 480 bytes
SHA256: 6B47E805A01CC327BFE94426537E713633A036EC318BA2CE2F89960CB18777F9
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import javax.sql.DataSource;

@Configuration
public class JdbcConfig {
  @Bean
  public NamedParameterJdbcTemplate namedParameterJdbcTemplate(DataSource dataSource) {
    return new NamedParameterJdbcTemplate(dataSource);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\config\JdbcConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java
Size: 3609 bytes
SHA256: 6A3A574CF25CB7EFD37EE9145638BA00DE9A781BF09DA793950245EF566245E3
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Component
public class OutboxDrainScheduler {
  private static final Logger log = LoggerFactory.getLogger(OutboxDrainScheduler.class);

  private final OutboxRepository repo;
  private final OutboxPublisher publisher;
  private final JdbcTemplate jdbc;
  private final int batchSize;
  private final int maxAttempts;
  private final io.micrometer.core.instrument.Gauge unpublishedGauge;
  private final io.micrometer.core.instrument.Gauge poisonedGauge;

  public OutboxDrainScheduler(OutboxRepository repo, OutboxPublisher publisher, JdbcTemplate jdbc,
                              @Value("${outbox.batchSize:200}") int batchSize,
                              @Value("${outbox.maxAttempts:20}") int maxAttempts,
                              io.micrometer.core.instrument.MeterRegistry registry) {
    this.repo = repo;
    this.publisher = publisher;
    this.jdbc = jdbc;
    this.batchSize = batchSize;
    this.maxAttempts = maxAttempts;
    this.unpublishedGauge = io.micrometer.core.instrument.Gauge.builder("outbox_unpublished_count", repo, OutboxRepository::countUnpublished).register(registry);
    this.poisonedGauge = io.micrometer.core.instrument.Gauge.builder("outbox_poisoned_count", repo, OutboxRepository::countPoisoned).register(registry);
  }

  @Scheduled(fixedDelayString = "${outbox.drainDelay:1000}")
  public void drain() {
    int processed = 0;
    for (int i = 0; i < batchSize; i++) {
      if (!processOne()) break;
      processed++;
    }
    if (processed > 0) log.debug("Outbox processed {} events", processed);
  }

  @Transactional
  protected boolean processOne() {
    UUID id = jdbc.query(
        """
        SELECT id
        FROM ledger.outbox
        WHERE published_at IS NULL
          AND (attempts = 0 OR now() - updated_at > LEAST((attempts * attempts) * interval '5 seconds', interval '5 minutes'))
          AND (poisoned_at IS NULL)
        ORDER BY created_at ASC
        LIMIT 1
        FOR UPDATE SKIP LOCKED
        """,
        rs -> rs.next() ? (UUID) rs.getObject(1) : null);
    if (id == null) return false;
    OutboxEvent evt = repo.findById(id).orElse(null);
    if (evt == null) return true; // someone deleted/published meanwhile
    if (evt.getAttempts() >= maxAttempts) {
      repo.markPoisoned(id);
      org.slf4j.MDC.put("outboxId", id.toString());
      log.warn("Outbox event poisoned after max attempts: {}", id);
      org.slf4j.MDC.remove("outboxId");
      return true;
    }
    boolean ok = publisher.publishAndConfirm(evt);
    if (ok) {
      repo.markPublished(id);
    } else {
      repo.markFailed(id, "nack/exception during publish");
      // If exceeded attempts after failure, poison it
      OutboxEvent nowEvt = repo.findById(id).orElse(null);
      if (nowEvt != null && nowEvt.getAttempts() >= maxAttempts) {
        repo.markPoisoned(id);
        org.slf4j.MDC.put("outboxId", id.toString());
        log.warn("Outbox event poisoned after failure threshold: {}", id);
        org.slf4j.MDC.remove("outboxId");
      }
    }
    return true;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxDrainScheduler.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java
Size: 5179 bytes
SHA256: 48A9E011222104DD6778606CA67CA6A86F7C43CE6976C5BEF41F36A4995AB45A
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageProperties;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

import java.nio.charset.StandardCharsets;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.slf4j.MDC;

import static com.cashflowchallenge.ledger.infrastructure.messaging.RabbitConfig.LEDGER_EXCHANGE;
import static com.cashflowchallenge.ledger.infrastructure.messaging.RabbitConfig.ROUTING_KEY;

@Component
public class OutboxPublisher {
  private static final Logger log = LoggerFactory.getLogger(OutboxPublisher.class);

  private final RabbitTemplate rabbitTemplate;
  private final OutboxRepository outboxRepository;
  private final Counter published;
  private final Counter returned;
  private final Counter nacked;
  private final Counter failed;
  // Track if a basic.return was observed for a given correlation id
  private final ConcurrentMap<String, Boolean> returnsSeen = new ConcurrentHashMap<>();

  public OutboxPublisher(RabbitTemplate rabbitTemplate, OutboxRepository outboxRepository, MeterRegistry registry) {
    this.rabbitTemplate = rabbitTemplate;
    this.outboxRepository = outboxRepository;
    this.published = registry.counter("outbox_published_total");
    this.returned = registry.counter("outbox_returned_total");
    this.nacked = registry.counter("outbox_nacked_total");
    this.failed = registry.counter("outbox_publish_failed_total");
  }

  @PostConstruct
  void initCallbacks() {
    rabbitTemplate.setReturnsCallback(ret -> {
      returned.increment();
      failed.increment();
      String corrId = ret.getMessage().getMessageProperties().getCorrelationId();
      if (corrId != null) returnsSeen.put(corrId, Boolean.TRUE);
      log.warn("Rabbit RETURNED (unroutable): replyCode={}, replyText={}, exchange={}, routingKey={}, corrId={}, message={}",
          ret.getReplyCode(), ret.getReplyText(), ret.getExchange(), ret.getRoutingKey(), corrId,
          new String(ret.getMessage().getBody(), StandardCharsets.UTF_8));
      // Keep outbox row; deletion is decided in the confirm callback
    });
    rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -> {
      String corrId = correlationData != null ? correlationData.getId() : null;
      if (!ack) {
        nacked.increment();
        log.warn("Confirm NACK corrId={}, cause={}", corrId, cause);
      }
    });
  }

  // Synchronous publish with confirms. Returns true on ACK (and not returned), false otherwise
  public boolean publishAndConfirm(OutboxEvent evt) {
    UUID id = evt.getId();
    String idStr = id.toString();
    String payload = evt.getPayload();
    MessageProperties props = jsonProps();
    props.setCorrelationId(idStr);
    String rid = MDC.get("requestId");
    if (rid != null && !rid.isBlank()) {
      props.setHeader("X-Request-Id", rid);
    }
    props.setHeader("X-Event-Version", 1);
    props.setHeader("Idempotency-Key", idStr);
    Message msg = new Message(payload.getBytes(StandardCharsets.UTF_8), props);
    CorrelationData cd = new CorrelationData(idStr);
    try {
      // Avoid false positives from previous attempts: clear any stale RETURN flag
      returnsSeen.remove(idStr);
      rabbitTemplate.convertAndSend(LEDGER_EXCHANGE, ROUTING_KEY, msg, cd);
      CorrelationData.Confirm confirm = cd.getFuture().get();
      if (confirm != null && confirm.isAck()) {
        boolean wasReturned = Boolean.TRUE.equals(returnsSeen.remove(idStr));
        if (wasReturned) {
          nacked.increment();
          log.warn("ACK received but message was RETURNED earlier: {}", idStr);
          outboxRepository.markFailed(id, "returned earlier");
          return false;
        }
        published.increment();
        log.debug("Outbox ACK: {}", idStr);
        return true;
      } else {
        nacked.increment();
        log.warn("Outbox NACK: {}", idStr);
        outboxRepository.markFailed(id, "nack");
        failed.increment();
        return false;
      }
    } catch (Exception e) {
      nacked.increment();
      log.error("Outbox send threw: {}", idStr, e);
      outboxRepository.markFailed(id, e.getMessage());
      failed.increment();
      return false;
    }
  }

  // Backward-compat shim for legacy tests calling publishOne(...)
  public void publishOne(OutboxEvent event) {
    publishAndConfirm(event);
  }

  private static MessageProperties jsonProps() {
    MessageProperties p = new MessageProperties();
    p.setContentType(MessageProperties.CONTENT_TYPE_JSON);
    p.setContentEncoding(StandardCharsets.UTF_8.name());
    return p;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisher.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java
Size: 1066 bytes
SHA256: 5F0515A6CDCC16B51945EF48AD6D46A9BB1147F42BE009666B327D6D2601DD76
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitConfig {

  // Constants used by publisher/tests; topology is owned by consolidator-service.
  public static final String LEDGER_EXCHANGE = "ledger.events";
  public static final String ROUTING_KEY = "ledger.entry-recorded";
  public static final String QUEUE = "report.ledger.entry-recorded.q";
  public static final String DLX_EXCHANGE = "ledger.dlx";
  public static final String DLQ_ROUTING_KEY = "ledger.entry-recorded.dlq";
  public static final String DLQ_QUEUE = "report.ledger.entry-recorded.dlq";

  @Bean
  public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
    RabbitTemplate tpl = new RabbitTemplate(connectionFactory);
    tpl.setMandatory(true); // honor returns
    return tpl;
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\messaging\RabbitConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java
Size: 470 bytes
SHA256: 81F461F5B3ADAE9129B749D0C5A304CA74781D52E83C909F2504D0F5F1E5EA43
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.repository;

import com.cashflowchallenge.ledger.domain.Entry;
import org.springframework.data.jpa.repository.JpaRepository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

public interface EntryRepository extends JpaRepository<Entry, UUID> {
  Optional<Entry> findByIdempotencyKey(String idempotencyKey);
  List<Entry> findByOccurredOn(LocalDate occurredOn);
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\EntryRepository.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java
Size: 1537 bytes
SHA256: 57E9CD66179B68933C797B9C2FDAA3A6AEDFB043DD9229B04FE075C002E422CC
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.repository;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

public interface OutboxRepository extends JpaRepository<OutboxEvent, UUID> {
  // Convenience batch finder to drain outbox in small chunks
  List<OutboxEvent> findTop100ByOrderByCreatedAtAsc();

  @Modifying(clearAutomatically = true, flushAutomatically = true)
  @Transactional
  @Query("update OutboxEvent o set o.publishedAt = CURRENT_TIMESTAMP, o.updatedAt = CURRENT_TIMESTAMP where o.id = :id")
  int markPublished(@Param("id") UUID id);

  @Modifying
  @Query("update OutboxEvent o set o.attempts = o.attempts + 1, o.lastError = :err, o.updatedAt = CURRENT_TIMESTAMP where o.id = :id")
  void markFailed(@Param("id") UUID id, @Param("err") String error);

  @Modifying
  @Query(value = "update ledger.outbox set poisoned_at = now(), updated_at = now() where id = :id", nativeQuery = true)
  void markPoisoned(@Param("id") UUID id);

  @Query("select count(o) from OutboxEvent o where o.publishedAt is null")
  long countUnpublished();

  @Query(value = "select count(*) from ledger.outbox where poisoned_at is not null", nativeQuery = true)
  long countPoisoned();
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\repository\OutboxRepository.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java
Size: 1463 bytes
SHA256: 5C111A495A7420BE4DE07CB43A504EBBF336C66BC4BD000609C174EF1CF863BA
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpMethod;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class ApiKeyFilter extends OncePerRequestFilter {
  private final String apiKey;

  public ApiKeyFilter(@Value("${api.key:}") String apiKey) {
    this.apiKey = apiKey;
  }

  @Override
  protected boolean shouldNotFilter(HttpServletRequest request) {
    // Only enforce on write endpoints if API key is configured
    if (apiKey == null || apiKey.isBlank()) return true;
    String path = request.getRequestURI();
    boolean isWrite = request.getMethod().equals(HttpMethod.POST.name());
    return !isWrite || !path.startsWith("/ledger");
  }

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String provided = request.getHeader("X-API-Key");
    if (provided == null || !provided.equals(apiKey)) {
      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    filterChain.doFilter(request, response);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\ApiKeyFilter.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java
Size: 1124 bytes
SHA256: 3724D7AF393B306CC04C88B5FCB3078D032BD270C7B6D21ED2F76D3805E97F77
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
    String rid = request.getHeader("X-Request-Id");
    if (rid == null || rid.isBlank()) rid = UUID.randomUUID().toString();
    MDC.put("requestId", rid);
    response.setHeader("X-Request-Id", rid);
    String idem = request.getHeader("Idempotency-Key");
    if (idem != null && !idem.isBlank()) {
      response.setHeader("Idempotency-Key", idem);
    }
    try { filterChain.doFilter(request, response); }
    finally { MDC.remove("requestId"); }
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\security\RequestIdFilter.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java
Size: 1240 bytes
SHA256: 1AE8A67D230C4DF9BF8FD64D5A4433ED80A768633011288DCD58F83457AB682C
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.web;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import java.util.Arrays;
import java.util.List;

@Configuration
public class CorsConfig {
  @Bean
  public CorsFilter corsFilter(@Value("${app.cors.allowed-origins:http://localhost:3000}") String origins) {
    CorsConfiguration cfg = new CorsConfiguration();
    List<String> allowed = Arrays.stream(origins.split(",")).map(String::trim).filter(s -> !s.isBlank()).toList();
    cfg.setAllowedOrigins(allowed);
    cfg.setAllowedMethods(List.of("GET", "POST"));
    cfg.setAllowedHeaders(List.of("Content-Type", "X-API-Key", "Idempotency-Key", "X-Request-Id"));
    cfg.setExposedHeaders(List.of("X-Request-Id", "Idempotency-Key"));
    cfg.setAllowCredentials(false);
    UrlBasedCorsConfigurationSource src = new UrlBasedCorsConfigurationSource();
    src.registerCorsConfiguration("/**", cfg);
    return new CorsFilter(src);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\CorsConfig.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java
Size: 3422 bytes
SHA256: 5BA7CBF5C8062C92DC9671457EC9E274457D90289907FBF657D8A5F8B83C5684
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.web;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.HttpMediaTypeNotSupportedException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalExceptionHandler {

  @ExceptionHandler({
      MethodArgumentNotValidException.class,
      BindException.class,
      ConstraintViolationException.class,
      MissingServletRequestParameterException.class,
      MissingRequestHeaderException.class,
      IllegalArgumentException.class
  })
  public ResponseEntity<Map<String, Object>> handleBadRequest(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }


  @ExceptionHandler({
      HttpRequestMethodNotSupportedException.class,
      HttpMediaTypeNotSupportedException.class
  })
  public ResponseEntity<Map<String, Object>> handleMethodOrMedia(Exception ex, HttpServletRequest request) {
    return body(HttpStatus.BAD_REQUEST, message(ex), request);
  }

  @ExceptionHandler(Throwable.class)
  public ResponseEntity<Map<String, Object>> handleAny(Throwable ex, HttpServletRequest request) {
    return body(HttpStatus.INTERNAL_SERVER_ERROR, "Internal Server Error", request);
  }

  private static ResponseEntity<Map<String, Object>> body(HttpStatus status, String msg, HttpServletRequest request) {
    Map<String, Object> map = new HashMap<>();
    map.put("timestamp", Instant.now().toString());
    map.put("status", status.value());
    map.put("error", (msg == null || msg.isBlank()) ? status.getReasonPhrase() : msg);
    map.put("path", request.getRequestURI());
    map.put("requestId", request.getHeader("X-Request-Id"));
    map.put("idempotencyKey", request.getHeader("Idempotency-Key"));
    return ResponseEntity.status(status).body(map);
  }

  private static String message(Exception ex) {
    if (ex instanceof MethodArgumentNotValidException manv && manv.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      manv.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof BindException be && be.getBindingResult() != null) {
      var sb = new StringBuilder("Validation failed: ");
      be.getBindingResult().getAllErrors().forEach(err -> sb.append(err.getDefaultMessage()).append("; "));
      return sb.toString();
    }
    if (ex instanceof ConstraintViolationException cve && !cve.getConstraintViolations().isEmpty()) {
      var sb = new StringBuilder("Validation failed: ");
      cve.getConstraintViolations().forEach(v -> sb.append(v.getMessage()).append("; "));
      return sb.toString();
    }
    return ex.getMessage();
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\infrastructure\web\GlobalExceptionHandler.java

-----8<----- FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java
Size: 409 bytes
SHA256: 88571F0B70852A5A94292E3FB5459E5F391549FD192ECEBBBFB4BE8629A8F327
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class LedgerApplication {
  public static void main(String[] args) {
    SpringApplication.run(LedgerApplication.class, args);
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\main\java\com\cashflowchallenge\ledger\LedgerApplication.java

-----8<----- FILE: ledger-service\src\main\resources\application.yml
Size: 2016 bytes
SHA256: E44EFB4D2881B40292A794939789BF95710EE60469E1E722398332C4F58F0146
<<<BEGIN CONTENT
server:
  port: 8081
  error:
    include-stacktrace: never
  shutdown: graceful

spring:
  application:
    name: ledger-service
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/app}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    hikari:
      maximum-pool-size: 10
  lifecycle:
    timeout-per-shutdown-phase: 20s
  flyway:
    enabled: true
    locations: classpath:db/migration
    check-location: true
    create-schemas: true
    schemas: ledger
    default-schema: ledger
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        default_schema: ledger
        jdbc:
          lob:
            non_contextual_creation: true
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:app}
    password: ${SPRING_RABBITMQ_PASSWORD:app}
    # Do not create RabbitAdmin, do not auto-declare topology
    dynamic: false
    listener:
      simple:
        # Don't fail startup if queue missing; consolidator owns topology
        missing-queues-fatal: false
    publisher-returns: true
    publisher-confirm-type: correlated
    template:
      mandatory: true

  amqp:
    admin:
      # If a RabbitAdmin bean exists for some reason, keep it from running
      auto-startup: false

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      probes:
        enabled: true
  info:
    git:
      mode: simple
  metrics:
    tags:
      application: ${spring.application.name}
      instance: ${HOSTNAME:local}

api:
  key: ${API_KEY:}

springdoc:
  swagger-ui:
    path: /swagger

outbox:
  drainDelay: 500
  batchSize: 200
  maxAttempts: 20
logging:
  level:
    root: INFO
    org.flywaydb: INFO

app:
  cors:
    # Comma-separated origins for CORS (defaults to http://localhost:3000)
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:http://localhost:3000}

END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\application.yml

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V1__init.sql
Size: 695 bytes
SHA256: EF388AF92241B17E09FB0AE795FDA6408309C528781F7D046F20DED1C6D28FB3
<<<BEGIN CONTENT
CREATE SCHEMA IF NOT EXISTS ledger;

CREATE TABLE IF NOT EXISTS ledger.entries (
    id UUID PRIMARY KEY,
    occurred_on DATE NOT NULL,
    amount_cents BIGINT NOT NULL,
    type VARCHAR(10) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    idempotency_key VARCHAR(64) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS ledger.outbox (
    id UUID PRIMARY KEY,
    aggregate VARCHAR(32) NOT NULL,
    event_type VARCHAR(64) NOT NULL,
    payload JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    published_at TIMESTAMPTZ NULL
);

CREATE INDEX IF NOT EXISTS idx_outbox_unpublished ON ledger.outbox(published_at) WHERE published_at IS NULL;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V1__init.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V2__indexes.sql
Size: 136 bytes
SHA256: DD610F579A409358B3B02ED574FB8B2E80F81EA5A9EC32FF40E5A67C150BFCBF
<<<BEGIN CONTENT
-- Speeds up listing and range aggregations by date
CREATE INDEX IF NOT EXISTS idx_entries_occurred_on ON ledger.entries(occurred_on);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V2__indexes.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql
Size: 177 bytes
SHA256: 4887A3F73745CBE8342890460DB5175B0D84F6A6FA26AB1D2B8B649DF39D6592
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.entries
  ALTER COLUMN idempotency_key SET NOT NULL;

CREATE UNIQUE INDEX IF NOT EXISTS ux_entries_idem_key
  ON ledger.entries (idempotency_key);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V3__ledger_constraints.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V4__outbox_state.sql
Size: 320 bytes
SHA256: F7A39B664616209E5993835FDE87D76E92762E6153DD4E38FF8CA307934DB060
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.outbox
  ADD COLUMN IF NOT EXISTS attempts INT NOT NULL DEFAULT 0,
  ADD COLUMN IF NOT EXISTS last_error TEXT,
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ NOT NULL DEFAULT now();

CREATE INDEX IF NOT EXISTS idx_outbox_order ON ledger.outbox (published_at NULLS LAST, created_at, id);


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V4__outbox_state.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql
Size: 833 bytes
SHA256: C68BB89FDB3C23E94FCF3D8824CA288C6EFC0B71D47345039C8E79E80323315D
<<<BEGIN CONTENT
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_schema='ledger' AND table_name='entries' AND column_name='amount_cents'
  ) THEN
    RAISE EXCEPTION 'ledger.entries.amount_cents column missing';
  END IF;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_amount_pos CHECK (amount_cents >= 1);
  EXCEPTION WHEN duplicate_object THEN
    -- already present, ignore
  END;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_type_valid CHECK (type IN ('CREDIT','DEBIT'));
  EXCEPTION WHEN duplicate_object THEN
  END;

  BEGIN
    ALTER TABLE ledger.entries
      ADD CONSTRAINT ck_entries_occurred_on_range CHECK (occurred_on BETWEEN DATE '2000-01-01' AND (CURRENT_DATE + INTERVAL '3650 days'));
  EXCEPTION WHEN duplicate_object THEN
  END;
END$$;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V5__ledger_amount_and_enum_guards.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql
Size: 198 bytes
SHA256: 95FA629D5276A76266E7C46175E6887530BB9F59128029CC732833692293A042
<<<BEGIN CONTENT
CREATE INDEX IF NOT EXISTS ix_entries_occurred_on ON ledger.entries(occurred_on);
CREATE INDEX IF NOT EXISTS ix_outbox_unpublished_created ON ledger.outbox (created_at) WHERE published_at IS NULL;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V6__ledger_indexes_more.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql
Size: 356 bytes
SHA256: D855F2AE1B4877ABED008897B7324C699F4D422D327BA395EBD9C81988788BAC
<<<BEGIN CONTENT
CREATE OR REPLACE VIEW ledger.v_outbox_stuck AS
  SELECT id, attempts, created_at, updated_at, last_error
  FROM ledger.outbox
  WHERE published_at IS NULL AND attempts >= 10;

CREATE OR REPLACE VIEW ledger.v_idempotency_old AS
  SELECT id, idempotency_key, occurred_on, created_at
  FROM ledger.entries
  WHERE created_at < (now() - INTERVAL '90 days');


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V7__maintenance_views.sql

-----8<----- FILE: ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql
Size: 89 bytes
SHA256: 71B97237BF3C2655C6C6B6DBD618ED1DA1231D24B3623577F99488E804DB2C3A
<<<BEGIN CONTENT
ALTER TABLE IF EXISTS ledger.outbox
  ADD COLUMN IF NOT EXISTS poisoned_at TIMESTAMPTZ;


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\db\migration\V8__outbox_poison_flag.sql

-----8<----- FILE: ledger-service\src\main\resources\logback-spring.xml
Size: 717 bytes
SHA256: F643BACF63E1A79F3513CF13632AE2517ACE4CDE39B1A0417DF88BD90E7FF692
<<<BEGIN CONTENT
<configuration>
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp>
          <timeZone>UTC</timeZone>
        </timestamp>
        <pattern>
          <pattern>{"level":"%level","logger":"%logger{36}","message":"%msg","thread":"%thread"}</pattern>
        </pattern>
        <mdc/>
        <context/>
        <stackTrace>
          <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>
        </stackTrace>
      </providers>
    </encoder>
  </appender>
  <root level="INFO">
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>


END CONTENT
-----8<----- END FILE: ledger-service\src\main\resources\logback-spring.xml

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java
Size: 2437 bytes
SHA256: 2486A30071B1F60BBD1652299EE20C32D0B5C31C6A6C636C7C84DCF352881321
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.api;

import com.cashflowchallenge.ledger.LedgerApplication;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = LedgerApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("it")
public class LedgerIdempotencyIT {

  @Autowired TestRestTemplate rest;
  @Autowired JdbcTemplate jdbc;

  @Test
  void firstIsCreated_thenConflict_withSameIdempotencyKey() {
    String key = "it-idem-" + UUID.randomUUID();
    String day = LocalDate.now().toString();
    String body = "{" +
        "\"occurredOn\":\"" + day + "\"," +
        "\"amountCents\":1234," +
        "\"type\":\"CREDIT\"," +
        "\"description\":\"it\"" +
        "}";

    HttpHeaders h = new HttpHeaders();
    h.setContentType(MediaType.APPLICATION_JSON);
    h.set("Idempotency-Key", key);

    ParameterizedTypeReference<Map<String, Object>> mapType = new ParameterizedTypeReference<>() {};
    ResponseEntity<Map<String, Object>> r1 = rest.exchange("/ledger/entries", HttpMethod.POST, new HttpEntity<>(body, h), mapType);
    assertThat(r1.getStatusCode()).isIn(HttpStatus.CREATED, HttpStatus.OK); // created
    assertThat(r1.getBody()).isNotNull();
    String id = r1.getBody().get("id").toString();

    ResponseEntity<Map<String, Object>> r2 = rest.exchange("/ledger/entries", HttpMethod.POST, new HttpEntity<>(body, h), mapType);
    assertThat(r2.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
    assertThat(r2.getBody()).isNotNull();
    assertThat(r2.getBody().get("id").toString()).isEqualTo(id);

    Integer cntEntries = jdbc.queryForObject("select count(*) from ledger.entries where idempotency_key = ?", Integer.class, key);
    assertThat(cntEntries).isEqualTo(1);

    Integer cntOutbox = jdbc.queryForObject("select count(*) from ledger.outbox where payload->>'id' = ?", Integer.class, id);
    assertThat(cntOutbox).isEqualTo(1);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\api\LedgerIdempotencyIT.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java
Size: 495 bytes
SHA256: E74A8FD7BDCA38291521BFB5DB63A820AC61EFD3E897D19F1DB72E681F33EB88
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.domain;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class EntryTypeTest {
  @Test
  void creditIsPositive() {
    assertEquals(100, EntryType.CREDIT.signedAmount(100));
  }

  @Test
  void debitIsNegative() {
    assertEquals(-100, EntryType.DEBIT.signedAmount(100));
  }

  @Test
  void rejectsNonPositive() {
    assertThrows(IllegalArgumentException.class, () -> EntryType.CREDIT.signedAmount(0));
  }
}


END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\domain\EntryTypeTest.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java
Size: 1088 bytes
SHA256: DBA90424852179AECD3C436AB418166A65A5D062B761AFD243C39E0C3826B5BD
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infra;

import com.cashflowchallenge.ledger.LedgerApplication;
import com.cashflowchallenge.ledger.application.RecordEntryService;
import com.cashflowchallenge.ledger.domain.EntryType;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(classes = LedgerApplication.class, webEnvironment = SpringBootTest.WebEnvironment.NONE)
@ActiveProfiles("it")
public class JpaOutboxIT {
  @Autowired RecordEntryService service;
  @Autowired OutboxRepository outbox;

  @Test
  void savingEntryCreatesOutbox() {
    var result = service.record(LocalDate.now(), 1000, EntryType.CREDIT, "t", "ik-1");
    assertThat(result.created).isTrue();
    assertThat(outbox.findTop100ByOrderByCreatedAtAsc()).isNotEmpty();
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infra\JpaOutboxIT.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java
Size: 1654 bytes
SHA256: 1A9F530B7A21F40D44C70E54669ABCBB48402EC3265D2289337594355E0C0197
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.connection.CorrelationData;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

public class OutboxPublisherCorrelationIdTest {

  @Test
  void setsCorrelationIdOnMessage() {
    RabbitTemplate template = mock(RabbitTemplate.class);
    OutboxRepository repo = mock(OutboxRepository.class);
    var registry = new SimpleMeterRegistry();

    OutboxPublisher publisher = new OutboxPublisher(template, repo, registry);
    // We don't need returns callback for this test

    UUID id = UUID.randomUUID();
    OutboxEvent evt = new OutboxEvent(id, "Entry", "ledger.entry-recorded", "{\"k\":1}");

    // Capture message argument
    ArgumentCaptor<Message> msgCaptor = ArgumentCaptor.forClass(Message.class);

    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), any(CorrelationData.class));

    publisher.publishAndConfirm(evt);

    Message sent = msgCaptor.getValue();
    assertThat(sent).isNotNull();
    assertThat(sent.getMessageProperties().getCorrelationId()).isEqualTo(id.toString());
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherCorrelationIdTest.java

-----8<----- FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java
Size: 3664 bytes
SHA256: 5F0D3B8EB7E647D48D3EC4B2B986D0E0649B26510C34045B76F63ADFC8CDBDE8
<<<BEGIN CONTENT
package com.cashflowchallenge.ledger.infrastructure.messaging;

import com.cashflowchallenge.ledger.domain.OutboxEvent;
import com.cashflowchallenge.ledger.infrastructure.repository.OutboxRepository;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.ReturnedMessage;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

public class OutboxPublisherReturnThenAckTest {

  @Test
  void returnThenAck_doesNotDelete_thenNextAck_deletes() {
    RabbitTemplate template = mock(RabbitTemplate.class);
    OutboxRepository repo = mock(OutboxRepository.class);
    var registry = new SimpleMeterRegistry();

    OutboxPublisher publisher = new OutboxPublisher(template, repo, registry);
    // capture ReturnsCallback registered in @PostConstruct
    var returnsCbCaptor = ArgumentCaptor.forClass(RabbitTemplate.ReturnsCallback.class);
    doAnswer(inv -> { return null; })
        .when(template).setReturnsCallback(returnsCbCaptor.capture());
    publisher.initCallbacks();

    // Prepare first event
    UUID id1 = UUID.randomUUID();
    OutboxEvent evt1 = new OutboxEvent(id1, "Entry", "ledger.entry-recorded", "{\"k\":1}");

    // capture message & correlation for first send
    ArgumentCaptor<Message> msgCaptor = ArgumentCaptor.forClass(Message.class);
    ArgumentCaptor<CorrelationData> cdCaptor = ArgumentCaptor.forClass(CorrelationData.class);
    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), cdCaptor.capture());

    // --- First publish: simulate RETURN then ACK ---
    publisher.publishAndConfirm(evt1);

    Message sent1 = msgCaptor.getAllValues().get(0);
    CorrelationData cd1 = cdCaptor.getAllValues().get(0);

    // simulate broker RETURN (unroutable) using the same message
    ReturnedMessage rm = new ReturnedMessage(
        sent1, 312, "NO_ROUTE", RabbitConfig.LEDGER_EXCHANGE, RabbitConfig.ROUTING_KEY);
    returnsCbCaptor.getValue().returnedMessage(rm);

    // simulate broker ACK (true)
    cd1.getFuture().complete(new CorrelationData.Confirm(true, null));

    // verify: NOT deleted due to prior RETURN
    verify(repo, never()).deleteById(id1);

    // metrics after first attempt
    assertThat(registry.counter("outbox_returned_total").count()).isEqualTo(1.0d);
    assertThat(registry.counter("outbox_published_total").count()).isEqualTo(0.0d);
    assertThat(registry.counter("outbox_nacked_total").count()).isEqualTo(1.0d);

    // --- Second publish: clean path (ACK only) ---
    reset(template);
    msgCaptor = ArgumentCaptor.forClass(Message.class);
    cdCaptor  = ArgumentCaptor.forClass(CorrelationData.class);
    doAnswer(inv -> null)
        .when(template)
        .convertAndSend(eq(RabbitConfig.LEDGER_EXCHANGE), eq(RabbitConfig.ROUTING_KEY), msgCaptor.capture(), cdCaptor.capture());

    UUID id2 = UUID.randomUUID();
    OutboxEvent evt2 = new OutboxEvent(id2, "Entry", "ledger.entry-recorded", "{\"k\":2}");
    publisher.publishAndConfirm(evt2);

    CorrelationData cd2 = cdCaptor.getAllValues().get(0);
    cd2.getFuture().complete(new CorrelationData.Confirm(true, null));

    // verify: deleted on success
    verify(repo).deleteById(id2);
    assertThat(registry.counter("outbox_published_total").count()).isEqualTo(1.0d);
  }
}

END CONTENT
-----8<----- END FILE: ledger-service\src\test\java\com\cashflowchallenge\ledger\infrastructure\messaging\OutboxPublisherReturnThenAckTest.java

-----8<----- FILE: ledger-service\src\test\resources\application-it.yml
Size: 409 bytes
SHA256: 1F8106FEF37956708ACEF546957F143F9D1D47BF700590AC066786505DC5D9EF
<<<BEGIN CONTENT
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/app
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
    locations: classpath:db/migration
    create-schemas: true
    schemas: ledger
    default-schema: ledger
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: app
    password: app
logging:
  level:
    root: INFO

END CONTENT
-----8<----- END FILE: ledger-service\src\test\resources\application-it.yml

-----8<----- FILE: make-project-dump.ps1
Size: 5962 bytes
SHA256: A0A0A2C490B72BD3A1465918523E06FB5C34E508B6D712E0BB4B3DBC9DB96F7B
<<<BEGIN CONTENT
<# make-project-dump.ps1
   Gera 1 TXT na raiz com: cabeçalho, tree (ou fallback), lista de arquivos
   e conteúdo completo (sem limite). Binários são pulados; use -IncludeBinary
   para gravar base64.
#>

param(
  [string]$Output = "project-dump.txt",
  [switch]$IncludeBinary
)

$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# ------------------ CONFIG ------------------
$ExcludeDirs = @(
  '.git','node_modules','target','build','out','dist','logs','bin','obj',
  '.idea','.vscode','.gradle','.venv','venv','coverage','.m2','.terraform',
  '.DS_Store'
)

$BinaryExt = @(
  '.png','.jpg','.jpeg','.gif','.bmp','.svg','.ico',
  '.pdf','.zip','.7z','.gz','.tar','.tgz','.rar',
  '.jar','.war','.ear','.class',
  '.exe','.dll','.so','.dylib',
  '.psd','.ai','.mp3','.wav','.mp4','.mov','.avi','.mkv','.iso',
  '.sqlite','.db','.parquet'
)

# ------------------ ROOT (FIX) ------------------
# Usa $PSScriptRoot quando disponível; senão, PSCommandPath; senão, CWD.
$Root = $PSScriptRoot
if ([string]::IsNullOrWhiteSpace($Root)) {
  if ($PSCommandPath) {
    $Root = Split-Path -Path $PSCommandPath -Parent
  } else {
    $Root = (Get-Location).Path
  }
}
Set-Location -LiteralPath $Root

# ------------------ OUTPUT ------------------
$OutFile = Join-Path $Root $Output
if (Test-Path -LiteralPath $OutFile) {
  Copy-Item -LiteralPath $OutFile -Destination "$OutFile.$(Get-Date -Format 'yyyyMMdd-HHmmss').bak" -Force
}
Set-Content -LiteralPath $OutFile -Value "" -Encoding UTF8

function Write-Line([string]$s = "") { Add-Content -LiteralPath $OutFile -Value $s }
function Write-Section([string]$title) {
  Write-Line ""
  Write-Line ("".PadLeft(80,'='))
  Write-Line ("=  $title")
  Write-Line ("".PadLeft(80,'='))
}

# ------------------ FILTERS ------------------
$dirsPattern  = ($ExcludeDirs | ForEach-Object { [regex]::Escape($_) }) -join '|'
$excludeRegex = [regex]::new("[\\/](?:$dirsPattern)[\\/]", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)

function ShouldSkipPath([string]$fullPath) { return $excludeRegex.IsMatch($fullPath) }
function IsBinaryByExt([string]$path) {
  $ext = [System.IO.Path]::GetExtension($path)
  if ([string]::IsNullOrEmpty($ext)) { return $false }
  return ($BinaryExt -contains $ext.ToLowerInvariant())
}

# ------------------ HEADER ------------------
Write-Section "PROJECT DUMP — HEADER"
Write-Line ("Timestamp       : {0}" -f (Get-Date -Format 'yyyy-MM-dd HH:mm:ss zzz'))
Write-Line ("Root            : {0}" -f $Root)
Write-Line ("PowerShell      : {0}" -f $PSVersionTable.PSVersion)
Write-Line ("OS              : {0}" -f [System.Environment]::OSVersion.VersionString)
Write-Line ("IncludeBinary   : {0}" -f ($IncludeBinary.IsPresent))

try {
  $null = Get-Command git -ErrorAction Stop
  $branch = (git rev-parse --abbrev-ref HEAD 2>$null)
  $commit = (git rev-parse --short HEAD 2>$null)
  $remote = (git remote -v 2>$null | Select-Object -First 1)
  if ($branch) { Write-Line ("Git Branch      : {0}" -f $branch.Trim()) }
  if ($commit) { Write-Line ("Git Commit      : {0}" -f $commit.Trim()) }
  if ($remote) { Write-Line ("Git Remote      : {0}" -f $remote.Trim()) }
} catch { Write-Line "Git             : not available" }

# ------------------ TREE ------------------
Write-Section "TREE (ASCII)"
$treeOk = $false
try {
  if ($env:ComSpec) {
    $tree = & $env:ComSpec /c "tree /F /A" 2>$null
    if ($LASTEXITCODE -eq 0 -and $tree) {
      $tree | Add-Content -LiteralPath $OutFile -Encoding UTF8
      $treeOk = $true
    }
  }
} catch { }
if (-not $treeOk) {
  Write-Line "[fallback] 'tree' indisponível; listando caminhos relativos:"
  Get-ChildItem -Recurse -Force | ForEach-Object {
    Write-Line ($_.FullName.Substring($Root.Length).TrimStart('\','/'))
  }
}

# ------------------ FILE LIST ------------------
Write-Section "FILE LIST (filtered)"
$allFiles = Get-ChildItem -Recurse -Force -File | Where-Object { -not (ShouldSkipPath $_.FullName) }
$relFiles = $allFiles | ForEach-Object {
  $_ | Add-Member -NotePropertyName RelPath -NotePropertyValue ($_.FullName.Substring($Root.Length).TrimStart('\','/')) -PassThru
}
$relFiles | Sort-Object RelPath | ForEach-Object { Write-Line $_.RelPath }
Write-Line ""
Write-Line ("Total files (after filters): {0}" -f $relFiles.Count)

# ------------------ CONTENTS ------------------
Write-Section "FILE CONTENTS"
foreach ($f in ($relFiles | Sort-Object RelPath)) {
  $full = $f.FullName
  $rel  = $f.RelPath

  Write-Line ("-----8<----- FILE: {0}" -f $rel)
  Write-Line ("Size: {0} bytes" -f $f.Length)
  try { Write-Line ("SHA256: {0}" -f (Get-FileHash -LiteralPath $full -Algorithm SHA256).Hash) }
  catch { Write-Line ("SHA256: <unavailable> ({0})" -f $_.Exception.Message) }

  $isBin = IsBinaryByExt $full
  if ($isBin -and -not $IncludeBinary) {
    Write-Line "[content skipped] Reason: binary extension"
  } else {
    try {
      if ($isBin -and $IncludeBinary) {
        Write-Line "<<<BEGIN BINARY BASE64"
        [byte[]]$bytes = [System.IO.File]::ReadAllBytes($full)
        [Convert]::ToBase64String($bytes) -split "(.{1,120})" | Where-Object { $_ } | ForEach-Object { Write-Line $_ }
        Write-Line "END BINARY BASE64"
      } else {
        Write-Line "<<<BEGIN CONTENT"
        $content = Get-Content -LiteralPath $full -Raw -ErrorAction Stop
        $content = $content -replace "`r`n","`n"
        Write-Line $content
        Write-Line "END CONTENT"
      }
    } catch {
      Write-Line ("[content skipped] Could not read file: {0}" -f $_.Exception.Message)
    }
  }
  Write-Line ("-----8<----- END FILE: {0}" -f $rel)
  Write-Line ""
}

# ------------------ SUMMARY ------------------
Write-Section "SUMMARY"
Write-Line ("Files listed : {0}" -f $relFiles.Count)
Write-Line ("Output file  : {0}" -f $OutFile)
Write-Line "Done."

END CONTENT
-----8<----- END FILE: make-project-dump.ps1

-----8<----- FILE: Makefile
Size: 1727 bytes
SHA256: 5A8F2797260827D0294A39B8A359F51C69D6183BCF7624AC9C6685130DFF614C
<<<BEGIN CONTENT
SHELL := /bin/sh

.PHONY: up down logs clean test smoke load

up:
	docker compose up -d --build

down:
	docker compose down -v

logs:
	@mkdir -p out
	docker compose logs --no-color > out/compose-logs.txt || true
	@echo "Logs written to out/compose-logs.txt"

clean:
	find . -name target -type d -prune -exec rm -rf {} +
	rm -rf out

test:
	mvn -q -T 1C clean verify

smoke:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/smoke.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/smoke.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/smoke.sh; \
	else echo "No shell for smoke test (need pwsh/powershell/bash)"; fi

load:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/load.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/load.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/load.sh; \
	else echo "No shell for load script (need pwsh/powershell/bash)"; fi

.PHONY: e2e it
e2e:
	@if command -v pwsh >/dev/null 2>&1; then pwsh -File ops/test-suite.ps1; \
	elif command -v powershell >/dev/null 2>&1; then powershell -File ops/test-suite.ps1; \
	elif command -v bash >/dev/null 2>&1; then bash ops/test-suite.sh; \
	else echo "No shell for test suite (need pwsh/powershell/bash)"; fi

it:
	docker compose --profile tester run --rm tester

.PHONY: secrets.dev
secrets.dev:
	@mkdir -p secrets
	@set -a; [ -f .env ] && . ./.env || true; set +a; \
	for v in API_KEY SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD SPRING_RABBITMQ_USERNAME SPRING_RABBITMQ_PASSWORD; do \
	  eval val="\$$v"; \
	  if [ -n "$$val" ]; then printf "%s" "$$val" > "secrets/$$v"; echo "wrote secrets/$$v"; else echo "skipped $$v (unset)"; fi; \
	done

END CONTENT
-----8<----- END FILE: Makefile

-----8<----- FILE: ops\grafana\provisioning\dashboards\dashboard.yml
Size: 208 bytes
SHA256: 9A17A58FFC203863C52F28B3465D76F94D93507A7A7E5A27E05D8878C8DF8F74
<<<BEGIN CONTENT
apiVersion: 1
providers:
  - name: 'Default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    updateIntervalSeconds: 10
    options:
      path: /etc/grafana/provisioning/dashboards


END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\dashboards\dashboard.yml

-----8<----- FILE: ops\grafana\provisioning\dashboards\spring-dashboard.json
Size: 2237 bytes
SHA256: 215BD8B8C2BA0FAE94B6CF849CF9FFD7A93BD995DBE6EDC9FFFF51654A2C36E4
<<<BEGIN CONTENT
{
  "annotations": {"list": []},
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "iteration": 1626,
  "links": [],
  "panels": [
    {
      "type": "graph",
      "title": "HTTP Server Requests",
      "targets": [
        {
          "expr": "sum(rate(http_server_requests_seconds_count[1m])) by (uri, status)",
          "legendFormat": "{{uri}} {{status}}",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0}
    },
    {
      "type": "graph",
      "title": "JVM Memory Used",
      "targets": [
        {
          "expr": "sum(jvm_memory_used_bytes{area=\"heap\"}) by (instance)",
          "legendFormat": "{{instance}}",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
    },
    {
      "type": "graph",
      "title": "Entries Processed",
      "targets": [
        {
          "expr": "rate(app_entries_processed_total[1m])",
          "legendFormat": "entries processed",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
    },
    {
      "type": "graph",
      "title": "Outbox Published (rate)",
      "targets": [
        {
          "expr": "rate(outbox_published_total[1m])",
          "legendFormat": "published",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 24}
    },
    {
      "type": "graph",
      "title": "Outbox Returned (rate)",
      "targets": [
        {
          "expr": "rate(outbox_returned_total[1m])",
          "legendFormat": "returned",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 32}
    },
    {
      "type": "graph",
      "title": "Outbox Nacked/Failures (rate)",
      "targets": [
        {
          "expr": "rate(outbox_nacked_total[1m])",
          "legendFormat": "nacked/failures",
          "refId": "A"
        }
      ],
      "gridPos": {"h": 8, "w": 24, "x": 0, "y": 40}
    }
  ],
  "schemaVersion": 27,
  "style": "dark",
  "tags": ["spring", "micrometer"],
  "templating": {"list": []},
  "time": {"from": "now-6h", "to": "now"},
  "timezone": "browser",
  "title": "Spring Boot Observability",
  "version": 1
}

END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\dashboards\spring-dashboard.json

-----8<----- FILE: ops\grafana\provisioning\datasources\datasource.yml
Size: 140 bytes
SHA256: 564E33B9048A1655F1EB36C86065BAF1283BEF84E397107DD1C1FDA05B5A05F1
<<<BEGIN CONTENT
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true


END CONTENT
-----8<----- END FILE: ops\grafana\provisioning\datasources\datasource.yml

-----8<----- FILE: ops\load.ps1
Size: 973 bytes
SHA256: 02E4044B198BB3C27D3DDD6023EC3ACDAF2DEF5C18A6C14DA63C3F83518853B9
<<<BEGIN CONTENT
param(
  [int]$Rps = 50,
  [string]$Duration = '15s',
  [double]$MaxLoss = 0.05,
  [string]$Date = (Get-Date -Format 'yyyy-MM-dd')
)
$ErrorActionPreference = 'Stop'
$api = "http://localhost:8080"
$stopAt = (Get-Date).Add([System.TimeSpan]::Parse($Duration))
[int]$ok = 0; [int]$err = 0

$script = {
  param($u)
  try { Invoke-RestMethod -Method Get -Uri $u -TimeoutSec 5 | Out-Null; 0 }
  catch { 1 }
}

while ((Get-Date) -lt $stopAt) {
  $urls = 1..$Rps | ForEach-Object { "$api/balances/daily?date=$Date" }
  $jobs = foreach ($u in $urls) { Start-ThreadJob -ScriptBlock $script -ArgumentList $u }
  Receive-Job -Job $jobs -Wait -AutoRemoveJob | ForEach-Object { if ($_ -eq 0) { $ok++ } else { $err++ } }
  Start-Sleep -Milliseconds 1000
}
$total = [math]::Max(1, $ok + $err)
$loss = $err / $total
if ($loss -gt $MaxLoss) { Write-Error "Loss ratio $([math]::Round($loss,4)) > $MaxLoss"; exit 1 }
Write-Host "OK: rps=$Rps duration=$Duration loss=$([math]::Round($loss,4))"

END CONTENT
-----8<----- END FILE: ops\load.ps1

-----8<----- FILE: ops\load.sh
Size: 1296 bytes
SHA256: 460E898945D666A2C2B322D838B2CA4D4D6517E0016D3159A31D34BD9D6EAD03
<<<BEGIN CONTENT
#!/usr/bin/env bash
set -euo pipefail

RPS=50
DUR="15s"
MAX_LOSS=0.05
DATE="$(date +%F)"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --rps) RPS="$2"; shift 2 ;;
    --duration) DUR="$2"; shift 2 ;;
    --max-loss) MAX_LOSS="$2"; shift 2 ;;
    --date) DATE="$2"; shift 2 ;;
    *) DATE="$1"; shift ;;
  esac
done

URL="http://localhost:8080/balances/daily?date=${DATE}"
SECS=${DUR%s}

echo "Load: ${RPS} rps for ${SECS}s on ${URL} (max-loss ${MAX_LOSS})"

ok=0
err=0

req_batch() {
  local out="$1"
  local code
  code=$(curl -s -m 3 -o /dev/null -w "%{http_code}" "$URL" || echo "000")
  echo "$code" >> "$out"
}

tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

for ((t=0;t<SECS;t++)); do
  outfile="$tmpdir/codes_$t.txt"
  : > "$outfile"
  # spawn RPS concurrent GETs
  seq 1 "$RPS" | xargs -I{} -P "$RPS" bash -c 'req_batch "$0"' "$outfile"
  # tally this second
  while read -r c; do
    if [[ "$c" =~ ^2[0-9][0-9]$ ]]; then ok=$((ok+1)); else err=$((err+1)); fi
  done < "$outfile"
done

total=$((ok+err))
loss=0
if (( total > 0 )); then
  loss=$(awk -v e=$err -v t=$total 'BEGIN{ printf "%.6f", (e/t) }')
fi
echo "Summary: total=$total 2xx=$ok errors=$err loss=$loss"

awk -v l=$loss -v m=$MAX_LOSS 'BEGIN{ if (l>m) exit 1 }' || { echo "FAIL: loss ratio > max-loss"; exit 1; }
echo "OK"

END CONTENT
-----8<----- END FILE: ops\load.sh

-----8<----- FILE: ops\prometheus\prometheus.yml
Size: 850 bytes
SHA256: 8445E709891ECE79F254FC6A108278D3ED65724D4943A81843924A986DD2B2BD
<<<BEGIN CONTENT
global:
  scrape_interval: 5s

scrape_configs:
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
    metrics_path: /metrics
  - job_name: 'api-gateway'
    static_configs:
      - targets: ['api-gateway:8080']
    metrics_path: /actuator/prometheus
  - job_name: 'ledger-service'
    static_configs:
      - targets: ['ledger-service:8081']
    metrics_path: /actuator/prometheus
  - job_name: 'consolidator-service'
    static_configs:
      - targets: ['consolidator-service:8082']
    metrics_path: /actuator/prometheus
  - job_name: 'balance-query-service'
    static_configs:
      - targets: ['balance-query-service:8083']
    metrics_path: /actuator/prometheus

rule_files:
  - /etc/prometheus/rules.yml
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
    metrics_path: /metrics

END CONTENT
-----8<----- END FILE: ops\prometheus\prometheus.yml

-----8<----- FILE: ops\prometheus\rules.yml
Size: 1307 bytes
SHA256: 06726A787A59A7FBED9F6DBDE1FA2611BBD1F6588CAC9DFA55DC9AF153DAA067
<<<BEGIN CONTENT
groups:
  - name: app-slo
    rules:
      - alert: OutboxStuck
        expr: outbox_unpublished_count > 0 and increase(outbox_publish_failed_total[5m]) > 0
        for: 5m
        labels: { severity: warning }
        annotations: { summary: "Outbox messages failing", description: "Outbox has failing publishes for >5m" }

      - alert: ConsolidatorDuplicatesSpike
        expr: increase(app_entries_duplicate_total[5m]) > 10
        for: 2m
        labels: { severity: info }
        annotations: { summary: "Duplicate messages rising" }

      - alert: ReadinessFlapping
        expr: probe_success == 0
        for: 1m
        labels: { severity: critical }
        annotations: { summary: "Service readiness failing" }

  - name: rate-limit-slo
    rules:
      - record: gateway_ratelimit_rejections_ratio_1m
        expr: |
          rate(gateway_ratelimit_rejected_total[1m])
            /
          (rate(gateway_ratelimit_rejected_total[1m])
           + rate(gateway_ratelimit_allowed_total[1m]) )
      - alert: BalanceQueriesRejectionsHigh
        expr: gateway_ratelimit_rejections_ratio_1m > 0.05
        for: 2m
        labels: { severity: warning }
        annotations:
          summary: "Balance queries rejection >5% (1m)"
          description: "Investigate throttling or scale out."

END CONTENT
-----8<----- END FILE: ops\prometheus\rules.yml

-----8<----- FILE: ops\requests.http
Size: 1778 bytes
SHA256: E5AC96A37A6A74EE96F9208BA7D6269BA7274B5E9A6FCFCB18FBA47A7C4F6205
<<<BEGIN CONTENT
@api = http://localhost:8080
@apiKey = admin
@today = {{$timestamp RFC3339}}
@yesterday = {{$datetime iso8601 (-P1D)}}
@rid = {{$uuid}}
@idem = {{$uuid}}

### Create CREDIT (201)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{idem}}
X-Request-Id: {{rid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 1000,
  "description": "credit"
}

### Replay CREDIT (200, same Location)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{idem}}
X-Request-Id: {{rid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 1000,
  "description": "credit"
}

### Create DEBIT (201)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "DEBIT",
  "amountCents": 700,
  "description": "debit"
}

### Get daily balance
GET {{api}}/balances/daily?date={{today}}
X-Request-Id: {{$uuid}}

### Rebuild (today..today)
POST {{api}}/consolidator/rebuild?from={{today}}&to={{today}}
X-API-Key: {{apiKey}}
X-Request-Id: {{$uuid}}

### GET rebuild status (replace {{jobId}} with returned value)
GET {{api}}/consolidator/rebuild/status/{{jobId}}
X-Request-Id: {{$uuid}}

### Security 403 (no API key)
POST {{api}}/ledger/entries
Content-Type: application/json
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "CREDIT",
  "amountCents": 100,
  "description": "no-key"
}

### Validation 400 (bad type)
POST {{api}}/ledger/entries
Content-Type: application/json
X-API-Key: {{apiKey}}
Idempotency-Key: {{$uuid}}
X-Request-Id: {{$uuid}}

{
  "occurredOn": "{{today}}",
  "type": "X",
  "amountCents": 100
}

END CONTENT
-----8<----- END FILE: ops\requests.http

-----8<----- FILE: ops\test-suite.ps1
Size: 19865 bytes
SHA256: 74F2BA67AEAE609661BA242454B3D52D11588C7D16C178407569EAD404F8D562
<<<BEGIN CONTENT
Param(
  [string]$Api = "http://localhost:8080",
  [string]$ApiKey = "admin",
  [switch]$NoTeardown,
  [switch]$Verbose,
  [switch]$Load
)

$ErrorActionPreference = 'Stop'
Set-StrictMode -Version Latest
if ($PSVersionTable.PSVersion.Major -lt 7) {
  Write-Error 'PowerShell 7 (pwsh) é obrigatório. Instale PS7 e execute novamente.'
  exit 1
}

#--- Run context & output folder ---
$Global:RunId   = Get-Date -Format "yyyyMMdd-HHmmss"
$Global:OutDir  = Join-Path "out" $RunId
New-Item -ItemType Directory -Force -Path $Global:OutDir | Out-Null

$Global:Steps = @()  # will collect structured step info
$ProgressPreference = 'SilentlyContinue'  # cleaner console

function Compose {
  try { docker compose version | Out-Null; docker compose @Args }
  catch { docker-compose @Args }
}

function Invoke-HttpStep {
  param(
    [Parameter(Mandatory)][ValidateSet('GET','POST','PUT','DELETE','PATCH')] [string]$Method,
    [Parameter(Mandatory)][string]$Url,
    [hashtable]$Headers,
    [string]$Body,
    [string]$Label = "step"
  )

  $ts   = Get-Date -Format "yyyyMMdd-HHmmssfff"
  $base = Join-Path $Global:OutDir "$ts-$Label"

  if ($Headers) { $Headers | ConvertTo-Json | Out-File "$base-headers.json" -Encoding utf8 }
  if ($Body)    { $Body                | Out-File "$base-req.json"     -Encoding utf8 }

  $invokeParams = @{ Method = $Method; Uri = $Url; SkipHttpErrorCheck = $true }
  if ($Headers) { $invokeParams.Headers = $Headers }
  if ($Body)    { $invokeParams.ContentType = 'application/json'; $invokeParams.Body = $Body }

  $resp = Invoke-WebRequest @invokeParams

  # ---- Console output (human-friendly) ----
  Write-Host "`n== $Label ==" -ForegroundColor Cyan
  Write-Host "-> $Method $Url"
  if ($Headers) { Write-Host "-> Headers:"; ($Headers.GetEnumerator() | Sort-Object Name | Format-Table -AutoSize | Out-String).Trim() | Write-Host }
  if ($Body)    { Write-Host "-> Payload:"; $Body | Write-Host }

  $statusColor = if([int]$resp.StatusCode -ge 400){'Red'}else{'Green'}
  Write-Host "<- Status: $($resp.StatusCode)" -ForegroundColor $statusColor
  if ($resp.Headers.Location) { Write-Host "<- Location: $($resp.Headers.Location)" }

  $pretty = $null
  if ($resp.Content) {
    try   { $pretty = $resp.Content | ConvertFrom-Json | ConvertTo-Json -Depth 15 }
    catch { $pretty = $resp.Content }
    Write-Host $pretty
  }

  # ---- Artifacts ----
  $resp.Content | Out-File "$base-resp.json" -Encoding utf8
  "$( [int]$resp.StatusCode )" | Out-File "$base-status.txt" -Encoding ascii
  if ($resp.Headers.Location) { "$($resp.Headers.Location)" | Out-File "$base-location.txt" -Encoding utf8 }

  # ---- Append to in-memory step log ----
  $entry = [pscustomobject]@{
    ts       = (Get-Date).ToString("o")
    label    = $Label
    method   = $Method
    url      = $Url
    status   = [int]$resp.StatusCode
    location = "$($resp.Headers.Location)"
    request  = if ($Body) { try { $Body | ConvertFrom-Json } catch { $Body } } else { $null }
    response = if ($pretty) { try { $pretty | ConvertFrom-Json } catch { $pretty } } else { $null }
  }
  $Global:Steps += $entry

  return $resp
}

Write-Host "`n== Subindo stack ==" -ForegroundColor Cyan
Compose down -v | Out-Null
Compose up -d --build | Out-Null
Compose ps

# Aguardar healthchecks via endpoints (inclui gateway)
function Wait-Healthy {
  param([string]$Url, [int]$TimeoutSec = 60)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  do {
    try {
      $r = Invoke-RestMethod -Method Get -Uri $Url -TimeoutSec 5 -ErrorAction Stop
      if ($r.status -eq 'UP') { return $true }
    } catch { }
    Start-Sleep -Seconds 1
  } while ((Get-Date) -lt $deadline)
  return $false
}

if(-not (Wait-Healthy -Url 'http://localhost:8080/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Gateway not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8081/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Ledger not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8082/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Consolidator not healthy' }
if(-not (Wait-Healthy -Url 'http://localhost:8083/actuator/health' -TimeoutSec 60)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Balance not healthy' }

function Dump-Logs {
  Write-Host "`n== Últimos logs (10m, tail 200) ==" -ForegroundColor Yellow
  try { Compose ps | Out-String | Write-Host } catch {}
  foreach ($s in 'postgres','rabbitmq','ledger-service','consolidator-service','balance-query-service','api-gateway') {
    Write-Host "`n-- $s --" -ForegroundColor Yellow
    try { Compose logs --no-color $s --since=10m | Select-Object -Last 500 | Out-String | Write-Host } catch {}
  }
}

trap {
  Dump-Logs
  if(-not $NoTeardown){ Compose down -v | Out-Null }
  exit 1
}

$day  = Get-Date -Format 'yyyy-MM-dd'
$idem = [guid]::NewGuid().Guid
$body = @{ occurredOn=$day; type='CREDIT'; amountCents=1000; description='smoke' } | ConvertTo-Json

Write-Host "`n== POST /ledger/entries (201) ==" -ForegroundColor Cyan
$r1 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idem } -Body $body -Label 'ledger-create'
$r1.StatusCode; $loc = $r1.Headers.Location
if ($r1.StatusCode -ne 201) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Esperado 201, obtido $($r1.StatusCode)" }
if($Verbose){ $r1.RawContent }

# Guardar consistência eventual: aguardar saldo pelo menos 1000
function Wait-UntilBalanceAtLeast {
  param([string]$ApiBase,[string]$Date,[int]$MinCents,[int]$TimeoutSec=30)
  $deadline = (Get-Date).AddSeconds($TimeoutSec)
  do {
    try {
      $res = Invoke-RestMethod -Method Get -Uri "$ApiBase/balances/daily?date=$Date" -TimeoutSec 5 -ErrorAction Stop
      $balance = if ($res.balanceCents -is [int]) { $res.balanceCents } else { [int]($res | Select-Object -ExpandProperty balanceCents) }
      if ($balance -ge $MinCents) { return $true }
    } catch { }
    Start-Sleep -Seconds 1
  } while ((Get-Date) -lt $deadline)
  return $false
}
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents 1000 -TimeoutSec 30)) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw 'Daily balance did not reach expected value within timeout' }

Write-Host "`n== Replay mesma chave (200 + mesma Location) ==" -ForegroundColor Cyan
$r2 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idem } -Body $body -Label 'ledger-replay'
$r2.StatusCode; if ($r2.StatusCode -ne 200) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Esperado 200, obtido $($r2.StatusCode)" }
if ($r2.Headers.Location -ne $loc) { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Location diferente no replay" }
if($Verbose){ $r2.RawContent }

Write-Host "`n== GET /balances/daily ==" -ForegroundColor Cyan
$rDaily = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'balances-daily'
$respDaily = $null; try { $respDaily = $rDaily.Content | ConvertFrom-Json } catch { $respDaily = $null }
if(-not $respDaily.balanceCents -or $respDaily.balanceCents -le 0){ if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Saldo diário inválido: $($respDaily | ConvertTo-Json -Compress)" }
if($Verbose){ $respDaily | ConvertTo-Json -Compress }

Write-Host "`n== Rebuild replace-only (D..D) ==" -ForegroundColor Cyan
$h = @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid }
$rJob = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$day&to=$day" -Headers $h -Label 'rebuild-start-today'
$job = $null; try { $job = $rJob.Content | ConvertFrom-Json } catch { $job = $null }
$jid = $job.jobId

$deadline = (Get-Date).AddSeconds(60)
do {
  $st = Invoke-RestMethod -Method Get "$Api/consolidator/rebuild/status/$jid"
  Write-Host "status =" $st.status
  if ($st.status -in @('COMPLETED','DONE')) { break }
  if ($st.status -eq 'FAILED') { if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Rebuild FAILED" }
  Start-Sleep -Seconds 1
} while ((Get-Date) -lt $deadline)

Write-Host "`n== GET /balances/daily após rebuild (deve permanecer 1000) ==" -ForegroundColor Cyan
$rAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'balances-daily-after-rebuild'
$after = $null; try { $after = $rAfter.Content | ConvertFrom-Json } catch { $after = $null }
if($Verbose){ $after | ConvertTo-Json -Compress }
if($after.balanceCents -ne $respDaily.balanceCents){ if(-not $NoTeardown){ Compose down -v | Out-Null }; throw "Saldo mudou após rebuild ($($respDaily.balanceCents) -> $($after.balanceCents))" }

# -------- Scenario A: BASIC DEBIT --------
Write-Host "`n== Scenario: BASIC DEBIT (same-day) ==" -ForegroundColor Cyan
$todayStart = $after.balanceCents
$amt = 700
$idemA = [guid]::NewGuid().Guid
$bodyA = @{ occurredOn=$day; type='DEBIT'; amountCents=$amt; description='debit-smoke' } | ConvertTo-Json
$ra1 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemA } -Body $bodyA -Label 'debit-create'
Write-Host "status=$($ra1.StatusCode) location=$($ra1.Headers.Location)"; if($ra1.StatusCode -ne 201){ throw 'Scenario A: expected 201' }
$ra2 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemA } -Body $bodyA -Label 'debit-replay'
Write-Host "replay status=$($ra2.StatusCode) location=$($ra2.Headers.Location)"; if($ra2.StatusCode -ne 200 -or $ra2.Headers.Location -ne $ra1.Headers.Location){ throw 'Scenario A: replay 200/location' }
$expA = $todayStart - $amt
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expA -TimeoutSec 30)){ throw 'Scenario A: expected balance not reached' }
$rTodayAfterA = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-A-daily-after'
$todayAfterAObj = $null; try { $todayAfterAObj = $rTodayAfterA.Content | ConvertFrom-Json } catch { $todayAfterAObj = $null }
$todayAfterA = $todayAfterAObj.balanceCents
if($todayAfterA -ne $expA){ throw "Scenario A: expected $expA got $todayAfterA" }
Write-Host 'PASS scenario A'

# -------- Scenario B: MIXED same-day --------
Write-Host "`n== Scenario: MIXED same-day (+500,+400,-200) ==" -ForegroundColor Cyan
$baseB = $todayAfterA
$null = New-Item -ItemType Directory -Force -Path out | Out-Null
function Post-One([string]$t,[int]$v,[string]$d,[string]$tag){
  $ib=[guid]::NewGuid().Guid; $b=@{occurredOn=$day;type=$t;amountCents=$v;description=$d}|ConvertTo-Json
  $label = "scenario-"+$tag
  $resp = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$ib } -Body $b -Label $label
  return $resp
}
Post-One 'CREDIT' 500 'mix1' 'B-1' | Out-Null; Post-One 'CREDIT' 400 'mix2' 'B-2' | Out-Null; Post-One 'DEBIT' 200 'mix3' 'B-3' | Out-Null
$expB = $baseB + 700
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expB -TimeoutSec 30)){ throw 'Scenario B: expected balance not reached' }
$rCurB = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-B-daily-after'
$curBObj = $null; try { $curBObj = $rCurB.Content | ConvertFrom-Json } catch { $curBObj = $null }
$curB = $curBObj.balanceCents
if($curB -ne $expB){ throw "Scenario B: expected $expB got $curB" }
Write-Host 'PASS scenario B'

# -------- Scenario C: MULTI-DAY --------
Write-Host "`n== Scenario: MULTI-DAY (yesterday + today) ==" -ForegroundColor Cyan
$yday = (Get-Date).AddDays(-1).ToString('yyyy-MM-dd')
$rY0 = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-C-yday-before'
$y0Obj = $null; try { $y0Obj = $rY0.Content | ConvertFrom-Json } catch { $y0Obj = $null }
$y0 = $y0Obj.balanceCents
$rT0 = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-C-today-before'
$t0Obj = $null; try { $t0Obj = $rT0.Content | ConvertFrom-Json } catch { $t0Obj = $null }
$t0 = $t0Obj.balanceCents
Post-One 'CREDIT' 300 'ycredit'
$idemTd = [guid]::NewGuid().Guid; $bd=@{occurredOn=$day;type='DEBIT';amountCents=100;description='tdebit'}|ConvertTo-Json
Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=$idemTd } -Body $bd -Label 'multi-day-today-debit' | Out-Null
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $yday -MinCents ($y0+300) -TimeoutSec 30)){ throw 'Scenario C: yesterday not reached' }
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents ($t0-100) -TimeoutSec 30)){ throw 'Scenario C: today not reached' }
$rYNow = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-C-yday-after'
$yNowObj = $null; try { $yNowObj = $rYNow.Content | ConvertFrom-Json } catch { $yNowObj = $null }
$yNow = $yNowObj.balanceCents
$rTNow = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-C-today-after'
$tNowObj = $null; try { $tNowObj = $rTNow.Content | ConvertFrom-Json } catch { $tNowObj = $null }
$tNow = $tNowObj.balanceCents
if($yNow -ne ($y0+300) -or $tNow -ne ($t0-100)){ throw "Scenario C: expected Y=$($y0+300) T=$($t0-100) got Y=$yNow T=$tNow" }
Write-Host 'PASS scenario C'

# -------- Scenario D: REBUILD invariance --------
Write-Host "`n== Scenario: REBUILD invariance (yesterday..today) ==" -ForegroundColor Cyan
$preY=$yNow; $preT=$tNow
$rjob2 = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$yday&to=$day" -Headers @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid } -Label 'rebuild-start-yday-today'
$job2 = $null; try { $job2 = $rjob2.Content | ConvertFrom-Json } catch { $job2 = $null }
$jid2 = $job2.jobId
if(-not $jid2){ throw 'Scenario D: no jobId' }
for($i=0;$i -lt 60;$i++){ $st2=(Invoke-RestMethod "$Api/consolidator/rebuild/status/$jid2").status; if($st2 -in @('COMPLETED','DONE')){ break }; Start-Sleep 1 }
$rYAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-D-yday-after'
$yAfterObj = $null; try { $yAfterObj = $rYAfter.Content | ConvertFrom-Json } catch { $yAfterObj = $null }
$yAfter = $yAfterObj.balanceCents
$rTAfter = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-D-today-after'
$tAfterObj = $null; try { $tAfterObj = $rTAfter.Content | ConvertFrom-Json } catch { $tAfterObj = $null }
$tAfter = $tAfterObj.balanceCents
if($yAfter -ne $preY -or $tAfter -ne $preT){ throw 'Scenario D: balances changed after rebuild' }
Write-Host 'PASS scenario D'

# -------- Scenario E: Security 403 --------
Write-Host "`n== Scenario: SECURITY 403 (missing API key) ==" -ForegroundColor Cyan
$r403 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Body $body -Label 'security-403'
if([int]$r403.StatusCode -ne 403){ throw "Scenario E: expected 403 got $($r403.StatusCode)" }
Write-Host 'PASS scenario E'

# -------- Scenario F: Validation 400 --------
Write-Host "`n== Scenario: VALIDATION 400 (bad payload) ==" -ForegroundColor Cyan
$bad = @{ occurredOn=$day; type='X'; amountCents=100 } | ConvertTo-Json
$r400 = Invoke-HttpStep -Method POST -Url "$Api/ledger/entries" -Headers @{ 'X-API-Key'=$ApiKey; 'Idempotency-Key'=[guid]::NewGuid().Guid } -Body $bad -Label 'validation-400'
if([int]$r400.StatusCode -ne 400){ throw "Scenario F: expected 400 got $($r400.StatusCode)" }
Write-Host 'PASS scenario F'

# -------- Scenario G: Multiple DEBITs same-day --------
Write-Host "`n== Scenario: MULTIPLE DEBITS (same-day) ==" -ForegroundColor Cyan
$rBaseG = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-G-daily-before'
$baseGObj = $null; try { $baseGObj = $rBaseG.Content | ConvertFrom-Json } catch { $baseGObj = $null }
$baseG = $baseGObj.balanceCents
Post-One 'DEBIT' 300 'gdebit1' 'G-1' | Out-Null
Post-One 'DEBIT' 200 'gdebit2' 'G-2' | Out-Null
$expG = $baseG - 500
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expG -TimeoutSec 30)){ throw 'Scenario G: expected balance not reached' }
$rCurG = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-G-daily-after'
$curGObj = $null; try { $curGObj = $rCurG.Content | ConvertFrom-Json } catch { $curGObj = $null }
$curG = $curGObj.balanceCents
if($curG -ne $expG){ throw "Scenario G: expected $expG got $curG" }
Write-Host 'PASS scenario G'

# -------- Scenario H: Mixed reordered (+500,-200,+400) --------
Write-Host "`n== Scenario: MIX REORDERED (+500,-200,+400) ==" -ForegroundColor Cyan
$rBaseH = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-H-daily-before'
$baseHObj = $null; try { $baseHObj = $rBaseH.Content | ConvertFrom-Json } catch { $baseHObj = $null }
$baseH = $baseHObj.balanceCents
Post-One 'CREDIT' 500 'hcredit1' 'H-1' | Out-Null
Post-One 'DEBIT' 200 'hdebit' 'H-2' | Out-Null
Post-One 'CREDIT' 400 'hcredit2' 'H-3' | Out-Null
$expH = $baseH + 700
if(-not (Wait-UntilBalanceAtLeast -ApiBase $Api -Date $day -MinCents $expH -TimeoutSec 30)){ throw 'Scenario H: expected balance not reached' }
$rCurH = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-H-daily-after'
$curHObj = $null; try { $curHObj = $rCurH.Content | ConvertFrom-Json } catch { $curHObj = $null }
$curH = $curHObj.balanceCents
if($curH -ne $expH){ throw "Scenario H: expected $expH got $curH" }
Write-Host 'PASS scenario H'

# -------- Scenario I: Multi-day rebuild invariance --------
Write-Host "`n== Scenario: REBUILD invariance (multi-day) ==" -ForegroundColor Cyan
$rPreYi = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-I-yday-before'
$preYiObj = $null; try { $preYiObj = $rPreYi.Content | ConvertFrom-Json } catch { $preYiObj = $null }
$preYi = $preYiObj.balanceCents
$rPreTi = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-I-today-before'
$preTiObj = $null; try { $preTiObj = $rPreTi.Content | ConvertFrom-Json } catch { $preTiObj = $null }
$preTi = $preTiObj.balanceCents
$rji = Invoke-HttpStep -Method POST -Url "$Api/consolidator/rebuild?from=$yday&to=$day" -Headers @{ 'X-API-Key'=$ApiKey; 'X-Request-Id'=[guid]::NewGuid().Guid } -Label 'rebuild-start-yday-to-today'
$ji = $null; try { $ji = $rji.Content | ConvertFrom-Json } catch { $ji = $null }
$jidI = $ji.jobId
for($i=0;$i -lt 60;$i++){ $sti=(Invoke-RestMethod "$Api/consolidator/rebuild/status/$jidI").status; if($sti -in @('COMPLETED','DONE')){ break }; Start-Sleep 1 }
$rYAfterI = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$yday" -Label 'scenario-I-yday-after'
$yAfterIObj = $null; try { $yAfterIObj = $rYAfterI.Content | ConvertFrom-Json } catch { $yAfterIObj = $null }
$yAfterI = $yAfterIObj.balanceCents
$rTAfterI = Invoke-HttpStep -Method GET -Url "$Api/balances/daily?date=$day" -Label 'scenario-I-today-after'
$tAfterIObj = $null; try { $tAfterIObj = $rTAfterI.Content | ConvertFrom-Json } catch { $tAfterIObj = $null }
$tAfterI = $tAfterIObj.balanceCents
if($yAfterI -ne $preYi -or $tAfterI -ne $preTi){ throw 'Scenario I: balances changed after rebuild' }
Write-Host 'PASS scenario I'

if($Load){
  Write-Host "`n== Micro-load (50 rps, 15s, loss<=5%) ==" -ForegroundColor Cyan
  pwsh -File ops/load.ps1 -Rps 50 -Duration '15s' -MaxLoss 0.05 -Date $day
}

Write-Host "`nOK: testes concluídos" -ForegroundColor Green
Write-Host "`n== SUMMARY ==" -ForegroundColor Green
$Global:Steps |
  Select-Object ts,label,method,url,status,location |
  Format-Table -AutoSize

# Persist summary for CI / local inspection
$Global:Steps | ConvertTo-Json -Depth 15 | Out-File (Join-Path $Global:OutDir 'summary.json') -Encoding utf8
$Global:Steps | Export-Csv -NoTypeInformation (Join-Path $Global:OutDir 'summary.csv')

if(-not $NoTeardown){ Compose down -v | Out-Null }

END CONTENT
-----8<----- END FILE: ops\test-suite.ps1

-----8<----- FILE: ops\test-suite.sh
Size: 13916 bytes
SHA256: F6AA588032CC87BE98041AB8A512E6A2FFA1B2FC26DA04DFEF19DDE60C731281
<<<BEGIN CONTENT
#!/usr/bin/env bash
set -euo pipefail

# -------- Config --------
API="${API:-http://localhost:8080}"
API_KEY="${API_KEY:-admin}"
PROM_PORT="${PROM_PORT:-19090}"
DAY="$(date +%F)"
NO_TEARDOWN=false
VERBOSE=false
DO_LOAD=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --no-teardown) NO_TEARDOWN=true; shift ;;
    --verbose) VERBOSE=true; shift ;;
    --load) DO_LOAD=true; shift ;;
    *) shift ;;
  esac
done

# Compose command fallback
compose() {
  if docker compose version >/dev/null 2>&1; then docker compose "$@"
  elif docker-compose version >/dev/null 2>&1; then docker-compose "$@"
  else
    echo "ERROR: docker compose not found"; exit 1
  fi
}

uuid() {
  if command -v uuidgen >/dev/null 2>&1; then uuidgen
  else python3 - <<'PY'
import uuid; print(uuid.uuid4())
PY
  fi
}

header() { echo; echo "== $* =="; }

# Health wait using actuator endpoint
wait_health_url() {
  local url="$1"; local timeout="${2:-60}"; local end=$(( SECONDS + timeout ))
  while (( SECONDS < end )); do
    if out=$(curl -sf "$url" 2>/dev/null) && [[ "$out" == *'"status"'*'"UP"'* ]]; then
      return 0
    fi
    sleep 1
  done
  return 1
}

# Balance polling (eventual consistency)
wait_balance_at_least() {
  local api="$1"; local d="$2"; local min="$3"; local timeout="${4:-30}"; local end=$(( SECONDS + timeout ))
  while (( SECONDS < end )); do
    if out=$(curl -sf "$api/balances/daily?date=$d" 2>/dev/null); then
      bal=$(echo "$out" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9]\+\).*/\1/p')
      [[ -z "$bal" ]] && bal=$(echo "$out" | awk '/balanceCents/ {print $1}' | tail -n1)
      if [[ -n "$bal" && "$bal" -ge "$min" ]]; then return 0; fi
    fi
    sleep 1
  done
  return 1
}

# Dump last logs on failure for quick diagnostics
dump_logs() {
  echo "\n== Últimos logs (10m, tail -n 200) =="
  compose ps || true
  for s in postgres rabbitmq ledger-service consolidator-service balance-query-service api-gateway; do
    echo "\n-- $s --"
    compose logs --no-color --since=10m "$s" 2>/dev/null | tail -n 500 || true
  done
}

# Trap any error to print logs and optionally teardown
on_err() {
  dump_logs
  $NO_TEARDOWN || compose down -v || true
  exit 1
}
trap on_err ERR

# -------- Bring up stack --------
header "Subindo stack (PROM_PORT=$PROM_PORT)"
export PROM_PORT
compose down -v
compose up -d --build

header "Serviços"
compose ps

header "Aguardando healthchecks (gateway e serviços)"
wait_health_url "http://localhost:8080/actuator/health" 60 || { echo "FAIL health gateway"; exit 1; }
wait_health_url "http://localhost:8081/actuator/health" 60 || { echo "FAIL health ledger"; exit 1; }
wait_health_url "http://localhost:8082/actuator/health" 60 || { echo "FAIL health consolidator"; exit 1; }
wait_health_url "http://localhost:8083/actuator/health" 60 || { echo "FAIL health balance"; exit 1; }

# -------- Smoke: ledger idempotency --------
IDEM="$(uuid)"
BODY="$(cat <<JSON
{"occurredOn":"$DAY","type":"CREDIT","amountCents":1000,"description":"smoke"}
JSON
)"

header "POST /ledger/entries (espera 201)"
mkdir -p out
echo "$BODY" > out/scenario-A-credit-req.json
H1=$(curl -sS -D - -o out/scenario-A-credit-resp.txt -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM" \
  --data "$BODY")
S1=$(printf "%s" "$H1" | awk 'NR==1{print $2}')
LOC1=$(printf "%s" "$H1" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$S1 location=$LOC1"; [ "$S1" = "201" ] || { echo "FAIL 201"; exit 1; }
[[ "$VERBOSE" == true ]] && { echo "Request headers: Content-Type: application/json, X-API-Key: $API_KEY, Idempotency-Key: $IDEM"; printf '%s\n' "$H1"; cat out/scenario-A-credit-resp.txt; }

# Guard against eventual consistency: wait until balance reflects the write
AMOUNT=1000
header "Aguardando saldo diário refletir $AMOUNT (até 30s)"
wait_balance_at_least "$API" "$DAY" "$AMOUNT" 30 || { echo "FAIL: Daily balance did not reach expected value"; exit 1; }

header "Replay mesma chave (espera 200 e mesma Location)"
H2=$(curl -sS -D - -o out/scenario-A-credit-replay-resp.txt -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM" \
  --data "$BODY")
S2=$(printf "%s" "$H2" | awk 'NR==1{print $2}')
LOC2=$(printf "%s" "$H2" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$S2 location=$LOC2"; [ "$S2" = "200" ] || { echo "FAIL 200"; $NO_TEARDOWN || compose down -v; exit 1; }
[ "$LOC1" = "$LOC2" ] || { echo "FAIL Location mismatch"; $NO_TEARDOWN || compose down -v; exit 1; }
[[ "$VERBOSE" == true ]] && { echo "Request headers: Content-Type: application/json, X-API-Key: $API_KEY, Idempotency-Key: $IDEM"; printf '%s\n' "$H2"; cat out/scenario-A-credit-replay-resp.txt; }

header "GET /balances/daily?date=$DAY (deve refletir 1000)"
B1=$(curl -sS "$API/balances/daily?date=$DAY")
echo "$B1" | sed 's/.*/&/' > out/scenario-A-daily-resp.json
echo "$B1"
BEFORE=$(printf "%s" "$B1" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')

# -------- Rebuild replace-only --------
header "POST /consolidator/rebuild (D..D) -> jobId"
REQID="$(uuid)"
JOB=$(curl -sS -X POST "$API/consolidator/rebuild?from=$DAY&to=$DAY" -H "X-API-Key: $API_KEY" -H "X-Request-Id: $REQID")
echo "$JOB"
JID=$(printf "%s" "$JOB" | sed -n 's/.*"jobId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')

header "Aguardando status COMPLETED/DONE"
for i in $(seq 1 60); do
  ST=$(curl -sS "$API/consolidator/rebuild/status/$JID")
  echo "$ST"
  if echo "$ST" | grep -Eiq '"status"\s*:\s*"(COMPLETED|DONE)"'; then break; fi
  if echo "$ST" | grep -Eiq '"status"\s*:\s*"FAILED"'; then echo "FAIL rebuild"; $NO_TEARDOWN || compose down -v; exit 1; fi
  sleep 1
done

header "GET /balances/daily?date=$DAY (deve permanecer 1000 mesmo após rebuild)"
B2=$(curl -sS "$API/balances/daily?date=$DAY")
echo "$B2"
AFTER=$(printf "%s" "$B2" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
if [[ "$AFTER" != "$BEFORE" ]]; then echo "FAIL: saldo mudou após rebuild ($BEFORE -> $AFTER)"; $NO_TEARDOWN || compose down -v; exit 1; fi

# -------- Scenario A: Basic DEBIT (same-day) --------
header "Scenario: BASIC DEBIT (same-day)"
TODAY_START=$AFTER
AMT_DEBIT=700
IDEM_DA=$(uuid)
BODY_DA="$(cat <<JSON
{"occurredOn":"$DAY","type":"DEBIT","amountCents":$AMT_DEBIT,"description":"debit-smoke"}
JSON
)"
echo "Request:"; echo "$BODY_DA"
HDA1=$(curl -sS -D - -o /dev/null -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM_DA" \
  --data "$BODY_DA")
SDA1=$(printf "%s" "$HDA1" | awk 'NR==1{print $2}')
LDA1=$(printf "%s" "$HDA1" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "status=$SDA1 location=$LDA1"; [ "$SDA1" = "201" ] || { echo "FAIL scenario A (201)"; exit 1; }
HDA2=$(curl -sS -D - -o /dev/null -X POST "$API/ledger/entries" \
  -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $IDEM_DA" \
  --data "$BODY_DA")
SDA2=$(printf "%s" "$HDA2" | awk 'NR==1{print $2}')
LDA2=$(printf "%s" "$HDA2" | awk 'BEGIN{IGNORECASE=1}/^location:/{sub(/\r$/,"\");print $2}')
echo "replay status=$SDA2 location=$LDA2"; [ "$SDA2" = "200" ] || { echo "FAIL scenario A (200 replay)"; exit 1; }
[ "$LDA1" = "$LDA2" ] || { echo "FAIL scenario A (Location mismatch)"; exit 1; }
EXP_TODAY=$(( TODAY_START - AMT_DEBIT ))
wait_balance_at_least "$API" "$DAY" "$EXP_TODAY" 30 || { echo "FAIL scenario A (did not reach expected balance)"; exit 1; }
TODAY_AFTER_A=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$TODAY_AFTER_A" = "$EXP_TODAY" ] || { echo "FAIL scenario A (expected $EXP_TODAY, got $TODAY_AFTER_A)"; exit 1; }
echo "PASS scenario A"

# -------- Scenario B: Mixed same-day (2x CREDIT, 1x DEBIT) --------
header "Scenario: MIXED same-day (+500,+400,-200)"
BASE_B=$TODAY_AFTER_A
post_entry() { local body="$1"; local key=$(uuid); curl -sS -o /dev/null -w "%{http_code}" -D /dev/null -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $key" --data "$body"; }
BODY_C1='{"occurredOn":"'"$DAY"'","type":"CREDIT","amountCents":500,"description":"mix1"}'
BODY_C2='{"occurredOn":"'"$DAY"'","type":"CREDIT","amountCents":400,"description":"mix2"}'
BODY_D1='{"occurredOn":"'"$DAY"'","type":"DEBIT","amountCents":200,"description":"mix3"}'
post_entry "$BODY_C1" >/dev/null
post_entry "$BODY_C2" >/dev/null
post_entry "$BODY_D1" >/dev/null
EXP_B=$(( BASE_B + 700 ))
wait_balance_at_least "$API" "$DAY" "$EXP_B" 30 || { echo "FAIL scenario B (did not reach expected)"; exit 1; }
CUR_B=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$CUR_B" = "$EXP_B" ] || { echo "FAIL scenario B (expected $EXP_B got $CUR_B)"; exit 1; }
echo "PASS scenario B"

# -------- Scenario C: Multi-day (yesterday + today) --------
header "Scenario: MULTI-DAY (yesterday + today)"
YDAY=$(python3 - <<'PY'
import datetime;print((datetime.date.today()-datetime.timedelta(days=1)).strftime('%Y-%m-%d'))
PY
)
Y0=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p'); Y0=${Y0:-0}
T0=$CUR_B
BODY_YC='{"occurredOn":"'"$YDAY"'","type":"CREDIT","amountCents":300,"description":"ycredit"}'
BODY_TD='{"occurredOn":"'"$DAY"'","type":"DEBIT","amountCents":100,"description":"tdebit"}'
post_entry "$BODY_YC" >/dev/null
post_entry "$BODY_TD" >/dev/null
EXP_Y=$(( Y0 + 300 ))
wait_balance_at_least "$API" "$YDAY" "$EXP_Y" 30 || { echo "FAIL scenario C (yesterday not reached)"; exit 1; }
EXP_T=$(( T0 - 100 ))
wait_balance_at_least "$API" "$DAY" "$EXP_T" 30 || { echo "FAIL scenario C (today not reached)"; exit 1; }
Y_NOW=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
T_NOW=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$Y_NOW" = "$EXP_Y" ] && [ "$T_NOW" = "$EXP_T" ] || { echo "FAIL scenario C (expected Y=$EXP_Y,T=$EXP_T got Y=$Y_NOW,T=$T_NOW)"; exit 1; }
echo "PASS scenario C"

# -------- Scenario D: Rebuild invariance (yesterday..today) --------
header "Scenario: REBUILD invariance (yesterday..today)"
PRE_Y=$Y_NOW; PRE_T=$T_NOW
REQID2=$(uuid)
JOB2=$(curl -sS -X POST "$API/consolidator/rebuild?from=$YDAY&to=$DAY" -H "X-API-Key: $API_KEY" -H "X-Request-Id: $REQID2")
JID2=$(printf "%s" "$JOB2" | sed -n 's/.*"jobId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')
for i in $(seq 1 60); do ST2=$(curl -sS "$API/consolidator/rebuild/status/$JID2"); echo "$ST2"; echo "$ST2" | grep -Eiq '"status"\s*:\s*"(COMPLETED|DONE)"' && break; sleep 1; done
Y_AFTER=$(curl -sS "$API/balances/daily?date=$YDAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
T_AFTER=$(curl -sS "$API/balances/daily?date=$DAY" | sed -n 's/.*"balanceCents"[[:space:]]*:[[:space:]]*\([0-9-]*\).*/\1/p')
[ "$Y_AFTER" = "$PRE_Y" ] && [ "$T_AFTER" = "$PRE_T" ] || { echo "FAIL scenario D (balances changed after rebuild)"; exit 1; }
echo "PASS scenario D"

# -------- Scenario E: Security 403 --------
header "Scenario: SECURITY 403 (missing API key)"
code=$(curl -sS -o /dev/null -w "%{http_code}" -X POST "$API/ledger/entries" -H "Content-Type: application/json" --data "$BODY")
[ "$VERBOSE" == true ] && echo "POST without key body: $BODY"
[ "$code" = "403" ] || { echo "FAIL scenario E (expected 403 got $code)"; exit 1; }
echo "PASS scenario E"

# -------- Scenario F: Validation 400 --------
header "Scenario: VALIDATION 400 (bad payload)"
BAD='{"occurredOn":"'"$DAY"'","type":"X","amountCents":100}'
echo "$BAD" > out/scenario-F-bad-req.json
code=$(curl -sS -o /dev/null -w "%{http_code}" -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BAD")
[ "$code" = "400" ] || { echo "FAIL scenario F (expected 400 got $code)"; exit 1; }
echo "PASS scenario F"

if [[ "$DO_LOAD" == true ]]; then
  header "Micro-load (50 rps, 15s, max-loss 5%)"
  bash ops/load.sh --rps 50 --duration 15s --max-loss 0.05 --date "$DAY"
fi

header "OK: testes concluídos"
$NO_TEARDOWN || compose down -v
echo "$BODY_DA" > out/scenario-A-debit-req.json
HDA1=$(curl -sS -D - -o out/scenario-A-debit-resp.txt -X POST "$API/ledger/entries" \
HDA2=$(curl -sS -D - -o out/scenario-A-debit-replay-resp.txt -X POST "$API/ledger/entries" \
echo "PASS scenario A"
echo "$BODY_C1" > out/scenario-B-1-req.json; echo "$BODY_C2" > out/scenario-B-2-req.json; echo "$BODY_D1" > out/scenario-B-3-req.json
curl -sS -D - -o out/scenario-B-1-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_C1" >/dev/null
curl -sS -D - -o out/scenario-B-2-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_C2" >/dev/null
curl -sS -D - -o out/scenario-B-3-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_D1" >/dev/null
echo "PASS scenario B"
echo "$BODY_YC" > out/scenario-C-ycredit-req.json
echo "$BODY_TD" > out/scenario-C-tdebit-req.json
curl -sS -D - -o out/scenario-C-ycredit-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_YC" >/dev/null
curl -sS -D - -o out/scenario-C-tdebit-resp.txt -X POST "$API/ledger/entries" -H "Content-Type: application/json" -H "X-API-Key: $API_KEY" -H "Idempotency-Key: $(uuid)" --data "$BODY_TD" >/dev/null
echo "$JOB2" | sed 's/.*/&/' > out/scenario-D-rebuild-resp.json

END CONTENT
-----8<----- END FILE: ops\test-suite.sh

-----8<----- FILE: pom.xml
Size: 8854 bytes
SHA256: E69EF0B340AFFEE5D4AA1C3B3029D7BCA6B67AAFB922596827A5D212EB7B0CDC
<<<BEGIN CONTENT
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.cashflowchallenge</groupId>
    <artifactId>cashflow-challenge</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Cashflow Challenge</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring-cloud.version>2023.0.3</spring-cloud.version>
        <maven.compiler.release>17</maven.compiler.release>
        <!-- Align Flyway across modules to support PostgreSQL 16.10 -->
        <flyway.version>10.17.3</flyway.version>
        <!-- Default: skip ITs locally; tester/CI sets -DskipITs=false -->
        <skipITs>true</skipITs>
        <project.build.outputTimestamp>${maven.build.timestamp}</project.build.outputTimestamp>
    </properties>

    <modules>
        <module>api-gateway</module>
        <module>ledger-service</module>
        <module>consolidator-service</module>
        <module>balance-query-service</module>
        <module>it-tests</module>
    </modules>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${flyway.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <release>${maven.compiler.release}</release>
                        <showWarnings>true</showWarnings>
                        <failOnWarning>true</failOnWarning>
                        <compilerArgs>
                            <arg>-Xlint:all</arg>
                        </compilerArgs>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.2.5</version>
                    <configuration>
                        <useModulePath>false</useModulePath>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.4.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireJavaVersion>
                                        <version>[17,)</version>
                                    </requireJavaVersion>
                                    <banDuplicatePomDependencyVersions/>
                                    <requireReleaseDeps/>
                                </rules>
                                <fail>true</fail>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.4.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>[17,)</version>
                                </requireJavaVersion>
                                <banDuplicatePomDependencyVersions/>
                                <requireReleaseDeps/>
                                <requireMavenVersion>
                                    <version>[3.9,)</version>
                                </requireMavenVersion>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.12</version>
                <executions>
                    <execution>
                        <goals><goal>prepare-agent</goal></goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals><goal>report</goal></goals>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <exclude>**/dto/**</exclude>
                        <exclude>**/config/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.cyclonedx</groupId>
                <artifactId>cyclonedx-maven-plugin</artifactId>
                <version>2.7.10</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals><goal>makeAggregateBom</goal></goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>10.0.4</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals><goal>check</goal></goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals><goal>analyze</goal></goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>4.9.10</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>ci</id>
            <properties>
                <skipITs>false</skipITs>
            </properties>
        </profile>
    </profiles>

</project>

END CONTENT
-----8<----- END FILE: pom.xml

-----8<----- FILE: project-dump.txt
Size: 23929 bytes
SHA256: 26FCB35245B4710B3F174036F97ED3188912F34406A7E7C50FC0102FA02FCBEA
<<<BEGIN CONTENT

END CONTENT
-----8<----- END FILE: project-dump.txt

-----8<----- FILE: README.md
Size: 12136 bytes
SHA256: 6CF375EF8E5957FDF2B239967D2B6BDD4B88CF37E86BB356FB108B4915F7D370
<<<BEGIN CONTENT
Cashflow Challenge (KISS)

Mission
- Minimal microservices system for a merchant’s daily cashflow: write ledger entries (CREDIT/DEBIT) and expose a consolidated daily balance. The write path uses HTTP idempotency + Outbox to RabbitMQ; the consolidator updates the report model; reads query daily or ranges via the balance-query service.
- Everything runs locally with Docker Compose.

Services
- api-gateway (port 8080): routes to services, in-memory rate limit 50 rps on /balances/*
- ledger-service (port 8081): accepts entries with idempotency, writes outbox and publishes to RabbitMQ
- consolidator-service (port 8082): consumes ledger events and maintains daily balances in report schema
- balance-query-service (port 8083): reads aggregated daily balances

Infra (local)
- Postgres 16, RabbitMQ 3-management, Prometheus, Grafana

How to run
- Ensure Docker and Docker Compose are installed
- From repo root: `docker compose up -d --build`
- Example commands are in this README under Examples and `ops/smoke.*` scripts

Examples
```
# Create a credit (R$ 100,00 = 10000 cents)
curl -s -X POST http://localhost:8080/ledger/entries \
  -H "Content-Type: application/json" \
  -H "Idempotency-Key: 11111111-1111-1111-1111-111111111111" \
  -d '{"occurredOn":"2025-01-10","amountCents":10000,"type":"CREDIT","description":"Sale #123"}'

# Create a debit (R$ 30,00)
curl -s -X POST http://localhost:8080/ledger/entries \
  -H "Content-Type: application/json" \
  -H "Idempotency-Key: 22222222-2222-2222-2222-222222222222" \
  -d '{"occurredOn":"2025-01-10","amountCents":3000,"type":"DEBIT","description":"Supplies"}'

# Query daily balance
curl -s "http://localhost:8080/balances/daily?date=2025-01-10"
```

DLQ Topology
- Exchange `ledger.events` routes `ledger.entry-recorded` to queue `report.ledger.entry-recorded.q`.
- The queue dead-letters to DLX `ledger.dlx` with routing key `ledger.entry-recorded.dlq` into queue `report.ledger.entry-recorded.dlq` after retry exhaustion.

AMQP Topology Ownership
- consolidator-service declares the RabbitMQ topology (exchanges, queues, bindings).
- ledger-service is publish-only: it does not declare any queues/exchanges/bindings.
- To reset stale DLQ arguments, delete the queue and let consolidator recreate it on startup:

```
docker exec -it banco-carrefour-rabbitmq-1 rabbitmqctl delete_queue report.ledger.entry-recorded.dlq
```

How to run
1) mvn -q clean
2) docker compose down -v && docker compose up -d --build
3) docker compose run --rm tester

Auth & headers
- Writes (POST /ledger/**) require `X-API-Key: admin` and `Idempotency-Key` (first write returns 201 + id + Location; duplicates return 409 with same id/Location).
- Reads remain open.

Endpoints / examples
- POST /ledger/entries — create entry (Idempotency-Key required)
- GET /balances/daily?date=YYYY-MM-DD — daily balance
- GET /balances/range?from=YYYY-MM-DD&to=YYYY-MM-DD — range
- Swagger UI (where present): /swagger

Rate limiting NFR
- `/balances/**` is throttled at `GATEWAY_RPS_LIMIT` (default 50 rps). Excess requests receive `429` with `Retry-After: 1`. Prometheus rule `BalanceQueriesRejectionsHigh` fires if 1‑minute rejection ratio exceeds 5%.

Observability
- All services expose `/actuator/health` and `/actuator/prometheus` with common tags (application, instance). Build info is available at `/actuator/info`.

Rate limiting NFR
- `/balances/**` endpoints are throttled at `GATEWAY_RPS_LIMIT` (default 50 rps) via the API Gateway. Requests beyond the limit receive `429 Too Many Requests` and `Retry-After: 1`.
- Prometheus alert `BalanceQueriesRejectionsHigh` fires when 1‑minute rejection ratio exceeds 5%, satisfying the “≤5% loss” target under default sizing.

Outbox Delivery Guarantees
- Ledger deletes outbox rows only when a broker ACK is received and no RabbitMQ RETURN was observed for that message.
- Each published message carries a `correlationId` equal to the outbox event UUID; basic.return events are tracked by this id.
- If a message is RETURNed (e.g., unroutable) but later ACKed, it is kept for retry; the periodic scheduler drains the outbox automatically.

Security
- Admin/backfill endpoint `/consolidator/rebuild` requires `X-API-Key` if `API_KEY` env var is set on the service.

Updated Acceptance
- Flyway V2 migrations applied; indexes exist on `ledger.entries(occurred_on)` and `report.daily_balances(day)`
- Consolidator listener retries with exponential backoff (max 5) then routes to DLQ; no infinite requeue
- Ledger outbox publisher uses separate counters and gentle backoff between scheduler runs
- All services propagate `X-Request-Id` correlation; gateway and services reflect it in responses
- Gateway exposes Prometheus counter for rate-limit rejections
- Load test at ~50 rps for 60s on `/balances/daily` yields ≤5% non-2xx (mostly 429) per instance

Architecture
- DDD-ish layering per service (domain, application, infrastructure, api)
- Outbox pattern for event publishing (ledger-service)
- Async consolidation using RabbitMQ
- OpenAPI per service, Actuator + Prometheus metrics

Docs
- See `docs/adr` for architectural decisions
- See `docs/diagrams` for C4 Mermaid diagrams

Acceptance Checklist
- Compose up: containers healthy (healthchecks green).
- POST /ledger/entries (with Idempotency-Key) → 201 + Location/id; repeating same body/key → 409 (no duplicates).
- GET /balances/daily shows the net balance; range returns ordered daily balances.
- Bombard /balances/** beyond 50 rps → 429 + Retry-After: 1; Prometheus counters increase; alert fires when >5%.
- Stop consolidator, create entries, start consolidator → balances eventually catch up (outbox drains).
- Prometheus scrapes all services; Grafana dashboards load.

How we run
```
mvn -q clean
docker compose down -v && docker compose up -d --build
docker compose run --rm tester
```

How to test
- Prereqs: Docker, Make, Java 17, Maven
- Copy `.env.example` → `.env` (optional: `make secrets.dev` to populate `./secrets/*`)
- One‑liner: `./ops/test-suite.sh` (Linux/macOS) or `pwsh ./ops/test-suite.ps1` (Windows)
- Expected: final `PASS: end-to-end suite completed`

Manual targets
- `make up` → compose up & wait healthy
- `make smoke` → quick idempotency + daily balance check
- `make load` → run load (`ops/load.*`) with defaults (50 rps, 15s)
- `make e2e` → full end‑to‑end suite (`ops/test-suite.*`)
- `make it` → run integration tests container (tester profile)
- `make down` → compose down -v

Endpoints & headers
- `POST /ledger/entries` → 201 Created (first) / 200 OK (replay); requires `X-API-Key` and recommends `Idempotency-Key`; echoes `X-Request-Id` and `Idempotency-Key`; `Retry-After: 1` appears only on 429s from rate limit
- `GET /balances/daily?date=YYYY-MM-DD` → 200 OK JSON `{day,balanceCents}`; echoes `X-Request-Id`, `Idempotency-Key` if provided; supports CORS for `http://localhost:3000`
- `POST /consolidator/rebuild?from=YYYY-MM-DD&to=YYYY-MM-DD` → 202 `{jobId}`; `GET /consolidator/rebuild/status/{jobId}` → 200 `{status}`

Troubleshooting
- Port conflicts (5432/8080..8083/19090): stop other services or change host ports via `.env` where applicable
- API key mismatch: ensure `API_KEY` is `admin` (or set secrets); all POSTs through gateway must include `X-API-Key`
- RabbitMQ not healthy: check compose logs for node/cookie/node name; we set `rabbit@rabbitmq` with a default cookie
- Prometheus: `http://localhost:${PROM_PORT:-19090}` reachable; service metrics exposed at `/actuator/prometheus`
Run locally (quickstart)
- Prereqs: Docker, Make, Java 17, Maven
- Copy `.env.example` → `.env` and tweak if needed
- Optional: `make secrets.dev` to materialize `./secrets/*` from `.env`
- Start: `docker compose up -d --build`

Configuration
- Gateway: `GATEWAY_RPS_LIMIT` (default 50), `GATEWAY_RPS_PATHS` (default `/balances/*,/ledger/*`)
- CORS: per-service `app.cors.allowed-origins` (env `APP_CORS_ALLOWED_ORIGINS`), default `http://localhost:3000`

Headers & error payload
- X-Request-Id: provided or generated per request; echoed in responses
- Idempotency-Key: echoed in responses when provided on request
- Error JSON (uniform):
  `{ "timestamp": "<ISO-8601>", "status": <int>, "error": "<message>", "path": "<path>", "requestId": "<X-Request-Id>", "idempotencyKey": "<Idempotency-Key>" }`

Idempotency (safe replay)
- POST /ledger/entries: first → 201 Created + Location/id; replay with same key → 200 OK with same id (Location unchanged)

Rebuild flow (consolidator)
- POST `/consolidator/rebuild?from=YYYY-MM-DD&to=YYYY-MM-DD` → 202 `{jobId}`
- Constraints: `from <= to`, span ≤ 366 days
- GET `/consolidator/rebuild/status/{jobId}` → status JSON

Balances API
- `/balances/daily?date=YYYY-MM-DD` (Cache-Control: public, max-age=30)
- `/balances/range?from=…&to=…[&page=&size=]` (span ≤ 366 days, returns `[ {day,balanceCents} ]`, cached 30s)

Troubleshooting
- If using secrets, run `make secrets.dev` or create files under `./secrets/` (API_KEY, SPRING_DATASOURCE_USERNAME/PASSWORD, SPRING_RABBITMQ_USERNAME/PASSWORD)
- Without `./secrets`, env vars from `.env` are used automatically
- Logs: `docker compose logs --no-color <service>`; Health: `/actuator/health`, Metrics: `/actuator/prometheus`

Create a credit (PowerShell)
```
$headers = @{ 'Content-Type'='application/json'; 'X-API-Key'='admin'; 'Idempotency-Key'=[guid]::NewGuid().Guid }
$body = @{ occurredOn = (Get-Date -Format 'yyyy-MM-dd'); type='CREDIT'; amountCents=10000; description='seed' } | ConvertTo-Json
Invoke-RestMethod -Method Post -Uri 'http://localhost:8080/ledger/entries' -Headers $headers -Body $body
```

Daily balance
```
$d = Get-Date -Format 'yyyy-MM-dd'
Invoke-RestMethod -Method Get -Uri "http://localhost:8080/balances/daily?date=$d"
```



# Cash Flow Challenge — Execução Local & Testes

## Pré-requisitos
- Docker Desktop ou Docker Engine (Linux/WSL2)
- 4GB+ RAM livre
- **Opcional:** `make` (Linux/macOS) para atalhos

## Subir o stack
```bash
# Linux/macOS
docker compose up -d --build
docker compose ps

# Windows (PowerShell)
docker compose up -d --build
docker compose ps
```

Prometheus: porta do host controlada por PROM_PORT (padrão 19090). O container segue em 9090.

## Testes automatizados (OS-agnóstico)
### Linux/macOS
```
chmod +x ops/test-suite.sh
./ops/test-suite.sh
```

### Windows (PowerShell)
```
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\ops\test-suite.ps1
```

Os testes executam:

- Idempotência do Ledger
  - POST /ledger/entries → 201 + Location
  - Replay com mesma Idempotency-Key → 200 + mesma Location
- Balance Diário
  - GET /balances/daily?date=YYYY-MM-DD → saldo reflete o lançamento (1000)
- Rebuild replace-only
  - POST /consolidator/rebuild?from=D&to=D → jobId
  - Poll do status até COMPLETED/DONE
  - GET diário permanece 1000 mesmo após rebuild repetidos

## Diagnóstico rápido
```
docker compose logs --no-color api-gateway | tail -n +1
docker compose logs --no-color ledger-service | tail -n +1
docker compose logs --no-color consolidator-service | tail -n +1
docker compose logs --no-color balance-query-service | tail -n +1
docker compose logs --no-color rabbitmq | tail -n +1
docker compose logs --no-color postgres | tail -n +1
```

## Variáveis úteis
- API_KEY (default admin) — usada pelos scripts de teste.
- PROM_PORT (default 19090) — porta do host para Prometheus.

## Observações
- Sem alterações de comportamento: rotas/JSON/headers/limites/CORS permanecem iguais.
- Os docker-entrypoint.sh dos serviços não foram modificados.
## Como testar (Linux, macOS e Windows)

Suba a stack:

```bash
docker compose up -d --build
docker compose ps
```

Rode a suíte de testes:

- Linux/macOS: `bash ops/test-suite.sh --load`
- Windows: `pwsh -ExecutionPolicy Bypass -File ops/test-suite.ps1 -Load`

Detalhes completos em `docs/TESTES.md`. Para testes manuais com VS Code, abra `ops/requests.http` (REST Client).

END CONTENT
-----8<----- END FILE: README.md


================================================================================
=  SUMMARY
================================================================================
Files listed : 121
Output file  : C:\Users\leand\teste\banco-carrefour\project-dump.txt
Done.
