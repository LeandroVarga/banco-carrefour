name: E2E Tests

on:
  push:
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build (skip tests)
        run: mvn -q -DskipTests=true package

      - name: Docker / Compose up
        run: |
          docker --version
          docker compose version
          docker compose up -d --build
          docker compose ps

      - name: Wait for services to be healthy
        run: |
          set -euxo pipefail
          sudo apt-get update && sudo apt-get install -y jq
          wait_ok () {
            url="$1"; tries="${2:-60}"
            for i in $(seq 1 "$tries"); do
              status=$(curl -s "$url" | jq -r '.status // empty' || true)
              if [ "$status" = "UP" ]; then
                echo "OK $url"; return 0
              fi
              sleep 1
            done
            echo "NOT HEALTHY: $url"; return 1
          }
          wait_ok http://localhost:8080/actuator/health
          wait_ok http://localhost:8081/actuator/health
          wait_ok http://localhost:8082/actuator/health
          wait_ok http://localhost:8083/actuator/health

      - name: Smoke test (credit 100, debit 30, expect 7000)
        run: |
          set -euxo pipefail
          # crédito 100.00
          curl -fsS -X POST http://localhost:8080/ledger/entries \
            -H "Content-Type: application/json" \
            -H "Idempotency-Key: $(uuidgen)" \
            -d '{"occurredOn":"2025-01-10","amountCents":10000,"type":"CREDIT","description":"ci credit"}' >/dev/null

          # débito 30.00
          curl -fsS -X POST http://localhost:8080/ledger/entries \
            -H "Content-Type: application/json" \
            -H "Idempotency-Key: $(uuidgen)" \
            -d '{"occurredOn":"2025-01-10","amountCents":3000,"type":"DEBIT","description":"ci debit"}' >/dev/null

          # aguarda consolidação (até 30s) pelo saldo >= 7000
          for i in $(seq 1 30); do
            bal=$(curl -fsS 'http://localhost:8080/balances/daily?date=2025-01-10' | jq -r .balanceCents)
            echo "balanceCents=$bal (try $i)"
            test "${bal:-0}" -ge 7000 && exit 0
            sleep 1
          done
          echo "Expected balance not reached in time"; exit 1

      - name: Collect logs & compose ps
        if: always()
        run: |
          mkdir -p out
          docker compose ps > out/compose-ps.txt || true
          docker compose logs --no-color > out/compose.log || true
          for s in postgres rabbitmq ledger-service consolidator-service balance-query-service api-gateway; do
            docker compose logs --no-color "$s" > "out/${s}.log" 2>/dev/null || true
          done

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs-ubuntu-latest
          path: out/**
          if-no-files-found: warn

      - name: Teardown
        if: always()
        run: docker compose down -v --remove-orphans
